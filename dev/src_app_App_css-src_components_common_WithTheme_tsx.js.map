{"version":3,"file":"src_app_App_css-src_components_common_WithTheme_tsx.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;AACA;;;;;;;AAAA;AAGA;AANA;AAQA;;AACA;AAEA;AAEA;AACA;;;;;;;AAEA;AAAA;;;;;;;AAAA;AAGA;AAXA;;AACA;;;AADA;AAaA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAGA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtFA;AAEA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxGA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAMA;AAEA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AAEA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AAAA;AAAA;AAAA;AAIA;AAEA;AAKA;AAEA;AAAA;AAAA;AAAA;AAGA;AAEA;AAIA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClHA;AAWA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AAEA;AAeA;AACA;AAEA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAIA;AACA;AAAA;AAEA;AAEA;AASA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AAEA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAEA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AAEA;AAEA;AACA;AAEA;AAEA;;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AATA;;AACA;;;AAUA;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAxBA;;AACA;AAMA;;;AAmBA;;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AATA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;AAEA;AAIA;;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AAVA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AAEA;AACA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AAhBA;;AACA;;;AAiBA;;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAbA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAhBA;AAkBA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAIA;AAlBA;AAoBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAhBA;AAkBA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAfA;AAiBA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAtBA;AAwBA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;;;;;;;AACA;AACA;AACA;;;;;;;AAGA;;;;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;AAKA;AA7BA;AA+BA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAtBA;AAwBA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AAIA;AArBA;AAuBA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAfA;AAiBA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;;;;;;;;AAIA;AAhBA;AAkBA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;;;;;;;;AAIA;AAhBA;AAkBA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAtBA;AAwBA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AAIA;AAlCA;AAmCA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAtBA;AAwBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAhBA;AAkBA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AAIA;AAxBA;AA0BA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAtBA;AAwBA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAtBA;AAwBA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;;;;;;;AACA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;;;;;;;;AAKA;AAxCA;AA0CA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAKA;AArDA;AAuDA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAvBA;AAyBA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAfA;AAiBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;;;;;;;;AAIA;AAjBA;AAmBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AA5BA;AA8BA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AA5BA;AA8BA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAhBA;AAkBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAIA;AAxBA;AA0BA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAtBA;AAwBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;AAEA;AAAA;;;;;;;;AAGA;AAbA;AAeA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAhBA;AAkBA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;;;;;;;;AAIA;AATA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AAIA;AAjBA;AAmBA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAfA;AAiBA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;;;;;;;;AAIA;AATA;AAWA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAIA;AAXA;AAaA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AA3CA;AA6CA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AAIA;AAlBA;AAoBA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;;AAIA;AAtBA;AAwBA;AAOA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;;;;;;;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAGA;;;;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;AAKA;AAhCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACr3BA;AACA;AACA;AACA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;;;;;;;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAKA;AA9BA;;AACA;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAAA;;;;;;;AAAA;AACA;AAHA;;AACA;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAGA;AAEA;;AAQA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAGA;AA3BA;;AAQA;;;AARA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AAEA;AAEA;;AAyBA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAEA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAKA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAOA;AAlHA;;AAyBA;;;AAzBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAIA;AAGA;AACA;AACA;AAIA;AAGA;AACA;AACA;AAOA;;AACA;AAAA;AAAA;AACA;AAAA;;;;;;;AAAA;AACA;AAHA;;AACA;;;AADA;AAgBA;;AAUA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAIA;AAnDA;;AAUA;;;AAVA;AA0EA;;AAoBA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;AAEA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;AAEA;AAKA;AAnHA;;AAoBA;;;AApBA;AAqHA;;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAGA;AAtDA;;AAWA;AACA;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7QA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;;;;;;;AAAA;AAIA;;;;;;;AAAA;AAIA;AA7BA;;AAWA;;;AAXA;AA+BA;;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAIA;AAvBA;;AASA;AACA;;;AAVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAGA;AAnBA;;AACA;;;AADA;AAqBA;;AAeA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAKA;AACA;AAGA;AACA;AACA;AAAA;AAAA;;;;;;;AACA;AAGA;AApEA;;AAeA;AACA;;;AAhBA;AAsEA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AAIA;AAlBA;;AACA;;;AADA;AAoBA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;;AAIA;AAlBA;;AACA;;;AADA;AAoBA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA;AACA;AACA;AAAA;;;;;;;AACA;AACA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;AAKA;AAtBA;;AACA;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AAEA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAGA;AAjCA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAGA;AAjBA;;AACA;AACA;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAWA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAIA;AA3CA;;AAWA;AACA;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AAMA;;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/HA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAWA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAGA;AApCA;;AAWA;AACA;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AAOA;AAEA;AACA;AACA;AAEA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AAGA;AAxBA;;AAQA;AACA;;;AATA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAGA;AAnBA;;AACA;AACA;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAEA;AACA;AACA;AACA;AACA;AAGA;;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAGA;AA1BA;;AASA;;;AATA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AAEA;AAEA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAGA;AAhBA;;AAEA;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AAEA;;AAOA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;AACA;AAAA;;;;;;;AACA;AAAA;;;;;;;AACA;;;;;;;AACA;AAKA;AAtBA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;AAIA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAEA;AAAA;AAAA;AAAA;;;;;;;AACA;AAKA;AAjDA;;AACA;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAOA;;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AAIA;AAIA;AACA;AAKA;AAEA;;AAEA;AAKA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;;AAEA;AAKA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AAKA;AACA;AACA;AACA;AAIA;AACA;AAEA;;AAEA;AAKA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAKA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAKA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAMA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrNA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AAOA;AAEA;;;AAGA;AAEA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAKA;AAEA;AACA;AAEA;AAEA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAOA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxHA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AAMA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AASA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAGA;AAAA;AAIA;AASA;AAIA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7JA;AAIA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAUA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAGA;AAAA;AAAA;AACA;AAGA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AAIA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzDA;AAOA;AAQA;AAEA;AACA;AAEA;AAOA;AAEA;AAMA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AAIA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AASA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AAGA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AASA;AAKA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAWA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAWA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9RA;AAMA;AAIA;AAQA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AAGA;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5EA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AAQA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzKA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrDA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1PA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AAEA;AACA;AAKA;;;AAGA;AAQA;AACA;AACA;AACA;AASA;AACA;AAMA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAOA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AAGA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpKA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAOA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAKA;AAMA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5RA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AAOA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrDA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AAMA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAQA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;AAGA;AAQA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;AAGA;AAQA;AACA;AASA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAIA;AACA;AACA;AAEA;;;AAGA;AAQA;AACA;AASA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAEA;;AAEA;AAQA;AACA;AASA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AAEA;;AAEA;AAKA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAUA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAKA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAIA;AASA;AAIA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7YA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AAUA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AAGA;AAGA;AAOA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpOA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AAKA;AAEA;AAIA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AAIA;AAIA;AACA;AAEA;;;AAGA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AASA;AACA;AACA;AAGA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAUA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AAMA;AACA;AAEA;;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnTA;AAiBA;AAIA;AACA;AACA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAGA;AA1CA;AAAA;AA4CA;;AACA;AACA;AACA;AACA;AACA;AACA;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnpBA;;AACA;AASA;AAiBA;AACA;AACA;AACA;AACA;AAGA;AAGA;AA0CA;AA0DA;AAEA;AACA;AAEA;;;AA9IA;AA6pBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACruBA;AAgBA;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAilSA;;AAMA;AACA;AACA;;;AARA;AAoSA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AARA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjbA;AACA;AAYA;AAEA;AACA;AACA;AAEA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AAuEA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAXA;AAaA;;AAOA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAGA;AAhdA;;AAQA;AAEA;AACA;AAIA;AAOA;AAmGA;AAmCA;;;AA5JA;AAkdA;;AACA;AACA;AACA;AACA;AACA;AACA;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1kBA;AAEA;AASA;AASA;AACA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAOA;AAGA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AApMA;;AAEA;AACA;AACA;AACA;AACA;AAqBA;;;AA3BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAWA;AAMA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;;;AAGA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;;;AAGA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;;;AAGA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjJA;AACA;AAEA;AAEA;AAEA;AAEA;;AACA;AACA;AACA;AACA;AACA;AAGA;AARA;;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;;AACA;AAIA;AACA;AACA;AACA;AACA;;;AAGA;;AACA;AACA;AAFA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AAEA;AAEA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AAFA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAEA;AAEA;;AACA;AACA;AAFA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;AACA;;;AAQA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AAEA;AAEA;;AACA;AACA;AAFA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AAEA;AAEA;;AACA;AAWA;AAEA;AACA;AACA;AAGA;AACA;AApBA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AAEA;AAGA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AAFA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AAEA;AAQA;AAEA;AAEA;AAUA;;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;;AACA;AAEA;AAMA;;;AAYA;AACA;;AACA;AACA;AACA;AACA;AACA;AALA;;AACA;;;AAMA;;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAnBA;;AACA;AACA;;;AAmBA;;AACA;AACA;AAEA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA7CA;;AACA;AACA;;;AA6CA;;;;AAIA;;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClIA;;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAUA;AAIA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAYA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAKA;AAAA;AAAA;AACA;AA7DA;;AACA;AACA;AACA;;;AAHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvEA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAbA;;AACA;AACA;;;AAaA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AAAA;AAAA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AAFA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAOA;AAAA;AAAA;AAAA;AACA;AARA;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAMA;AACA;AAEA;AAEA;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAQA;AAEA;AACA;AACA;AAGA;AAAA;AAIA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAKA;AAEA;AAIA;AAOA;AAMA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AAIA;AACA;AAIA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AAMA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AAKA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxaA;AAEA;AAGA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AAAA;AAAA;AACA;AAFA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAEA;AAEA;;AACA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AApBA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAOA;AAKA;;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AAVA;;AACA;AACA;;;AAUA;;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAVA;;AACA;AACA;;;AAUA;;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAVA;;AACA;;;AAWA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAbA;;AACA;;;AAcA;;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAvBA;AAyBA;;AAIA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AA5DA;;AAIA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;;;AA2CA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClMA;;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAUA;AAEA;;AAWA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AA9BA;;AAWA;AAIA;;;AAiBA;;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAMA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;;AACA;AACA;AAGA;;;AA0BA;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAnBA;;AAMA;;;AAeA;;AACA;AAAA;AAAA;AACA;AAFA;;AACA;;;AAGA;;AAOA;AACA;AAAA;AAAA;AAEA;AAVA;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpHA;AAEA;AAEA;;AACA;AACA;AAFA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;;AACA;AACA;AACA;AACA;AACA;;;AAWA;;AACA;AACA;AAFA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AAEA;AAEA;;AACA;AACA;AAFA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AAUA;AAGA;AACA;AAKA;AAEA;;AAgBA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAKA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjIA;;AAiBA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AAEA;AAEA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AACA;AAHA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AAEA;AAGA;;AAIA;AACA;AALA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAOA;AAEA;;AACA;AAEA;;AAEA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AASA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA9IA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AAEA;AAGA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;;AAGA;AAEA;;;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;;AAGA;AAEA;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAOA;AAEA;AACA;AACA;AAEA;AAbA;;AAOA;;;AAQA;;AAOA;AAEA;AACA;AACA;AAEA;AAbA;;AAOA;;;AAQA;;AAOA;AACA;AAAA;AAAA;AAEA;AAVA;;AAOA;;;AAKA;;AASA;AACA;AAAA;AAAA;AAAA;AAEA;AAZA;;AASA;;;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;;AAEA;;;AAYA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AAbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AAEA;AAEA;;AACA;AACA;AAFA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAEA;AASA;;AACA;AAAA;AAAA;AACA;AAFA;;AACA;;;AAGA;;AACA;AAAA;AAAA;AACA;AAFA;;AACA;;;AAGA;;AACA;AAAA;AAAA;AACA;AAFA;;AACA;;;AAGA;;AAKA;AAAA;AAAA;AACA;AANA;;AAKA;;;AAGA;;AACA;AAAA;AAAA;AACA;AAFA;;AACA;;;AAGA;;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAVA;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AAKA;AAEA;AACA;AAEA;;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAnIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAEA;AAEA;;;;AAIA;;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAtBA;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AAEA;AAEA;;AACA;AACA;AAFA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AAEA;AAEA;;AACA;AACA;AAFA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AAEA;AAEA;;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAVA;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AAEA;AAEA;;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA1BA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAEA;AAEA;;AAOA;AAAA;AAAA;AAAA;AACA;AARA;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AAEA;AAEA;;AACA;AACA;AAFA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAEA;AASA;AAEA;AAKA;AAEA;AASA;AACA;AA6BA;;AAIA;AACA;AAKA;AAVA;;AAOA;AAEA;;;AAGA;;AAIA;AACA;;AAEA;AAAA;;AAAA;;AAEA;;AAAA;AAAA;;AAAA;;AAAA;AACA;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhKA;;AACA;AACA;;;AAgKA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApPA;;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChQA;AAEA;AAEA;;AACA;AACA;AAFA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AAEA;AAEA;;AACA;AASA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AA5BA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AAEA;AAEA;;AACA;AASA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAnBA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AAEA;AAEA;;AAOA;AAAA;AAAA;AAAA;AACA;AARA;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAEA;AAEA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AACA;AACA;AACA;AALA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAEA;AAGA;;AAIA;AACA;AALA;;AAIA;;;AAGA;;AAIA;AACA;AALA;;AAIA;;;AAGA;;AAKA;AACA;AANA;;AAKA;;;AAGA;;AAKA;AACA;AANA;;AAKA;;;AAGA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AAFA;;AACA;;;AAGA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;;AACA;;;AAaA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;;AACA;;;AAaA;;AAMA;AACA;AAPA;;AAMA;;;AAGA;;AAOA;AACA;AARA;;AAOA;;;AAGA;;AAOA;AACA;AARA;;AAOA;;;AAGA;;AAIA;AACA;AALA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AA8EA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/PA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnLA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AAEA;AAGA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7JA","sources":["webpack://@coral-xyz/app-extension/./src/app/App.css","webpack://@coral-xyz/app-extension/./src/app/App.css?9893","webpack://@coral-xyz/app-extension/./src/components/common/WithTheme.tsx","webpack://@coral-xyz/app-extension/../db/src/api/LocalImageManager.ts","webpack://@coral-xyz/app-extension/../db/src/api/RecoilSync.tsx","webpack://@coral-xyz/app-extension/../db/src/api/chats.ts","webpack://@coral-xyz/app-extension/../db/src/api/friendships.ts","webpack://@coral-xyz/app-extension/../db/src/api/index.ts","webpack://@coral-xyz/app-extension/../db/src/api/users.ts","webpack://@coral-xyz/app-extension/../db/src/db/chats.ts","webpack://@coral-xyz/app-extension/../db/src/db/exports.ts","webpack://@coral-xyz/app-extension/../db/src/db/friends.ts","webpack://@coral-xyz/app-extension/../db/src/db/getIndexDb.ts","webpack://@coral-xyz/app-extension/../db/src/db/images.ts","webpack://@coral-xyz/app-extension/../db/src/db/index.ts","webpack://@coral-xyz/app-extension/../db/src/db/users.ts","webpack://@coral-xyz/app-extension/../db/src/hooks/chats.tsx","webpack://@coral-xyz/app-extension/../db/src/hooks/contacts.tsx","webpack://@coral-xyz/app-extension/../db/src/hooks/index.ts","webpack://@coral-xyz/app-extension/../db/src/hooks/users.tsx","webpack://@coral-xyz/app-extension/../db/src/index.ts","webpack://@coral-xyz/app-extension/../react-common/src/components/Icon/index.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/BackpackStaffIcon.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/BubbleTopLabel.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/DangerButton.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/EmptyState.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/Inputs.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/Labels.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/List.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/Loading.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/LocalImage.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/NegativeButton.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/PrimaryButton.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/ProxyImage.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/SearchBox.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/SecondaryButton.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/SuccessButton.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/UserAction.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/UserIcon.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/base/index.ts","webpack://@coral-xyz/app-extension/../react-common/src/components/mui/WithTheme.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/mui/index.ts","webpack://@coral-xyz/app-extension/../react-common/src/components/toasts/Success.tsx","webpack://@coral-xyz/app-extension/../react-common/src/components/toasts/index.tsx","webpack://@coral-xyz/app-extension/../react-common/src/hooks/index.ts","webpack://@coral-xyz/app-extension/../react-common/src/index.ts","webpack://@coral-xyz/app-extension/../recoil/src/atoms/avatar.ts","webpack://@coral-xyz/app-extension/../recoil/src/atoms/balance.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/bootstrap.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/client.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/ethereum/index.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/ethereum/nft.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/ethereum/preferences.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/ethereum/provider.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/ethereum/token-metadata.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/ethereum/token.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/feature-gates.ts","webpack://@coral-xyz/app-extension/../recoil/src/atoms/friendship.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/index.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/keyring.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/nft.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/notifications.ts","webpack://@coral-xyz/app-extension/../recoil/src/atoms/preferences/connection-urls.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/preferences/index.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/preferences/xnft-preferences.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/prices.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/primaryWallets.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/recent-transactions.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/solana/index.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/solana/isONELive.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/solana/jupiter.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/solana/nft.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/solana/preferences.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/solana/recent-transactions.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/solana/token-registry.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/solana/token.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/solana/wallet.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/solana/xnft.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/spotlight.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/tokenMetadata.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/transaction-request.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/unreadCount.tsx","webpack://@coral-xyz/app-extension/../recoil/src/atoms/wallet.tsx","webpack://@coral-xyz/app-extension/../recoil/src/context/NavEphemeral.tsx","webpack://@coral-xyz/app-extension/../recoil/src/context/Notifications.tsx","webpack://@coral-xyz/app-extension/../recoil/src/context/OnboardingProvider.tsx","webpack://@coral-xyz/app-extension/../recoil/src/context/Swap.tsx","webpack://@coral-xyz/app-extension/../recoil/src/context/WithAuth.tsx","webpack://@coral-xyz/app-extension/../recoil/src/context/index.tsx","webpack://@coral-xyz/app-extension/../recoil/src/context/useNavigatePolyfill.ts","webpack://@coral-xyz/app-extension/../recoil/src/equals.ts","webpack://@coral-xyz/app-extension/../recoil/src/hooks/avatar.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/bootstrap.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/client.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/ethereum/index.ts","webpack://@coral-xyz/app-extension/../recoil/src/hooks/ethereum/useEthereumConnectionUrl.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/ethereum/useEthereumCtx.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/ethereum/useEthereumExplorer.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/ethereum/useUpdateEthereumBalances.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/index.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/keyring.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/navigation.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/notifications.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/preferences/index.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/solana/index.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/solana/recentTransactionHelpers.ts","webpack://@coral-xyz/app-extension/../recoil/src/hooks/solana/useJupiter.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/solana/useLoadSplTokens.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/solana/usePlugins.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/solana/useRecentTransactions.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/solana/useSolanaCommitment.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/solana/useSolanaConnection.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/solana/useSolanaExplorer.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/solana/useSolanaTransaction.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/solana/useSplTokenRegistry.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/transaction-request.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useAuthentication.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useBlockchain.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useBreakpoints.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useFeatureGates.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useFriendship.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useIsValidAddress.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useLoader.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/usePriceData.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/usePrimaryWallets.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useRecentNotifications.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useRpcRequests.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useTokenMetadata.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useTotalBalance.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useTransactionData.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useUnreadCount.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useUpdateFriendship.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useUpdateUsers.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useUserMetadataMap.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/useXnftPreferences.tsx","webpack://@coral-xyz/app-extension/../recoil/src/hooks/wallet.tsx","webpack://@coral-xyz/app-extension/../recoil/src/index.ts","webpack://@coral-xyz/app-extension/../recoil/src/types.ts","webpack://@coral-xyz/app-extension/../recoil/src/utils.ts","webpack://@coral-xyz/app-extension/../tamagui-core/dist/esm/fonts.js","webpack://@coral-xyz/app-extension/../tamagui-core/dist/esm/tamagui.config.js","webpack://@coral-xyz/app-extension/../themes/src/base.ts","webpack://@coral-xyz/app-extension/../themes/src/colors.ts","webpack://@coral-xyz/app-extension/../themes/src/colorsv2.ts","webpack://@coral-xyz/app-extension/../themes/src/index.ts","webpack://@coral-xyz/app-extension/../themes/src/mobile.ts","webpack://@coral-xyz/app-extension/../themes/src/theme.tsx","webpack://@coral-xyz/app-extension/ignored|/Users/pratham/Documents/GitHub/backpack/node_modules/tweetnacl|crypto"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body {\\n  background: black;\\n}\\n\\n.track-vertical {\\n  top: 2px;\\n  bottom: 2px;\\n  right: 2px;\\n  border-radius: 3px;\\n}\\n.track-vertical .thumb-vertical {\\n  position: relative;\\n  display: block;\\n  width: 100%;\\n  cursor: pointer;\\n  border-radius: inherit;\\n}\\n\\n.track-horizontal {\\n  position: absolute;\\n  height: 6px;\\n  right: 2px;\\n  bottom: 2px;\\n  left: 2px;\\n  border-radius: 3px;\\n}\\n.track-horizontal .thumb-horizontal {\\n  position: relative;\\n  display: block;\\n  height: 100%;\\n  cursor: pointer;\\n  border-radius: inherit;\\n}\\n.view {\\n  position: absolute;\\n  top: 0px;\\n  left: 0px;\\n  right: 0px;\\n  bottom: 0px;\\n  overflow: auto;\\n  margin-right: -15px;\\n}\\n\\n.stack-push-enter {\\n  z-index: 1;\\n}\\n.stack-push-active {\\n  transform: translate3d(100%, 0, 0);\\n  transition: all 300ms ease-in-out;\\n}\\n.stack-push-exit {\\n  z-index: 10;\\n}\\n.stack-push-active {\\n  transform: translate3d(-100%, 0, 0);\\n  transition: all 300ms ease-in-out;\\n}\\n\\n.Toastify__toast {\\n  border-radius: 20px !important;\\n  margin: 10px;\\n  padding: 10px !important;\\n}\\n\\n[contentEditable=\\\"true\\\"]:empty:before {\\n  content: attr(placeholder);\\n  opacity: 0.2;\\n}\\n\\n[contenteditable]:focus {\\n  outline: 0px solid transparent;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/app/App.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,iBAAiB;AACnB;;AAEA;EACE,QAAQ;EACR,WAAW;EACX,UAAU;EACV,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,WAAW;EACX,eAAe;EACf,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,UAAU;EACV,WAAW;EACX,SAAS;EACT,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,YAAY;EACZ,eAAe;EACf,sBAAsB;AACxB;AACA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,UAAU;EACV,WAAW;EACX,cAAc;EACd,mBAAmB;AACrB;;AAEA;EACE,UAAU;AACZ;AACA;EACE,kCAAkC;EAClC,iCAAiC;AACnC;AACA;EACE,WAAW;AACb;AACA;EACE,mCAAmC;EACnC,iCAAiC;AACnC;;AAEA;EACE,8BAA8B;EAC9B,YAAY;EACZ,wBAAwB;AAC1B;;AAEA;EACE,0BAA0B;EAC1B,YAAY;AACd;;AAEA;EACE,8BAA8B;AAChC\",\"sourcesContent\":[\"body {\\n  background: black;\\n}\\n\\n.track-vertical {\\n  top: 2px;\\n  bottom: 2px;\\n  right: 2px;\\n  border-radius: 3px;\\n}\\n.track-vertical .thumb-vertical {\\n  position: relative;\\n  display: block;\\n  width: 100%;\\n  cursor: pointer;\\n  border-radius: inherit;\\n}\\n\\n.track-horizontal {\\n  position: absolute;\\n  height: 6px;\\n  right: 2px;\\n  bottom: 2px;\\n  left: 2px;\\n  border-radius: 3px;\\n}\\n.track-horizontal .thumb-horizontal {\\n  position: relative;\\n  display: block;\\n  height: 100%;\\n  cursor: pointer;\\n  border-radius: inherit;\\n}\\n.view {\\n  position: absolute;\\n  top: 0px;\\n  left: 0px;\\n  right: 0px;\\n  bottom: 0px;\\n  overflow: auto;\\n  margin-right: -15px;\\n}\\n\\n.stack-push-enter {\\n  z-index: 1;\\n}\\n.stack-push-active {\\n  transform: translate3d(100%, 0, 0);\\n  transition: all 300ms ease-in-out;\\n}\\n.stack-push-exit {\\n  z-index: 10;\\n}\\n.stack-push-active {\\n  transform: translate3d(-100%, 0, 0);\\n  transition: all 300ms ease-in-out;\\n}\\n\\n.Toastify__toast {\\n  border-radius: 20px !important;\\n  margin: 10px;\\n  padding: 10px !important;\\n}\\n\\n[contentEditable=\\\"true\\\"]:empty:before {\\n  content: attr(placeholder);\\n  opacity: 0.2;\\n}\\n\\n[contenteditable]:focus {\\n  outline: 0px solid transparent;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!./App.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n  var p;\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (!a[p]) {\n      return false;\n    }\n  }\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../../node_modules/css-loader/dist/cjs.js!./App.css\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!./App.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import type { ReactNode } from \"react\";\nimport { Suspense } from \"react\";\nimport { EXTENSION_HEIGHT, EXTENSION_WIDTH } from \"@coral-xyz/common\";\nimport { WithThemeInner } from \"@coral-xyz/react-common\";\nimport { useDarkMode } from \"@coral-xyz/recoil\";\nimport { config, TamaguiProvider } from \"@coral-xyz/tamagui\";\n\nexport const WithTheme = ({ children }: { children: ReactNode }) => {\n  return (\n    <Suspense fallback={<BlankNoTheme />}>\n      <WithThemeMode>{children}</WithThemeMode>\n    </Suspense>\n  );\n};\n\nconst WithThemeMode = ({ children }: { children: ReactNode }) => {\n  const isDarkMode = useDarkMode();\n\n  return (\n    <TamaguiProvider\n      config={config}\n      defaultTheme={isDarkMode ? \"dark\" : \"light\"}\n    >\n      <WithThemeInner isDarkMode={isDarkMode}>{children}</WithThemeInner>\n    </TamaguiProvider>\n  );\n};\n\n// Used as a suspense fallback when loading the theme from the background.\nconst BlankNoTheme: React.FC = () => {\n  return (\n    <div\n      style={{\n        minWidth: `${EXTENSION_WIDTH}px`,\n        minHeight: `${EXTENSION_HEIGHT}px`,\n        height: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        overflow: \"hidden\",\n        position: \"relative\",\n      }}\n    />\n  );\n};\n","import { getImage, putImage } from \"../db/images\";\n\nexport class LocalImageManager {\n  static instance: LocalImageManager;\n  queue: { image: string; timestamp: number; fullImage?: boolean }[] = [];\n\n  private constructor() {\n    this.process();\n  }\n\n  async process() {\n    this.queue = this.queue\n      .filter((x) => (new Date().getTime() - x.timestamp) / 1000 > 3600)\n      .sort((a, b) => (a.timestamp < b.timestamp ? 1 : -1));\n    const nextEl = this.queue.pop();\n    if (nextEl) {\n      await this.storeImageInLocalStorage(nextEl.image, nextEl.fullImage);\n    }\n    await this.sleep(15);\n    this.process();\n  }\n\n  async sleep(timer) {\n    await new Promise((resolve) => setTimeout(resolve, timer * 1000));\n  }\n\n  bulkAddToQueue(elements: { image: string }[]) {\n    elements.forEach((el) => this.addToQueue(el));\n  }\n\n  async addToQueue({ image }: { image: string }) {\n    if (this.queue.find((x) => x.image === image)) {\n      return;\n    }\n\n    try {\n      const parsedEl = await getImage(\"images\", `image-${image}`);\n      if (parsedEl) {\n        this.queue.push({\n          image,\n          timestamp: parsedEl.timestamp,\n          fullImage: parsedEl.fullImage || false,\n        });\n      } else {\n        this.queue.push({ image, timestamp: 0 });\n      }\n    } catch (e) {\n      this.queue.push({ image, timestamp: 0 });\n    }\n  }\n\n  static getInstance() {\n    if (!this.instance) {\n      this.instance = new LocalImageManager();\n    }\n    return this.instance;\n  }\n\n  storeImageInLocalStorage(\n    url: string,\n    fullImage?: boolean,\n    overridenUrl?: string\n  ) {\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement(\"canvas\");\n      //@ts-ignore\n      const context = canvas.getContext(\"2d\");\n      const base_image = new Image();\n      base_image.crossOrigin = \"anonymous\";\n      base_image.onload = async function () {\n        const aspectRatio = base_image.width / base_image.height;\n        canvas.width = fullImage ? base_image.width : 200;\n        canvas.height = fullImage ? base_image.height : 200 / aspectRatio;\n        //@ts-ignore\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        //@ts-ignore\n        context.drawImage(base_image, 0, 0, canvas.width, canvas.height);\n        // @ts-ignore\n        const dataURL = canvas.toDataURL(\"image/webp\");\n        await putImage(\"images\", `image-${url}`, {\n          url: dataURL,\n          timestamp: new Date().getTime(),\n          fullImage: fullImage ? true : false,\n        });\n\n        resolve(\"\");\n      };\n      base_image.src = overridenUrl || url;\n    });\n  }\n}\n","import type { SubscriptionType, UserMetadata } from \"@coral-xyz/common\";\n\nimport { getDb } from \"../db\";\nimport { bulkGetImages } from \"../db/images\";\n\nimport { LocalImageManager } from \"./LocalImageManager\";\nimport { refreshUsers } from \"./users\";\n\nexport class RecoilSync {\n  private static instance: RecoilSync;\n  private constructor() {}\n\n  static getInstance() {\n    if (!this.instance) {\n      this.instance = new RecoilSync();\n    }\n    return this.instance;\n  }\n\n  async getActiveChats(uuid: string) {\n    return getDb(uuid)\n      .inbox.where({ blocked: 0 })\n      .filter(\n        (x) =>\n          x.interacted === 1 || (x.areFriends === 1 && x.remoteInteracted === 1)\n      )\n      .reverse()\n      .sortBy(\"last_message_timestamp\");\n  }\n\n  getActiveGroups(uuid: string) {\n    return getDb(uuid).collections.toArray();\n  }\n\n  getRequestCount(uuid: string) {\n    return getDb(uuid)\n      .inbox.where({ areFriends: 0, interacted: 0, remoteInteracted: 1 })\n      .count();\n  }\n\n  getAllChats(uuid: string) {\n    return getDb(uuid).messages.toArray();\n  }\n\n  getAllUsers(uuid: string): Promise<UserMetadata[]> {\n    return getDb(uuid).users.toArray();\n  }\n\n  async refreshUsersMetadata(uuid: string) {\n    const users = await getDb(uuid).users.toArray();\n    const newUsersMetadata = await refreshUsers(\n      uuid,\n      users.map((x) => x.uuid),\n      true\n    );\n\n    const allImageData = await bulkGetImages(\"images\");\n\n    const sortedUsersMetadata = newUsersMetadata?.sort((a) => {\n      if (allImageData.includes(`image-${a.image}`)) {\n        return 1;\n      }\n      return -1;\n    });\n\n    if (sortedUsersMetadata) {\n      LocalImageManager.getInstance().bulkAddToQueue(\n        sortedUsersMetadata.map((x) => {\n          return {\n            image: x.image,\n          };\n        })\n      );\n    }\n  }\n\n  async sleep(timer) {\n    await new Promise((resolve) => setTimeout(resolve, timer * 1000));\n  }\n\n  getChatsForRoom(uuid: string, room: string, type: SubscriptionType) {\n    return getDb(uuid).messages.where({ room, type }).sortBy(\"created_at\");\n  }\n\n  getAllUserMetadata(uuid: string) {\n    return getDb(uuid).users.toArray();\n  }\n}\n","import type { MessageWithMetadata, SubscriptionType } from \"@coral-xyz/common\";\nimport { BACKEND_API_URL } from \"@coral-xyz/common\";\n\nimport { createOrUpdateCollection } from \"../db/chats\";\nimport { updateFriendship } from \"../db/friends\";\n\nexport const updateLastRead = (\n  uuid: string,\n  client_generated_uuid: string,\n  room: string,\n  type: SubscriptionType,\n  sender: string,\n  publicKey?: string,\n  nftMint?: string // To avoid DB calls on the backend\n) => {\n  if (type === \"individual\" && uuid !== sender) {\n    updateFriendship(uuid, sender, {\n      unread: 0,\n    });\n  }\n\n  if (type === \"individual\" && uuid === sender) {\n    updateFriendship(uuid, sender, {\n      interacted: 1,\n    });\n  }\n\n  if (type === \"collection\") {\n    createOrUpdateCollection(uuid, {\n      collectionId: room,\n      lastReadMessage: client_generated_uuid,\n      lastMessageUuid: client_generated_uuid,\n    });\n  }\n\n  fetch(\n    `${BACKEND_API_URL}/chat/lastRead?room=${room}&type=${type}&publicKey=${publicKey}&mint=${nftMint}`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ client_generated_uuid }),\n    }\n  );\n};\n","import type { CollectionChatData, EnrichedInboxDb } from \"@coral-xyz/common\";\nimport { BACKEND_API_URL } from \"@coral-xyz/common\";\n\nimport { getDb } from \"../db\";\nimport { createOrUpdateCollection } from \"../db/chats\";\nimport {\n  createDefaultFriendship,\n  getFriendshipByUserId,\n  updateFriendship,\n} from \"../db/friends\";\n\nexport const refreshFriendships = async (uuid: string, jwt?: string) => {\n  const db = getDb(uuid);\n  try {\n    const res = await fetch(`${BACKEND_API_URL}/inbox/all?uuid=${uuid}`, {\n      headers: {\n        Authorization: `Bearer ${jwt}`,\n      },\n    });\n    const json = await res.json();\n    const chats: EnrichedInboxDb[] = json.chats;\n    if (!chats) {\n      return;\n    }\n    const existingChats = await db.inbox.toArray();\n    for (const existingChat of existingChats) {\n      if (!chats.find((x) => x.remoteUserId === existingChat.remoteUserId)) {\n        await db.inbox.delete(existingChat.remoteUserId);\n      }\n    }\n    if (chats) {\n      await Promise.all(\n        chats?.map(async (chat) => {\n          await db.inbox.put(chat);\n        }) || []\n      );\n    }\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport const refreshGroups = async (uuid: string, jwt?: string) => {\n  try {\n    const response = await fetch(`${BACKEND_API_URL}/nft/bulk?uuid=${uuid}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${jwt}`,\n      },\n    });\n\n    const res = await response.json();\n    const collections: CollectionChatData[] = res.collections;\n    await Promise.all(\n      collections?.map(async (collection) => {\n        await createOrUpdateCollection(uuid, collection);\n      }) || []\n    );\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport const blockUser = async (uuid: string, to: string, blocked: boolean) => {\n  await fetch(`${BACKEND_API_URL}/friends/block`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ to, block: blocked }),\n  });\n  await updateFriendship(uuid, to, { blocked: blocked ? 1 : 0 });\n};\n\nexport const markSpam = async (uuid: string, to: string, spam: boolean) => {\n  await fetch(`${BACKEND_API_URL}/friends/spam`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ to, spam }),\n  });\n  await updateFriendship(uuid, to, { spam: spam ? 1 : 0 });\n};\n\nexport const createEmptyFriendship = async (\n  uuid: string,\n  remoteUserId: string,\n  props: {\n    last_message_sender?: string;\n    last_message_timestamp?: string;\n    last_message?: string;\n    last_message_client_uuid?: string;\n    remoteUsername?: string;\n    id?: string;\n  }\n) => {\n  const existingFriendship = await getFriendshipByUserId(uuid, remoteUserId);\n  if (existingFriendship) {\n    return;\n  }\n  await createDefaultFriendship(uuid, remoteUserId, props, {\n    interacted: 1,\n  });\n};\n","export * from \"./chats\";\nexport * from \"./friendships\";\nexport * from \"./LocalImageManager\";\nexport * from \"./RecoilSync\";\nexport * from \"./users\";\n","import {\n  BACKEND_API_URL,\n  getRandomColor,\n  getRandomColorIndex,\n} from \"@coral-xyz/common\";\n\nimport { bulkAddUsers, getNewUsers } from \"../db/users\";\n\nexport const refreshUsers = async (\n  uuid: string,\n  uniqueUserIds: string[],\n  force?: boolean\n) => {\n  const newUsers = force\n    ? uniqueUserIds\n    : await getNewUsers(uuid, uniqueUserIds);\n  if (newUsers.length) {\n    try {\n      const response = await fetch(`${BACKEND_API_URL}/users/metadata`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          uuids: uniqueUserIds,\n        }),\n      });\n      const json = await response.json();\n      const newUsersMetadata =\n        json.users.map((user) => ({\n          ...user,\n          color: getRandomColor(),\n          colorIndex: getRandomColorIndex(),\n        })) || [];\n      bulkAddUsers(uuid, newUsersMetadata);\n      return newUsersMetadata;\n    } catch (e) {\n      console.log(e);\n    }\n  }\n};\n","import type {\n  CollectionChatData,\n  EnrichedMessage,\n  MessageUpdates,\n} from \"@coral-xyz/common\";\nimport { DELETE_MESSAGE } from \"@coral-xyz/common\";\n\nimport { getDb } from \"./index\";\n\nexport const latestReceivedUpdate = async (\n  uuid: string,\n  roomId: string,\n  type: string\n) => {\n  return getDb(uuid).updates.get(roomId);\n};\n\nexport const resetUpdateTimestamp = async (uuid: string, roomId: string) => {\n  await getDb(uuid).updates.put({\n    last_local_reset_time: new Date().getTime(),\n    last_received_update_id: 0, // doesn't matter since we've updated the time to be the latest\n    room: roomId,\n  });\n};\n\nexport const latestReceivedMessage = async (\n  uuid: string,\n  roomId: string,\n  type: string\n) => {\n  return (\n    await getDb(uuid)\n      .messages.where({ room: roomId, type: type, from_http_server: 1 })\n      .reverse()\n      .sortBy(\"created_at\")\n  )[0];\n};\n\nexport const oldestReceivedMessage = async (\n  uuid: string,\n  roomId: string,\n  type: string\n) => {\n  return (\n    await getDb(uuid)\n      .messages.where({ room: roomId, type: type, from_http_server: 1 })\n      .sortBy(\"created_at\")\n  )[0];\n};\n\nexport const processMessageUpdates = async (\n  uuid: string,\n  updates: MessageUpdates[]\n): Promise<EnrichedMessage[]> => {\n  const result = await Promise.all(\n    updates\n      .filter((x) => x.type === DELETE_MESSAGE)\n      .map((update) => deleteChat(uuid, update.client_generated_uuid))\n  );\n\n  const latestUpdate = updates.sort((a, b) => (a.id > b.id ? -1 : 1))?.[0];\n  if (latestUpdate) {\n    await getDb(uuid).updates.put({\n      last_local_reset_time: new Date().getTime(),\n      last_received_update_id: latestUpdate.id,\n      room: latestUpdate.room,\n    });\n  }\n\n  //@ts-ignore\n  return result.filter((x) => x !== null);\n};\n\nexport const deleteChat = async (\n  uuid: string,\n  clientGeneratedUuid: string\n): Promise<EnrichedMessage | null> => {\n  const db = getDb(uuid);\n  const el = await db.messages.get(clientGeneratedUuid);\n\n  if (el) {\n    await db.messages.update(clientGeneratedUuid, {\n      deleted: true,\n      message: \"\",\n      message_metadata: {},\n    });\n    //@ts-ignore\n    return {\n      ...(await db.messages.get(clientGeneratedUuid)),\n      deleted: true,\n    } as EnrichedMessage;\n  } else {\n    return null;\n  }\n};\n\nexport const bulkAddChats = (uuid: string, chats: EnrichedMessage[]) => {\n  return getDb(uuid).messages.bulkPut(chats);\n};\n\nexport const clearChats = (uuid: string, room: string, type: string) => {\n  return getDb(uuid).messages.where({ room }).delete();\n};\n\nexport const createOrUpdateCollection = async (\n  uuid: string,\n  data: CollectionChatData\n) => {\n  const db = getDb(uuid);\n  if (await db.collections.get(data.collectionId)) {\n    return db.collections.update(data.collectionId, data);\n  } else {\n    return db.collections.put(data);\n  }\n};\n","export {\n  bulkAddChats,\n  clearChats,\n  createOrUpdateCollection,\n  deleteChat,\n  latestReceivedMessage,\n  latestReceivedUpdate,\n  oldestReceivedMessage,\n  processMessageUpdates,\n  resetUpdateTimestamp,\n} from \"./chats\";\nexport * from \"./friends\";\nexport * from \"./images\";\nexport { bulkAddUsers, getBulkUsers } from \"./users\";\n","import { getDb } from \"./index\";\n\nexport const updateFriendship = (\n  uuid: string,\n  remoteUserId,\n  updatedProps: {\n    blocked?: 0 | 1;\n    spam?: 0 | 1;\n    areFriends?: 0 | 1;\n    last_message_sender?: string;\n    last_message_timestamp?: string;\n    last_message?: string;\n    unread?: 0 | 1;\n    interacted?: 0 | 1;\n    remoteInteracted?: 0 | 1;\n  }\n) => {\n  return getDb(uuid).inbox.update(remoteUserId, updatedProps);\n};\n\nexport const createDefaultFriendship = (\n  uuid: string,\n  remoteUserId: string,\n  props: {\n    last_message_sender?: string;\n    last_message_timestamp?: string;\n    last_message?: string;\n    last_message_client_uuid?: string;\n  },\n  dbProps: {\n    interacted?: 0 | 1;\n    remoteInteracted?: 0 | 1;\n  }\n) => {\n  //@ts-ignore (object created partially, full object comes from server on refresh)\n  return getDb(uuid).inbox.put({\n    ...props,\n    remoteUserId,\n    spam: 0,\n    blocked: 0,\n    unread: 0,\n    are_friends: false,\n    areFriends: 0,\n    remoteInteracted: dbProps.remoteInteracted ? 1 : 0,\n    interacted: dbProps.interacted ? 1 : 0,\n  });\n};\n\nexport const getFriendshipByRoom = async (uuid: string, room: number) => {\n  return (await getDb(uuid).inbox.where({ id: room }).limit(1).toArray())[0];\n};\n\nexport const getFriendshipByUserId = async (\n  uuid: string,\n  remoteUserId: string\n) => {\n  return (\n    await getDb(uuid).inbox.where({ remoteUserId }).limit(1).toArray()\n  )[0];\n};\n\nexport const updateFriendshipIfExists = async (\n  uuid: string,\n  remoteUserId: string,\n  updatedProps: {\n    areFriends?: 0 | 1;\n    requested?: 0 | 1;\n    remoteRequested?: 0 | 1;\n  }\n) => {\n  const friendship = await getFriendshipByUserId(uuid, remoteUserId);\n  if (friendship) {\n    await getDb(uuid).inbox.update(remoteUserId, updatedProps);\n    if (\n      updatedProps.areFriends === 0 &&\n      !friendship.remoteInteracted &&\n      !friendship.interacted\n    ) {\n      // If you unfriend someone you haven't ever interacted with,\n      // we remove them from the in memory DB\n      await getDb(uuid).inbox.delete(friendship.remoteUserId);\n    }\n  }\n};\n","export const getIndexDb = () => ({});\n","import { getDb } from \"./index\";\n\nexport const getImage = async (uuid: string, key: string) => {\n  const imageData = await getDb(uuid).localImageData.get(key);\n  return imageData;\n};\n\nexport const putImage = async (\n  uuid: string,\n  key,\n  data: {\n    url: string;\n    timestamp: number;\n    fullImage: boolean;\n  }\n) => {\n  const imageData = await getDb(uuid).localImageData.put({ key, ...data });\n  return imageData;\n};\n\nexport const bulkGetImages = async (uuid: string) => {\n  return getDb(uuid).localImageData.offset(0).keys();\n};\n","import type {\n  CollectionChatData,\n  EnrichedInboxDb,\n  EnrichedMessage,\n  UserMetadata,\n} from \"@coral-xyz/common\";\nimport type {} from \"@coral-xyz/common/src/messages/fromServer\";\nimport type { Table } from \"dexie\";\nimport Dexie from \"dexie\";\n\nimport { getIndexDb } from \"./getIndexDb\";\n\nexport interface Friend {\n  id?: number;\n  name: string;\n  age: number;\n}\n\nexport interface LastReceivedUpdateTable {\n  last_received_update_id: number;\n  last_local_reset_time: number;\n  room: string;\n}\n\nexport interface LocalImageData {\n  key: string;\n  url: string;\n  timestamp: number;\n  fullImage: boolean;\n}\n\nexport class BackpackDb extends Dexie {\n  // 'friends' is added by dexie when declaring the stores()\n  // We just tell the typing system this is the case\n  inbox!: Table<EnrichedInboxDb>;\n  messages!: Table<EnrichedMessage>;\n  users!: Table<UserMetadata>;\n  collections!: Table<CollectionChatData>;\n  updates!: Table<LastReceivedUpdateTable>;\n  localImageData!: Table<LocalImageData>;\n\n  constructor(uuid) {\n    super(`DB_${uuid}`, {\n      ...getIndexDb(),\n    });\n    this.version(15).stores({\n      inbox: \"remoteUserId, id, blocked, interacted, areFriends\",\n      messages: \"client_generated_uuid, room, type, from_http_server\",\n      users: \"uuid\",\n      collections: \"collectionId\",\n      updates: \"room\",\n      localImageData: \"key\",\n    });\n  }\n}\n\nexport const getDb = (uuid: string) => new BackpackDb(uuid);\n","import type { UserMetadata } from \"@coral-xyz/common\";\n\nimport { getDb } from \"./index\";\n\nexport const getNewUsers = async (uuid: string, uuids: string[]) => {\n  const inDbUsers = await getDb(uuid).users.bulkGet(uuids);\n  return uuids.filter((x) => !inDbUsers.map((x) => x?.uuid).includes(x));\n};\n\nexport const bulkAddUsers = (uuid: string, users: UserMetadata[]) => {\n  getDb(uuid).users.bulkPut(users);\n};\n\nexport const getBulkUsers = (uuid: string, uuids: string[]) => {\n  return getDb(uuid).users.bulkGet(uuids);\n};\n","import { useEffect } from \"react\";\nimport type { SubscriptionType } from \"@coral-xyz/common\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\n\nimport { refreshUsers } from \"../api/users\";\nimport { getDb } from \"../db\";\n\nimport { useUsers } from \"./users\";\n\nexport const useUnreadGlobal = (uuid: string | null) => {\n  const count = useLiveQuery(async () => {\n    if (!uuid) return 0;\n    return getDb(uuid)\n      .inbox.where({ unread: 1, blocked: 0, interacted: 1 })\n      .count();\n  }, [uuid]);\n\n  return (count || 0) > 0 ? true : false;\n};\n\nexport const useRequests = (uuid: string) => {\n  const activeChats = useLiveQuery(async () => {\n    return getDb(uuid)\n      .inbox.where({ areFriends: 0, interacted: 0, remoteInteracted: 1 })\n      .toArray();\n  });\n\n  const users = useUsers(uuid, activeChats || []);\n\n  useEffect(() => {\n    const userIds = activeChats?.map((chat) => chat.remoteUserId) || [];\n    const uniqueUserIds = userIds\n      .filter((x, index) => userIds.indexOf(x) === index)\n      .filter((x) => x);\n    refreshUsers(uuid, uniqueUserIds);\n  }, [activeChats]);\n\n  return activeChats?.map((chat) => ({\n    ...chat,\n    remoteUserImage:\n      users?.find((x) => x?.uuid === chat.remoteUserId)?.image || \"\",\n    remoteUsername:\n      users?.find((x) => x?.uuid === chat.remoteUserId)?.username || \"\",\n  }));\n};\n\nexport const useRoomChats = (\n  uuid: string,\n  room: string,\n  type: SubscriptionType\n) => {\n  const reqs = useLiveQuery(async () => {\n    return getDb(uuid).messages.where({ room, type }).sortBy(\"created_at\");\n  }, [room]);\n  return reqs;\n};\n","import type { EnrichedInboxDb } from \"@coral-xyz/common\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\n\nimport { getDb } from \"../db\";\n\nimport { useUsers } from \"./users\";\n\nexport const useContacts = (uuid: string): EnrichedInboxDb[] => {\n  const activeChats = useLiveQuery(async () => {\n    return getDb(uuid).inbox.where({ areFriends: 1 }).toArray();\n  });\n\n  return (\n    activeChats?.map((chat) => ({\n      ...chat,\n    })) || []\n  );\n};\n","export * from \"./chats\";\nexport * from \"./contacts\";\nexport * from \"./users\";\n","import type { UserMetadata } from \"@coral-xyz/common\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\n\nimport { refreshUsers } from \"../api/users\";\nimport { getDb } from \"../db\";\n\nexport const useUsers = (uuid: string, chats: any[]) => {\n  const reqs = useLiveQuery(async () => {\n    const userUuids =\n      chats?.map((chat) => chat.remoteUserId || chat.uuid) || [];\n    chats?.forEach((chat) => {\n      if (chat.parent_message_author_uuid) {\n        userUuids.push(chat.parent_message_author_uuid);\n      }\n    });\n    const uniqueUserUuids = userUuids.filter(\n      (x, index) => userUuids.indexOf(x) === index\n    );\n    return getDb(uuid).users.bulkGet(uniqueUserUuids);\n  }, [chats]);\n\n  return reqs || [];\n};\n\nexport const useDbUser = (\n  uuid: string,\n  remoteUserId: string\n): UserMetadata | undefined => {\n  const reqs = useLiveQuery(async () => {\n    if (!remoteUserId) {\n      return {};\n    }\n    refreshUsers(uuid, [remoteUserId]);\n    return getDb(uuid).users.get(remoteUserId);\n  }, [uuid, remoteUserId]);\n\n  return reqs as UserMetadata | undefined;\n};\n","export * from \"./api\";\nexport * from \"./db/exports\";\nexport * from \"./hooks\";\n","import SvgIcon from \"@mui/material/SvgIcon\";\n\nexport function QuestionIcon({ fill = \"#A1A1AA\", ...props }) {\n  return (\n    <svg\n      width=\"56\"\n      height=\"56\"\n      viewBox=\"0 0 56 56\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M28.335 5C15.4677 5 5 15.4677 5 28.335C5 41.2023 15.4677 51.67 28.335 51.67C41.2023 51.67 51.67 41.2023 51.67 28.335C51.67 15.4677 41.2023 5 28.335 5ZM27.3627 41.9471C25.7526 41.9471 24.4458 40.6403 24.4458 39.0302C24.4458 37.4201 25.7526 36.1133 27.3627 36.1133C28.9728 36.1133 30.2796 37.4201 30.2796 39.0302C30.2796 40.6403 28.9728 41.9471 27.3627 41.9471ZM35.7458 24.6928C35.1449 25.6554 34.0035 26.7366 32.3195 27.9383C29.5951 29.9529 29.669 30.4001 29.669 32.2242H24.8911C24.8911 30.7988 24.86 29.704 25.6301 28.3719C26.1221 27.5183 27.0244 26.6102 28.335 25.6495C29.9082 24.5256 31.4366 23.4424 31.4366 21.5562C31.4366 19.7886 29.9237 19.1585 28.1561 19.1585C26.3535 19.1585 24.298 19.7477 21.9898 20.9261L20.0239 16.9786C24.2183 14.6276 30.8377 13.5639 34.4565 16.51C37.1128 18.6743 37.1284 22.4799 35.7458 24.6928Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function Check() {\n  return (\n    <svg\n      width=\"10\"\n      height=\"8\"\n      viewBox=\"0 0 10 8\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M1.5 4.5L3.5 6.5L8.5 1.5\"\n        stroke=\"white\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n}\n\nexport function WarningIcon({ fill = \"#A1A1AA\", ...props }) {\n  return (\n    <svg\n      width=\"56\"\n      height=\"56\"\n      viewBox=\"0 0 56 56\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M10.43 47.8421H45.57C49.1633 47.8421 51.4033 43.9454 49.6067 40.8421L32.0367 10.4854C30.24 7.3821 25.76 7.3821 23.9633 10.4854L6.39333 40.8421C4.59666 43.9454 6.83666 47.8421 10.43 47.8421ZM28 31.5088C26.7167 31.5088 25.6667 30.4588 25.6667 29.1754V24.5088C25.6667 23.2254 26.7167 22.1754 28 22.1754C29.2833 22.1754 30.3333 23.2254 30.3333 24.5088V29.1754C30.3333 30.4588 29.2833 31.5088 28 31.5088ZM30.3333 40.8421H25.6667V36.1754H30.3333V40.8421Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function WidgetIcon({ fill = \"#FAFAFA\" }) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M16.5001 5.17497L19.3301 8.00497L16.5001 10.835L13.6701 8.00497L16.5001 5.17497ZM8.84009 5.65497V9.65497H4.84009V5.65497H8.84009ZM18.8401 15.655V19.655H14.8401V15.655H18.8401ZM8.84009 15.655V19.655H4.84009V15.655H8.84009ZM16.5001 2.34497L10.8401 7.99497L16.5001 13.655L22.1601 7.99497L16.5001 2.34497ZM10.8401 3.65497H2.84009V11.655H10.8401V3.65497ZM20.8401 13.655H12.8401V21.655H20.8401V13.655ZM10.8401 13.655H2.84009V21.655H10.8401V13.655Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function TwitterIcon({\n  fill = \"#FAFAFA\",\n  style,\n}: {\n  fill?: string;\n  style?: React.CSSProperties;\n}) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      style={style}\n    >\n      <path\n        d=\"M7.548 21.9012C16.6044 21.9012 21.558 14.3976 21.558 7.89117C21.558 7.67757 21.558 7.46517 21.5436 7.25517C22.5074 6.55741 23.3392 5.69351 24 4.70397C23.1013 5.10238 22.1479 5.36369 21.1716 5.47917C22.1996 4.86364 22.9689 3.89559 23.3364 2.75517C22.37 3.32864 21.3128 3.73285 20.2104 3.95037C19.4681 3.16049 18.486 2.63737 17.4164 2.46202C16.3467 2.28666 15.249 2.46885 14.2933 2.98038C13.3377 3.4919 12.5773 4.30422 12.13 5.29157C11.6826 6.27891 11.5732 7.38619 11.8188 8.44197C9.86111 8.34386 7.94592 7.83516 6.19757 6.94889C4.44923 6.06263 2.90679 4.8186 1.6704 3.29757C1.04078 4.38142 0.847907 5.66448 1.13104 6.88553C1.41418 8.10658 2.15204 9.17383 3.1944 9.86997C2.41112 9.84725 1.64478 9.63653 0.96 9.25557V9.31797C0.960467 10.4547 1.35407 11.5563 2.07408 12.436C2.79408 13.3157 3.79616 13.9192 4.9104 14.1444C4.18537 14.342 3.42467 14.3708 2.6868 14.2284C3.00139 15.2069 3.61401 16.0627 4.43895 16.6759C5.26389 17.2891 6.25989 17.6291 7.2876 17.6484C6.26654 18.4507 5.09734 19.0438 3.84687 19.3938C2.5964 19.7439 1.28919 19.844 0 19.6884C2.25193 21.1336 4.87223 21.9001 7.548 21.8964\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function DiscordIcon({\n  fill = \"#FAFAFA\",\n  style,\n}: {\n  fill?: string;\n  style?: React.CSSProperties;\n}) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 71 55\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      style={style}\n    >\n      <g clipPath=\"url(#clip0)\">\n        <path\n          d=\"M60.1045 4.8978C55.5792 2.8214 50.7265 1.2916 45.6527 0.41542C45.5603 0.39851 45.468 0.440769 45.4204 0.525289C44.7963 1.6353 44.105 3.0834 43.6209 4.2216C38.1637 3.4046 32.7345 3.4046 27.3892 4.2216C26.905 3.0581 26.1886 1.6353 25.5617 0.525289C25.5141 0.443589 25.4218 0.40133 25.3294 0.41542C20.2584 1.2888 15.4057 2.8186 10.8776 4.8978C10.8384 4.9147 10.8048 4.9429 10.7825 4.9795C1.57795 18.7309 -0.943561 32.1443 0.293408 45.3914C0.299005 45.4562 0.335386 45.5182 0.385761 45.5576C6.45866 50.0174 12.3413 52.7249 18.1147 54.5195C18.2071 54.5477 18.305 54.5139 18.3638 54.4378C19.7295 52.5728 20.9469 50.6063 21.9907 48.5383C22.0523 48.4172 21.9935 48.2735 21.8676 48.2256C19.9366 47.4931 18.0979 46.6 16.3292 45.5858C16.1893 45.5041 16.1781 45.304 16.3068 45.2082C16.679 44.9293 17.0513 44.6391 17.4067 44.3461C17.471 44.2926 17.5606 44.2813 17.6362 44.3151C29.2558 49.6202 41.8354 49.6202 53.3179 44.3151C53.3935 44.2785 53.4831 44.2898 53.5502 44.3433C53.9057 44.6363 54.2779 44.9293 54.6529 45.2082C54.7816 45.304 54.7732 45.5041 54.6333 45.5858C52.8646 46.6197 51.0259 47.4931 49.0921 48.2228C48.9662 48.2707 48.9102 48.4172 48.9718 48.5383C50.038 50.6034 51.2554 52.5699 52.5959 54.435C52.6519 54.5139 52.7526 54.5477 52.845 54.5195C58.6464 52.7249 64.529 50.0174 70.6019 45.5576C70.6551 45.5182 70.6887 45.459 70.6943 45.3942C72.1747 30.0791 68.2147 16.7757 60.1968 4.9823C60.1772 4.9429 60.1437 4.9147 60.1045 4.8978ZM23.7259 37.3253C20.2276 37.3253 17.3451 34.1136 17.3451 30.1693C17.3451 26.225 20.1717 23.0133 23.7259 23.0133C27.308 23.0133 30.1626 26.2532 30.1066 30.1693C30.1066 34.1136 27.28 37.3253 23.7259 37.3253ZM47.3178 37.3253C43.8196 37.3253 40.9371 34.1136 40.9371 30.1693C40.9371 26.225 43.7636 23.0133 47.3178 23.0133C50.9 23.0133 53.7545 26.2532 53.6986 30.1693C53.6986 34.1136 50.9 37.3253 47.3178 37.3253Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <clipPath id=\"clip0\">\n          <rect width=\"71\" height=\"55\" fill=\"white\" />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n}\n\nexport const ContactsIcon = ({\n  fill = \"#FAFAFA\",\n  style,\n}: {\n  fill?: string;\n  style?: React.CSSProperties;\n}) => {\n  return (\n    <svg\n      style={style}\n      width=\"20\"\n      height=\"22\"\n      viewBox=\"0 0 20 22\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M10 21.6992C9.85005 21.6992 9.70405 21.6742 9.56205 21.6242C9.42072 21.5742 9.30005 21.4992 9.20005 21.3992L6.90005 19.0992H3.07505C2.44172 19.0992 1.90438 18.8786 1.46305 18.4372C1.02105 17.9952 0.800049 17.4576 0.800049 16.8242V2.97422C0.800049 2.34089 1.02105 1.80322 1.46305 1.36122C1.90438 0.919885 2.44172 0.699219 3.07505 0.699219H16.925C17.5584 0.699219 18.0961 0.919885 18.538 1.36122C18.9794 1.80322 19.2001 2.34089 19.2001 2.97422V16.8242C19.2001 17.4576 18.9794 17.9952 18.538 18.4372C18.0961 18.8786 17.5584 19.0992 16.925 19.0992H13.075L10.8 21.3992C10.6834 21.4992 10.5544 21.5742 10.413 21.6242C10.271 21.6742 10.1334 21.6992 10 21.6992ZM10 11.0242C10.9834 11.0242 11.821 10.6782 12.513 9.98622C13.2044 9.29489 13.55 8.45755 13.55 7.47422C13.55 6.49089 13.2044 5.65355 12.513 4.96222C11.821 4.27022 10.9834 3.92422 10 3.92422C9.01672 3.92422 8.17938 4.27022 7.48805 4.96222C6.79605 5.65355 6.45005 6.49089 6.45005 7.47422C6.45005 8.45755 6.79605 9.29489 7.48805 9.98622C8.17938 10.6782 9.01672 11.0242 10 11.0242ZM10 18.6242L12.425 16.8242H16.925V15.5492C16.025 14.6826 14.9917 14.0076 13.825 13.5242C12.6584 13.0409 11.3834 12.7992 10 12.7992C8.61672 12.7992 7.34172 13.0409 6.17505 13.5242C5.00838 14.0076 3.97505 14.6826 3.07505 15.5492V16.8242H7.55005L10 18.6242Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n};\n\nexport function CashIcon() {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M4.7999 4.80005C3.47442 4.80005 2.3999 5.87457 2.3999 7.20005V12C2.3999 13.3255 3.47442 14.4 4.7999 14.4L4.7999 7.20005H16.7999C16.7999 5.87457 15.7254 4.80005 14.3999 4.80005H4.7999Z\"\n        fill=\"#FAFAFA\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M7.1999 12C7.1999 10.6746 8.27442 9.60005 9.5999 9.60005H19.1999C20.5254 9.60005 21.5999 10.6746 21.5999 12V16.8C21.5999 18.1255 20.5254 19.2 19.1999 19.2H9.5999C8.27442 19.2 7.1999 18.1255 7.1999 16.8V12ZM14.3999 16.8C15.7254 16.8 16.7999 15.7255 16.7999 14.4C16.7999 13.0746 15.7254 12 14.3999 12C13.0744 12 11.9999 13.0746 11.9999 14.4C11.9999 15.7255 13.0744 16.8 14.3999 16.8Z\"\n        fill=\"#FAFAFA\"\n      />\n    </svg>\n  );\n}\n\nexport function SuccessIcon() {\n  return (\n    <svg\n      width=\"56\"\n      height=\"56\"\n      viewBox=\"0 0 56 56\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M28.0001 4.66675C15.1201 4.66675 4.66675 15.1201 4.66675 28.0001C4.66675 40.8801 15.1201 51.3334 28.0001 51.3334C40.8801 51.3334 51.3334 40.8801 51.3334 28.0001C51.3334 15.1201 40.8801 4.66675 28.0001 4.66675ZM21.6767 38.0101L13.3001 29.6334C12.3901 28.7234 12.3901 27.2534 13.3001 26.3434C14.2101 25.4334 15.6801 25.4334 16.5901 26.3434L23.3334 33.0634L39.3867 17.0101C40.2967 16.1001 41.7668 16.1001 42.6768 17.0101C43.5868 17.9201 43.5868 19.3901 42.6768 20.3001L24.9667 38.0101C24.0801 38.9201 22.5867 38.9201 21.6767 38.0101Z\"\n        fill=\"#A1A1AA\"\n      />\n    </svg>\n  );\n}\n\nexport function CheckIcon({\n  fill = \"#35A63A\",\n  style,\n}: {\n  fill?: string;\n  style?: React.CSSProperties;\n}) {\n  return (\n    <svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" style={style}>\n      <rect width=\"48\" height=\"48\" rx=\"24\" fill={fill} />\n      <path\n        d=\"M20 29.5598L14.44 23.9998L12.5466 25.8798L20 33.3331L36 17.3331L34.12 15.4531L20 29.5598Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n}\n\nexport function CrossIcon() {\n  return (\n    <svg\n      width=\"48\"\n      height=\"48\"\n      viewBox=\"0 0 48 48\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <rect width=\"48\" height=\"48\" rx=\"24\" fill=\"#E95050\" />\n      <path\n        d=\"M33.3334 16.547L31.4534 14.667L24.0001 22.1203L16.5467 14.667L14.6667 16.547L22.1201 24.0003L14.6667 31.4537L16.5467 33.3337L24.0001 25.8803L31.4534 33.3337L33.3334 31.4537L25.8801 24.0003L33.3334 16.547Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n}\n\nexport function MnemonicIcon({\n  fill = \"#A1A1AA\",\n  style,\n}: {\n  fill?: string;\n  style: React.CSSProperties;\n}) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      style={style}\n    >\n      <path\n        d=\"M3 19.0251C2.45 19.0251 1.97933 18.8294 1.588 18.4381C1.196 18.0461 1 17.5751 1 17.0251V15.0251C1 14.7418 1.096 14.5041 1.288 14.3121C1.47933 14.1208 1.71667 14.0251 2 14.0251C2.28333 14.0251 2.521 14.1208 2.713 14.3121C2.90433 14.5041 3 14.7418 3 15.0251V17.0251H21V15.0251C21 14.7418 21.096 14.5041 21.288 14.3121C21.4793 14.1208 21.7167 14.0251 22 14.0251C22.2833 14.0251 22.5207 14.1208 22.712 14.3121C22.904 14.5041 23 14.7418 23 15.0251V17.0251C23 17.5751 22.8043 18.0461 22.413 18.4381C22.021 18.8294 21.55 19.0251 21 19.0251H3ZM7.35 15.2251C6.53333 15.2251 5.89167 15.0124 5.425 14.5871C4.95833 14.1624 4.725 13.5834 4.725 12.8501C4.725 12.1501 4.996 11.5791 5.538 11.1371C6.07933 10.6958 6.775 10.4751 7.625 10.4751C8.00833 10.4751 8.36267 10.5041 8.688 10.5621C9.01267 10.6208 9.29167 10.7168 9.525 10.8501V10.5001C9.525 10.0501 9.37067 9.69176 9.062 9.4251C8.754 9.15843 8.33333 9.0251 7.8 9.0251C7.55 9.0251 7.31267 9.06243 7.088 9.1371C6.86267 9.21243 6.65833 9.31676 6.475 9.4501C6.325 9.56676 6.16267 9.63343 5.988 9.6501C5.81267 9.66676 5.65 9.61676 5.5 9.5001C5.35 9.38343 5.25833 9.23743 5.225 9.0621C5.19167 8.88743 5.24167 8.73343 5.375 8.6001C5.675 8.31676 6.02933 8.1001 6.438 7.9501C6.846 7.8001 7.30833 7.7251 7.825 7.7251C8.85833 7.7251 9.65 7.97076 10.2 8.4621C10.75 8.9541 11.025 9.66676 11.025 10.6001V14.2751C11.025 14.4751 10.954 14.6458 10.812 14.7871C10.6707 14.9291 10.5 15.0001 10.3 15.0001C10.0833 15.0001 9.90433 14.9291 9.763 14.7871C9.621 14.6458 9.55 14.4668 9.55 14.2501V14.1501H9.475C9.25833 14.4834 8.96667 14.7461 8.6 14.9381C8.23333 15.1294 7.81667 15.2251 7.35 15.2251ZM7.9 11.6501C7.36667 11.6501 6.95833 11.7541 6.675 11.9621C6.39167 12.1708 6.25 12.4668 6.25 12.8501C6.25 13.1834 6.375 13.4541 6.625 13.6621C6.875 13.8708 7.2 13.9751 7.6 13.9751C8.13333 13.9751 8.58767 13.7874 8.963 13.4121C9.33767 13.0374 9.525 12.5834 9.525 12.0501C9.29167 11.9168 9.025 11.8168 8.725 11.7501C8.425 11.6834 8.15 11.6501 7.9 11.6501ZM16.325 15.2251C15.6417 15.2251 15.121 15.0751 14.763 14.7751C14.4043 14.4751 14.175 14.2418 14.075 14.0751H14V14.4001C14 14.6001 13.9293 14.7708 13.788 14.9121C13.646 15.0541 13.475 15.1251 13.275 15.1251C13.075 15.1251 12.9 15.0501 12.75 14.9001C12.6 14.7501 12.525 14.5751 12.525 14.3751V5.7501C12.525 5.53343 12.6 5.3501 12.75 5.2001C12.9 5.0501 13.0833 4.9751 13.3 4.9751C13.5167 4.9751 13.7 5.0501 13.85 5.2001C14 5.3501 14.075 5.53343 14.075 5.7501V7.8001L14 8.8001H14.075C14.125 8.71676 14.325 8.5041 14.675 8.1621C15.025 7.82076 15.575 7.6501 16.325 7.6501C17.3917 7.6501 18.2333 8.03343 18.85 8.8001C19.4667 9.56676 19.775 10.4501 19.775 11.4501C19.775 12.4501 19.471 13.3291 18.863 14.0871C18.2543 14.8458 17.4083 15.2251 16.325 15.2251ZM16.1 9.0501C15.4333 9.0501 14.9167 9.29576 14.55 9.7871C14.1833 10.2791 14 10.8251 14 11.4251C14 12.0418 14.1833 12.5918 14.55 13.0751C14.9167 13.5584 15.4333 13.8001 16.1 13.8001C16.7667 13.8001 17.2877 13.5584 17.663 13.0751C18.0377 12.5918 18.225 12.0418 18.225 11.4251C18.225 10.8084 18.0377 10.2584 17.663 9.7751C17.2877 9.29176 16.7667 9.0501 16.1 9.0501Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function BackpackMnemonicIcon({\n  fill = \"#A1A1AA\",\n  style,\n}: {\n  fill?: string;\n  style: React.CSSProperties;\n}) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      style={style}\n    >\n      <path\n        d=\"M3 19.0251C2.45 19.0251 1.97933 18.8294 1.588 18.4381C1.196 18.0461 1 17.5751 1 17.0251V15.0251C1 14.7418 1.096 14.5041 1.288 14.3121C1.47933 14.1208 1.71667 14.0251 2 14.0251C2.28333 14.0251 2.521 14.1208 2.713 14.3121C2.90433 14.5041 3 14.7418 3 15.0251V17.0251H21V15.0251C21 14.7418 21.096 14.5041 21.288 14.3121C21.4793 14.1208 21.7167 14.0251 22 14.0251C22.2833 14.0251 22.5207 14.1208 22.712 14.3121C22.904 14.5041 23 14.7418 23 15.0251V17.0251C23 17.5751 22.8043 18.0461 22.413 18.4381C22.021 18.8294 21.55 19.0251 21 19.0251H3Z\"\n        fill={fill}\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M16.9674 7.58057C16.2841 7.58057 15.7634 7.73057 15.4054 8.03057C15.0467 8.33057 14.8174 8.5639 14.7174 8.73057H14.6424V8.40557C14.6424 8.20557 14.5717 8.0349 14.4304 7.89357C14.2884 7.75157 14.1174 7.68057 13.9174 7.68057C13.7174 7.68057 13.5424 7.75557 13.3924 7.90557C13.2424 8.05557 13.1674 8.23057 13.1674 8.43057V17.0556C13.1674 17.2722 13.2424 17.4556 13.3924 17.6056C13.5424 17.7556 13.7257 17.8306 13.9424 17.8306C14.1591 17.8306 14.3424 17.7556 14.4924 17.6056C14.6424 17.4556 14.7174 17.2722 14.7174 17.0556V15.0056L14.6424 14.0056H14.7174C14.7674 14.0889 14.9674 14.3016 15.3174 14.6436C15.6674 14.9849 16.2174 15.1556 16.9674 15.1556C18.0341 15.1556 18.8757 14.7722 19.4924 14.0056C20.1091 13.2389 20.4174 12.3556 20.4174 11.3556C20.4174 10.3556 20.1134 9.47657 19.5054 8.71857C18.8967 7.9599 18.0507 7.58057 16.9674 7.58057ZM16.7425 13.7554C16.0758 13.7554 15.5592 13.5097 15.1925 13.0184C14.8258 12.5264 14.6425 11.9804 14.6425 11.3804C14.6425 10.7637 14.8258 10.2137 15.1925 9.73037C15.5592 9.24704 16.0758 9.00537 16.7425 9.00537C17.4092 9.00537 17.9302 9.24704 18.3055 9.73037C18.6802 10.2137 18.8675 10.7637 18.8675 11.3804C18.8675 11.997 18.6802 12.547 18.3055 13.0304C17.9302 13.5137 17.4092 13.7554 16.7425 13.7554Z\"\n        fill={fill}\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M8.55 15.2251C7.86667 15.2251 7.346 15.0751 6.988 14.7751C6.62933 14.4751 6.4 14.2418 6.3 14.0751H6.225V14.4001C6.225 14.6001 6.15433 14.7708 6.013 14.9121C5.871 15.0541 5.7 15.1251 5.5 15.1251C5.3 15.1251 5.125 15.0501 4.975 14.9001C4.825 14.7501 4.75 14.5751 4.75 14.3751V5.7501C4.75 5.53343 4.825 5.3501 4.975 5.2001C5.125 5.0501 5.30833 4.9751 5.525 4.9751C5.74167 4.9751 5.925 5.0501 6.075 5.2001C6.225 5.3501 6.3 5.53343 6.3 5.7501V7.8001L6.225 8.8001H6.3C6.35 8.71677 6.55 8.5041 6.9 8.1621C7.25 7.82076 7.8 7.6501 8.55 7.6501C9.61667 7.6501 10.4583 8.03343 11.075 8.8001C11.6917 9.56676 12 10.4501 12 11.4501C12 12.4501 11.696 13.3291 11.088 14.0871C10.4793 14.8458 9.63333 15.2251 8.55 15.2251ZM8.3251 9.05029C7.65843 9.05029 7.14176 9.29596 6.7751 9.78729C6.40843 10.2793 6.2251 10.8253 6.2251 11.4253C6.2251 12.042 6.40843 12.592 6.7751 13.0753C7.14176 13.5586 7.65843 13.8003 8.3251 13.8003C8.99177 13.8003 9.51276 13.5586 9.8881 13.0753C10.2628 12.592 10.4501 12.042 10.4501 11.4253C10.4501 10.8086 10.2628 10.2586 9.8881 9.77529C9.51276 9.29196 8.99177 9.05029 8.3251 9.05029Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\nexport function ImportedIcon({\n  fill = \"#A1A1AA\",\n  style,\n}: {\n  fill?: string;\n  style?: React.CSSProperties;\n}) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      style={style}\n    >\n      <path\n        d=\"M12 16C11.7167 16 11.4793 15.904 11.288 15.712C11.096 15.5207 11 15.2834 11 15V7.85005L9.125 9.72505C8.925 9.92505 8.69167 10.025 8.425 10.025C8.15833 10.025 7.91667 9.91672 7.7 9.70005C7.5 9.50005 7.40433 9.26238 7.413 8.98705C7.421 8.71238 7.51667 8.48338 7.7 8.30005L11.3 4.70005C11.4 4.60005 11.5083 4.52905 11.625 4.48705C11.7417 4.44572 11.8667 4.42505 12 4.42505C12.1333 4.42505 12.2583 4.44572 12.375 4.48705C12.4917 4.52905 12.6 4.60005 12.7 4.70005L16.3 8.30005C16.5 8.50005 16.5957 8.73738 16.587 9.01205C16.579 9.28738 16.4833 9.51672 16.3 9.70005C16.1 9.90005 15.8627 10.004 15.588 10.012C15.3127 10.0207 15.075 9.92505 14.875 9.72505L13 7.85005V15C13 15.2834 12.9043 15.5207 12.713 15.712C12.521 15.904 12.2833 16 12 16ZM6 20C5.45 20 4.97933 19.8044 4.588 19.413C4.196 19.021 4 18.55 4 18V16C4 15.7167 4.09567 15.479 4.287 15.287C4.479 15.0957 4.71667 15 5 15C5.28333 15 5.521 15.0957 5.713 15.287C5.90433 15.479 6 15.7167 6 16V18H18V16C18 15.7167 18.096 15.479 18.288 15.287C18.4793 15.0957 18.7167 15 19 15C19.2833 15 19.5207 15.0957 19.712 15.287C19.904 15.479 20 15.7167 20 16V18C20 18.55 19.8043 19.021 19.413 19.413C19.021 19.8044 18.55 20 18 20H6Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\n// Larger hardware wallet icon\nexport function HardwareWalletIcon({ fill = \"#A1A1AA\", ...props }) {\n  return (\n    <svg\n      width=\"56\"\n      height=\"56\"\n      viewBox=\"0 0 56 56\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M42 9.33325H14C8.84332 9.33325 4.66666 13.5099 4.66666 18.6666V37.3333C4.66666 42.4899 8.84332 46.6666 14 46.6666H42C47.1567 46.6666 51.3333 42.4899 51.3333 37.3333V18.6666C51.3333 13.5099 47.1567 9.33325 42 9.33325ZM37.66 32.1299C37.1 32.5966 36.33 32.7833 35.6067 32.5966L9.68332 26.2499C10.3833 24.5466 12.04 23.3333 14 23.3333H42C43.5633 23.3333 44.94 24.1266 45.8033 25.2933L37.66 32.1299ZM14 13.9999H42C44.5667 13.9999 46.6667 16.0999 46.6667 18.6666V19.9499C45.29 19.1566 43.7033 18.6666 42 18.6666H14C12.2967 18.6666 10.71 19.1566 9.33332 19.9499V18.6666C9.33332 16.0999 11.4333 13.9999 14 13.9999Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function HardwareIcon({\n  fill = \"#A1A1AA\",\n  style,\n}: {\n  fill?: string;\n  style?: React.CSSProperties;\n}) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      style={style}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M3 7.5H21C21.2833 7.5 21.5207 7.59567 21.712 7.787C21.904 7.979 22 8.21667 22 8.5V15.5C22 15.7833 21.904 16.0207 21.712 16.212C21.5207 16.404 21.2833 16.5 21 16.5H3C2.71667 16.5 2.47933 16.404 2.288 16.212C2.096 16.0207 2 15.7833 2 15.5V8.5C2 8.21667 2.096 7.979 2.288 7.787C2.47933 7.59567 2.71667 7.5 3 7.5ZM17.5176 14C18.6221 14 19.5176 13.1046 19.5176 12C19.5176 10.8954 18.6221 10 17.5176 10C16.413 10 15.5176 10.8954 15.5176 12C15.5176 13.1046 16.413 14 17.5176 14Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function PlusCircleIcon({\n  fill = \"#A1A1AA\",\n  style,\n}: {\n  fill?: string;\n  style?: React.CSSProperties;\n}) {\n  return (\n    <svg\n      width=\"25\"\n      height=\"24\"\n      viewBox=\"0 0 25 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      style={style}\n    >\n      <path\n        d=\"M12.7964 17C13.0797 17 13.3174 16.904 13.5094 16.712C13.7007 16.5207 13.7964 16.2833 13.7964 16V13H16.8214C17.1047 13 17.3381 12.904 17.5214 12.712C17.7047 12.5207 17.7964 12.2833 17.7964 12C17.7964 11.7167 17.7004 11.479 17.5084 11.287C17.3171 11.0957 17.0797 11 16.7964 11H13.7964V7.975C13.7964 7.69167 13.7007 7.45833 13.5094 7.275C13.3174 7.09167 13.0797 7 12.7964 7C12.5131 7 12.2757 7.09567 12.0844 7.287C11.8924 7.479 11.7964 7.71667 11.7964 8V11H8.77139C8.48805 11 8.25472 11.0957 8.07139 11.287C7.88805 11.479 7.79639 11.7167 7.79639 12C7.79639 12.2833 7.89205 12.5207 8.08339 12.712C8.27539 12.904 8.51305 13 8.79639 13H11.7964V16.025C11.7964 16.3083 11.8924 16.5417 12.0844 16.725C12.2757 16.9083 12.5131 17 12.7964 17ZM12.7964 22C11.4131 22 10.1131 21.7373 8.89639 21.212C7.67972 20.6873 6.62139 19.975 5.72139 19.075C4.82139 18.175 4.10905 17.1167 3.58439 15.9C3.05905 14.6833 2.79639 13.3833 2.79639 12C2.79639 10.6167 3.05905 9.31667 3.58439 8.1C4.10905 6.88333 4.82139 5.825 5.72139 4.925C6.62139 4.025 7.67972 3.31233 8.89639 2.787C10.1131 2.26233 11.4131 2 12.7964 2C14.1797 2 15.4797 2.26233 16.6964 2.787C17.9131 3.31233 18.9714 4.025 19.8714 4.925C20.7714 5.825 21.4837 6.88333 22.0084 8.1C22.5337 9.31667 22.7964 10.6167 22.7964 12C22.7964 13.3833 22.5337 14.6833 22.0084 15.9C21.4837 17.1167 20.7714 18.175 19.8714 19.075C18.9714 19.975 17.9131 20.6873 16.6964 21.212C15.4797 21.7373 14.1797 22 12.7964 22Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function SecretKeyIcon({\n  fill = \"#A1A1AA\",\n  style,\n}: {\n  fill?: string;\n  style?: React.CSSProperties;\n}) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      style={style}\n    >\n      <path\n        d=\"M7 18C5.33333 18 3.91667 17.4167 2.75 16.25C1.58333 15.0833 1 13.6667 1 12C1 10.3333 1.58333 8.91667 2.75 7.75C3.91667 6.58333 5.33333 6 7 6C8.35 6 9.52933 6.379 10.538 7.137C11.546 7.89567 12.25 8.85 12.65 10H21C21.55 10 22.021 10.1957 22.413 10.587C22.8043 10.979 23 11.45 23 12C23 12.6 22.7917 13.0833 22.375 13.45C21.9583 13.8167 21.5 14 21 14V16C21 16.55 20.8043 17.021 20.413 17.413C20.021 17.8043 19.55 18 19 18C18.45 18 17.979 17.8043 17.587 17.413C17.1957 17.021 17 16.55 17 16V14H12.65C12.25 15.15 11.546 16.1043 10.538 16.863C9.52933 17.621 8.35 18 7 18ZM7 14C7.55 14 8.02067 13.804 8.412 13.412C8.804 13.0207 9 12.55 9 12C9 11.45 8.804 10.979 8.412 10.587C8.02067 10.1957 7.55 10 7 10C6.45 10 5.97933 10.1957 5.588 10.587C5.196 10.979 5 11.45 5 12C5 12.55 5.196 13.0207 5.588 13.412C5.97933 13.804 6.45 14 7 14Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function SolanaIcon() {\n  return (\n    <svg\n      width=\"56\"\n      height=\"56\"\n      viewBox=\"0 0 56 56\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M28 56C43.464 56 56 43.464 56 28C56 12.536 43.464 0 28 0C12.536 0 0 12.536 0 28C0 43.464 12.536 56 28 56Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M55.5 28C55.5 43.1878 43.1878 55.5 28 55.5C12.8122 55.5 0.5 43.1878 0.5 28C0.5 12.8122 12.8122 0.5 28 0.5C43.1878 0.5 55.5 12.8122 55.5 28Z\"\n        stroke=\"white\"\n        strokeOpacity=\"0.15\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M17.2789 35.7183C17.3843 35.6023 17.5127 35.5098 17.6559 35.4464C17.799 35.3829 17.954 35.3502 18.1105 35.35L43.7697 35.371C43.8791 35.3713 43.9859 35.4032 44.0773 35.463C44.1689 35.5228 44.241 35.6079 44.2849 35.7079C44.329 35.8078 44.343 35.9186 44.3254 36.0264C44.3077 36.1342 44.2592 36.2346 44.1855 36.3153L38.7213 42.3318C38.6159 42.4478 38.4874 42.5404 38.3442 42.6039C38.2008 42.6673 38.0458 42.7 37.889 42.7L12.2305 42.6791C12.1213 42.6788 12.0144 42.6468 11.9229 42.5871C11.8315 42.5273 11.7594 42.4422 11.7153 42.3422C11.6713 42.2422 11.6572 42.1315 11.6749 42.0237C11.6925 41.9159 11.7411 41.8155 11.8147 41.7348L17.2789 35.7183ZM44.1855 30.7097C44.2592 30.7905 44.3077 30.8909 44.3254 30.9987C44.343 31.1065 44.329 31.2172 44.2849 31.3172C44.241 31.4172 44.1689 31.5023 44.0773 31.5621C43.9859 31.6218 43.8791 31.6538 43.7697 31.654L18.1112 31.675C17.9546 31.675 17.7996 31.6423 17.6562 31.5789C17.5128 31.5154 17.3843 31.4228 17.2789 31.3068L11.8147 25.2868C11.7411 25.2061 11.6925 25.1057 11.6749 24.9979C11.6572 24.8901 11.6713 24.7793 11.7153 24.6794C11.7594 24.5794 11.8315 24.4943 11.9229 24.4345C12.0144 24.3747 12.1213 24.3428 12.2305 24.3425L37.8897 24.3215C38.0464 24.3217 38.2012 24.3544 38.3444 24.4179C38.4877 24.4813 38.616 24.5738 38.7213 24.6897L44.1855 30.7097ZM17.2789 13.6682C17.3843 13.5524 17.5127 13.4598 17.6559 13.3964C17.799 13.333 17.954 13.3001 18.1105 13.3L43.7697 13.321C43.8791 13.3213 43.9859 13.3532 44.0773 13.413C44.1689 13.4728 44.241 13.5579 44.2849 13.6579C44.329 13.7579 44.343 13.8685 44.3254 13.9764C44.3077 14.0842 44.2592 14.1846 44.1855 14.2653L38.7213 20.2818C38.6159 20.3978 38.4874 20.4904 38.3442 20.5539C38.2008 20.6173 38.0458 20.65 37.889 20.65L12.2305 20.629C12.1213 20.6288 12.0144 20.5968 11.9229 20.5371C11.8315 20.4773 11.7594 20.3922 11.7153 20.2922C11.6713 20.1922 11.6572 20.0815 11.6749 19.9737C11.6925 19.8659 11.7411 19.7655 11.8147 19.6847L17.2789 13.6682Z\"\n        fill=\"url(#paint0_linear_5897_33336)\"\n      />\n      <defs>\n        <linearGradient\n          id=\"paint0_linear_5897_33336\"\n          x1=\"12.6589\"\n          y1=\"43.3412\"\n          x2=\"43.3413\"\n          y2=\"12.6588\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          <stop stopColor=\"#9945FF\" />\n          <stop offset=\"0.2\" stopColor=\"#7962E7\" />\n          <stop offset=\"1\" stopColor=\"#00D18C\" />\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n}\n\nexport function EthereumIcon() {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" id=\"body_1\" width=\"56\" height=\"56\">\n      <g transform=\"matrix(1.6470588 0 0 1.6470588 0 0)\">\n        <path\n          d=\"M17 34C 26.3888 34 34 26.3888 34 17C 34 7.61116 26.3888 0 17 0C 7.61116 0 0 7.61116 0 17C 0 26.3888 7.61116 34 17 34z\"\n          stroke=\"none\"\n          fill=\"#627EEA\"\n          fillRule=\"nonzero\"\n        />\n        <path\n          d=\"M17.5293 4.25L17.5293 13.6744L25.4949 17.2337L17.5293 4.25z\"\n          stroke=\"none\"\n          fill=\"#FFFFFF\"\n          fillRule=\"nonzero\"\n          fillOpacity=\"0.6\"\n        />\n        <path\n          d=\"M17.5291 4.25L9.5625 17.2337L17.5291 13.6744L17.5291 4.25z\"\n          stroke=\"none\"\n          fill=\"#FFFFFF\"\n          fillRule=\"nonzero\"\n        />\n        <path\n          d=\"M17.5293 23.3408L17.5293 29.7445L25.5002 18.7168L17.5293 23.3408z\"\n          stroke=\"none\"\n          fill=\"#FFFFFF\"\n          fillRule=\"nonzero\"\n          fillOpacity=\"0.6\"\n        />\n        <path\n          d=\"M17.5291 29.7445L17.5291 23.3397L9.5625 18.7168L17.5291 29.7445z\"\n          stroke=\"none\"\n          fill=\"#FFFFFF\"\n          fillRule=\"nonzero\"\n        />\n        <path\n          d=\"M17.5293 21.8581L25.4949 17.233L17.5293 13.6758L17.5293 21.8581z\"\n          stroke=\"none\"\n          fill=\"#FFFFFF\"\n          fillRule=\"nonzero\"\n          fillOpacity=\"0.2\"\n        />\n        <path\n          d=\"M9.5625 17.233L17.5291 21.8581L17.5291 13.6758L9.5625 17.233z\"\n          stroke=\"none\"\n          fill=\"#FFFFFF\"\n          fillRule=\"nonzero\"\n          fillOpacity=\"0.6\"\n        />\n      </g>\n    </svg>\n  );\n}\n\nexport function SadFaceIcon() {\n  return (\n    <svg\n      width=\"56\"\n      height=\"56\"\n      viewBox=\"0 0 56 56\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M36.1666 25.6667C38.0996 25.6667 39.6666 24.0997 39.6666 22.1667C39.6666 20.2338 38.0996 18.6667 36.1666 18.6667C34.2336 18.6667 32.6666 20.2338 32.6666 22.1667C32.6666 24.0997 34.2336 25.6667 36.1666 25.6667Z\"\n        fill=\"#A1A1AA\"\n      />\n      <path\n        d=\"M19.8333 25.6667C21.7663 25.6667 23.3333 24.0997 23.3333 22.1667C23.3333 20.2338 21.7663 18.6667 19.8333 18.6667C17.9003 18.6667 16.3333 20.2338 16.3333 22.1667C16.3333 24.0997 17.9003 25.6667 19.8333 25.6667Z\"\n        fill=\"#A1A1AA\"\n      />\n      <path\n        d=\"M27.9766 4.66675C15.0966 4.66675 4.66663 15.1201 4.66663 28.0001C4.66663 40.8801 15.0966 51.3334 27.9766 51.3334C40.88 51.3334 51.3333 40.8801 51.3333 28.0001C51.3333 15.1201 40.88 4.66675 27.9766 4.66675ZM28 46.6667C17.6866 46.6667 9.33329 38.3134 9.33329 28.0001C9.33329 17.6867 17.6866 9.33341 28 9.33341C38.3133 9.33341 46.6666 17.6867 46.6666 28.0001C46.6666 38.3134 38.3133 46.6667 28 46.6667ZM28 32.6667C23.5666 32.6667 19.53 34.9301 17.15 38.6867C16.6366 39.5034 16.8933 40.5767 17.71 41.0901C18.5266 41.6034 19.6 41.3467 20.1133 40.5301C21.84 37.7767 24.78 36.1434 28 36.1434C31.22 36.1434 34.16 37.7767 35.8866 40.5301C36.2133 41.0667 36.7966 41.3467 37.38 41.3467C37.7066 41.3467 38.01 41.2534 38.3133 41.0901C39.13 40.5767 39.3866 39.5034 38.8733 38.6867C36.47 34.9067 32.4333 32.6667 28 32.6667Z\"\n        fill=\"#A1A1AA\"\n      />\n    </svg>\n  );\n}\n\nexport function EyeIcon() {\n  return (\n    <svg\n      width=\"40\"\n      height=\"40\"\n      viewBox=\"0 0 40 40\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M20.0003 10.7834C24.6003 10.7834 28.3337 14.5167 28.3337 19.1167C28.3337 19.9667 28.167 20.7834 27.9337 21.5501L33.0337 26.6501C35.3503 24.6001 37.1837 22.0334 38.3337 19.1001C35.4503 11.8001 28.3337 6.61675 20.0003 6.61675C17.8837 6.61675 15.8503 6.95008 13.9337 7.56675L17.5503 11.1834C18.3337 10.9501 19.1503 10.7834 20.0003 10.7834ZM4.51699 5.21675C3.86699 5.86675 3.86699 6.91675 4.51699 7.56675L7.80032 10.8501C5.10032 13.0001 2.95033 15.8334 1.66699 19.1167C4.55033 26.4334 11.667 31.6167 20.0003 31.6167C22.5337 31.6167 24.9503 31.1167 27.1837 30.2501L31.717 34.7834C32.367 35.4334 33.417 35.4334 34.067 34.7834C34.717 34.1334 34.717 33.0834 34.067 32.4334L6.88366 5.21675C6.23366 4.56675 5.16699 4.56675 4.51699 5.21675ZM20.0003 27.4501C15.4003 27.4501 11.667 23.7167 11.667 19.1167C11.667 17.8334 11.967 16.6167 12.4837 15.5501L15.1003 18.1667C15.0503 18.4667 15.0003 18.7834 15.0003 19.1167C15.0003 21.8834 17.2337 24.1167 20.0003 24.1167C20.3337 24.1167 20.6337 24.0667 20.9503 24.0001L23.567 26.6167C22.4837 27.1501 21.2837 27.4501 20.0003 27.4501ZM24.9503 18.5667C24.7003 16.2334 22.867 14.4167 20.5503 14.1667L24.9503 18.5667Z\"\n        fill=\"#A1A1AA\"\n      />\n    </svg>\n  );\n}\n\nexport function BalancesIcon({ fill = \"#99A4B4\", ...props }) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      {...props}\n    >\n      <path d=\"M15.7664 5L18.7664 0H5.23438L8.23438 5H15.7664Z\" fill={fill} />\n      <path\n        d=\"M16.416 7H7.583C5.416 9.305 2 13.492 2 17C2 19.1 2.975 24 12 24C21.025 24 22 19.1 22 17C22 13.492 18.582 9.305 16.416 7Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function GridIcon({ fill = \"#99A4B4\", ...props }) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      {...props}\n    >\n      <path\n        d=\"M9 1H3C1.89543 1 1 1.89543 1 3V9C1 10.1046 1.89543 11 3 11H9C10.1046 11 11 10.1046 11 9V3C11 1.89543 10.1046 1 9 1Z\"\n        fill={fill}\n      />\n      <path\n        d=\"M23.4285 4.61798L19.3815 0.571977C19.0147 0.206683 18.5182 0.00158691 18.0005 0.00158691C17.4829 0.00158691 16.9863 0.206683 16.6195 0.571977L12.5725 4.61798C12.2071 4.9851 12.002 5.48199 12.002 5.99998C12.002 6.51796 12.2071 7.01486 12.5725 7.38198L16.6195 11.429C16.9863 11.7943 17.4829 11.9994 18.0005 11.9994C18.5182 11.9994 19.0147 11.7943 19.3815 11.429L23.4285 7.38298C23.7942 7.01582 23.9996 6.5187 23.9996 6.00048C23.9996 5.48225 23.7942 4.98514 23.4285 4.61798Z\"\n        fill={fill}\n      />\n      <path\n        d=\"M21 13H15C13.8954 13 13 13.8954 13 15V21C13 22.1046 13.8954 23 15 23H21C22.1046 23 23 22.1046 23 21V15C23 13.8954 22.1046 13 21 13Z\"\n        fill={fill}\n      />\n      <path\n        d=\"M9 13H3C1.89543 13 1 13.8954 1 15V21C1 22.1046 1.89543 23 3 23H9C10.1046 23 11 22.1046 11 21V15C11 13.8954 10.1046 13 9 13Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function AppsColorIcon({ fill = undefined, ...props }) {\n  return (\n    <svg\n      width=\"23\"\n      height=\"23\"\n      viewBox=\"0 0 23 23\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M8 1H2C0.895431 1 0 1.89543 0 3V9C0 10.1046 0.895431 11 2 11H8C9.10457 11 10 10.1046 10 9V3C10 1.89543 9.10457 1 8 1Z\"\n        fill={fill ?? \"#C061F7\"}\n      />\n      <path\n        d=\"M22.428 4.61639L18.381 0.57039C18.0142 0.205096 17.5177 0 17 0C16.4823 0 15.9858 0.205096 15.619 0.57039L11.572 4.61639C11.2066 4.98351 11.0014 5.48041 11.0014 5.99839C11.0014 6.51637 11.2066 7.01327 11.572 7.38039L15.619 11.4274C15.9858 11.7927 16.4823 11.9978 17 11.9978C17.5177 11.9978 18.0142 11.7927 18.381 11.4274L22.428 7.38139C22.7937 7.01423 22.9991 6.51712 22.9991 5.99889C22.9991 5.48066 22.7937 4.98355 22.428 4.61639V4.61639Z\"\n        fill={fill ?? \"#28DBD1\"}\n      />\n      <path\n        d=\"M20 13H14C12.8954 13 12 13.8954 12 15V21C12 22.1046 12.8954 23 14 23H20C21.1046 23 22 22.1046 22 21V15C22 13.8954 21.1046 13 20 13Z\"\n        fill={fill ?? \"#6360FF\"}\n      />\n      <path\n        d=\"M8 13H2C0.895431 13 0 13.8954 0 15V21C0 22.1046 0.895431 23 2 23H8C9.10457 23 10 22.1046 10 21V15C10 13.8954 9.10457 13 8 13Z\"\n        fill={fill ?? \"#FE6F5C\"}\n      />\n    </svg>\n  );\n}\n\nexport function ImageIcon({ fill = \"#99A4B4\", ...props }) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      {...props}\n    >\n      <path\n        d=\"M20 1H4C3.20435 1 2.44129 1.31607 1.87868 1.87868C1.31607 2.44129 1 3.20435 1 4V20C1 20.7956 1.31607 21.5587 1.87868 22.1213C2.44129 22.6839 3.20435 23 4 23H20C20.7956 23 21.5587 22.6839 22.1213 22.1213C22.6839 21.5587 23 20.7956 23 20V4C23 3.20435 22.6839 2.44129 22.1213 1.87868C21.5587 1.31607 20.7956 1 20 1V1ZM9.5 6C9.79667 6 10.0867 6.08797 10.3334 6.2528C10.58 6.41762 10.7723 6.65189 10.8858 6.92597C10.9994 7.20006 11.0291 7.50166 10.9712 7.79264C10.9133 8.08361 10.7704 8.35088 10.5607 8.56066C10.3509 8.77044 10.0836 8.9133 9.79264 8.97118C9.50166 9.02906 9.20006 8.99935 8.92597 8.88582C8.65189 8.77229 8.41762 8.58003 8.2528 8.33335C8.08797 8.08668 8 7.79667 8 7.5C8 7.10218 8.15804 6.72064 8.43934 6.43934C8.72064 6.15804 9.10218 6 9.5 6ZM18.925 16.763C18.8802 16.8354 18.8177 16.8952 18.7433 16.9367C18.6689 16.9782 18.5852 17 18.5 17H5.5C5.41075 17 5.32312 16.9761 5.24622 16.9308C5.16932 16.8855 5.10594 16.8204 5.06268 16.7424C5.01941 16.6643 4.99783 16.5761 5.00017 16.4869C5.00251 16.3977 5.0287 16.3107 5.076 16.235L7.576 12.235C7.61791 12.168 7.6751 12.1119 7.74288 12.0713C7.81067 12.0306 7.88712 12.0066 7.96596 12.0013C8.04481 11.9959 8.1238 12.0093 8.19647 12.0404C8.26914 12.0714 8.3334 12.1193 8.384 12.18L10.479 14.694L14.6 9.2C14.6519 9.13248 14.7197 9.07886 14.7973 9.04396C14.875 9.00906 14.9601 8.99395 15.045 9C15.1294 9.00799 15.2105 9.03734 15.2804 9.08527C15.3504 9.1332 15.407 9.19815 15.445 9.274L18.945 16.274C18.9839 16.3504 19.0024 16.4355 18.9989 16.5211C18.9954 16.6067 18.97 16.69 18.925 16.763V16.763Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function MessageBubbleUnreadIcon({ fill = \"#99A4B4\", ...props }) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"26\"\n      height=\"26\"\n      viewBox=\"0 -4 26 26\"\n      fill=\"none\"\n      {...props}\n    >\n      <path\n        d=\"M0.150024 17.9V3.15C0.150024 2.26667 0.454024 1.52067 1.06202 0.912C1.67069 0.304 2.41669 0 3.30002 0H18.7C19.5834 0 20.3294 0.304 20.938 0.912C21.546 1.52067 21.85 2.26667 21.85 3.15V14.55C21.85 15.4333 21.546 16.1793 20.938 16.788C20.3294 17.396 19.5834 17.7 18.7 17.7H4.15002L2.82502 19.025C2.32502 19.525 1.75436 19.6377 1.11302 19.363C0.471024 19.0877 0.150024 18.6 0.150024 17.9V17.9Z\"\n        fill={fill}\n      />\n      <circle\n        cx=\"22\"\n        cy=\"0\"\n        r=\"5\"\n        fill=\"#E33E3F\"\n        stroke=\"white\"\n        strokeWidth=\"2\"\n      />\n    </svg>\n  );\n}\n\nexport function BarterIcon({\n  fill = \"#99A4B4\",\n  props,\n}: {\n  fill?: string;\n  props?: {};\n}) {\n  return (\n    <svg\n      width=\"20\"\n      height=\"18\"\n      viewBox=\"0 0 20 18\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M10.1849 15.5458C10.0349 15.6958 9.76821 15.7208 9.59321 15.5458C9.44321 15.3958 9.41821 15.1292 9.59321 14.9542L12.4182 12.1292L11.2432 10.9542L8.41821 13.7792C8.25988 13.9458 7.99321 13.9375 7.82654 13.7792C7.65154 13.6042 7.67654 13.3375 7.82654 13.1875L10.6515 10.3625L9.47654 9.1875L6.65154 12.0125C6.50154 12.1625 6.23488 12.1875 6.05988 12.0125C5.90154 11.8542 5.90154 11.5875 6.05988 11.4208L8.88487 8.59584L7.70154 7.42084L4.87654 10.2458C4.72654 10.3958 4.45987 10.4208 4.28487 10.2458C4.12654 10.0792 4.12654 9.82084 4.28487 9.65417L7.93488 6.00417L9.49321 7.55417C10.2849 8.34584 11.6515 8.3375 12.4432 7.55417C13.2599 6.7375 13.2599 5.42084 12.4432 4.60417L10.8932 3.05417L11.1265 2.82084C11.7765 2.17084 12.8349 2.17084 13.4849 2.82084L17.0182 6.35417C17.6682 7.00417 17.6682 8.0625 17.0182 8.7125L10.1849 15.5458ZM18.1932 9.89584C19.4932 8.59584 19.4932 6.4875 18.1932 5.17917L14.6599 1.64584C13.3599 0.345837 11.2515 0.345837 9.94321 1.64584L9.70987 1.87917L9.47654 1.64584C8.17654 0.345837 6.06821 0.345837 4.75988 1.64584L1.80987 4.59584C0.626542 5.77917 0.518208 7.62084 1.47654 8.92084L2.68488 7.7125C2.35987 7.0875 2.46821 6.29584 2.99321 5.77084L5.94321 2.82084C6.59321 2.17084 7.65154 2.17084 8.30154 2.82084L11.2682 5.7875C11.4182 5.9375 11.4432 6.20417 11.2682 6.37917C11.0932 6.55417 10.8265 6.52917 10.6765 6.37917L7.93488 3.64584L3.10154 8.47084C2.28487 9.27917 2.28487 10.6042 3.10154 11.4208C3.42654 11.7458 3.84321 11.9458 4.28487 12.0042C4.34321 12.4375 4.53488 12.8542 4.86821 13.1875C5.20154 13.5208 5.61821 13.7125 6.05154 13.7708C6.10988 14.2042 6.30154 14.6208 6.63488 14.9542C6.96821 15.2875 7.38487 15.4792 7.81821 15.5375C7.87654 15.9875 8.07654 16.3958 8.40154 16.7208C8.79321 17.1125 9.31821 17.3292 9.87654 17.3292C10.4349 17.3292 10.9599 17.1125 11.3515 16.7208L18.1932 9.89584Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function MessageBubbleIcon({ fill = \"#99A4B4\", ...props }) {\n  return (\n    <SvgIcon\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"22\"\n      height=\"21\"\n      viewBox=\"0 0 22 21\"\n      sx={{ color: fill, ...(props.sx ?? {}) }}\n      {...props}\n    >\n      <path d=\"M0.150024 17.9V3.15C0.150024 2.26667 0.454024 1.52067 1.06202 0.912C1.67069 0.304 2.41669 0 3.30002 0H18.7C19.5834 0 20.3294 0.304 20.938 0.912C21.546 1.52067 21.85 2.26667 21.85 3.15V14.55C21.85 15.4333 21.546 16.1793 20.938 16.788C20.3294 17.396 19.5834 17.7 18.7 17.7H4.15002L2.82502 19.025C2.32502 19.525 1.75436 19.6377 1.11302 19.363C0.471024 19.0877 0.150024 18.6 0.150024 17.9V17.9Z\" />\n    </SvgIcon>\n  );\n}\n\nexport function MessageIcon({ fill = \"#99A4B4\", ...props }) {\n  return (\n    <svg\n      width=\"22\"\n      height=\"21\"\n      viewBox=\"0 0 22 21\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M6.5999 10.9C6.96657 10.9 7.2749 10.775 7.5249 10.525C7.7749 10.275 7.8999 9.96667 7.8999 9.6C7.8999 9.23333 7.7749 8.925 7.5249 8.675C7.2749 8.425 6.96657 8.3 6.5999 8.3C6.23324 8.3 5.9249 8.425 5.6749 8.675C5.4249 8.925 5.2999 9.23333 5.2999 9.6C5.2999 9.96667 5.4249 10.275 5.6749 10.525C5.9249 10.775 6.23324 10.9 6.5999 10.9ZM10.9999 10.9C11.3666 10.9 11.6749 10.775 11.9249 10.525C12.1749 10.275 12.2999 9.96667 12.2999 9.6C12.2999 9.23333 12.1749 8.925 11.9249 8.675C11.6749 8.425 11.3666 8.3 10.9999 8.3C10.6332 8.3 10.3249 8.425 10.0749 8.675C9.8249 8.925 9.6999 9.23333 9.6999 9.6C9.6999 9.96667 9.8249 10.275 10.0749 10.525C10.3249 10.775 10.6332 10.9 10.9999 10.9ZM15.3999 10.9C15.7666 10.9 16.0749 10.775 16.3249 10.525C16.5749 10.275 16.6999 9.96667 16.6999 9.6C16.6999 9.23333 16.5749 8.925 16.3249 8.675C16.0749 8.425 15.7666 8.3 15.3999 8.3C15.0332 8.3 14.7249 8.425 14.4749 8.675C14.2249 8.925 14.0999 9.23333 14.0999 9.6C14.0999 9.96667 14.2249 10.275 14.4749 10.525C14.7249 10.775 15.0332 10.9 15.3999 10.9ZM0.149902 18.65V3.9C0.149902 3.01667 0.453902 2.27067 1.0619 1.662C1.67057 1.054 2.41657 0.75 3.2999 0.75H18.6999C19.5832 0.75 20.3292 1.054 20.9379 1.662C21.5459 2.27067 21.8499 3.01667 21.8499 3.9V15.3C21.8499 16.1833 21.5459 16.9293 20.9379 17.538C20.3292 18.146 19.5832 18.45 18.6999 18.45H4.1499L2.8249 19.775C2.3249 20.275 1.75424 20.3877 1.1129 20.113C0.470902 19.8377 0.149902 19.35 0.149902 18.65V18.65Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function PowerIcon({ fill = \"#99A4B4\" }) {\n  return (\n    <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n      <path\n        d=\"M8.88896 0H7.11125V8.88896H8.88896V0ZM13.1867 1.92437L11.929 3.18208C13.3244 4.32438 14.2223 6.05333 14.2223 8C14.2223 11.4356 11.4356 14.2223 8 14.2223C4.56437 14.2223 1.77771 11.4356 1.77771 8C1.77771 6.05333 2.67542 4.32438 4.07104 3.18229L2.81333 1.92458C1.09771 3.39104 0 5.56437 0 8C0 12.4177 3.58229 16 8 16C12.4177 16 16 12.4177 16 8C16 5.56437 14.9023 3.39104 13.1867 1.92437Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function MoreIcon({ fill = \"#99A4B4\" }) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"20\"\n      height=\"8\"\n      viewBox=\"0 0 20 8\"\n      fill=\"none\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M9.99991 7.50012C11.9329 7.50012 13.4999 5.93312 13.4999 4.00012C13.4999 2.06713 11.9329 0.500122 9.99991 0.500122C8.06691 0.500122 6.49991 2.06713 6.49991 4.00012C6.49991 5.93312 8.06691 7.50012 9.99991 7.50012ZM4.5 4.00006C4.5 5.10463 3.60457 6.00006 2.5 6.00006C1.39543 6.00006 0.5 5.10463 0.5 4.00006C0.5 2.89549 1.39543 2.00006 2.5 2.00006C3.60457 2.00006 4.5 2.89549 4.5 4.00006ZM19.5 4.00012C19.5 5.10469 18.6046 6.00012 17.5 6.00012C16.3954 6.00012 15.5 5.10469 15.5 4.00012C15.5 2.89555 16.3954 2.00012 17.5 2.00012C18.6046 2.00012 19.5 2.89555 19.5 4.00012Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function SwapIcon({ fill = \"#99A4B4\" }) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M22 12C22 6.48 17.52 2 12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12ZM15 6.5L18.15 9.65C18.35 9.85 18.35 10.16 18.15 10.36L15 13.5V11H11V9H15V6.5ZM9 17.5L5.85 14.35C5.65 14.15 5.65 13.84 5.85 13.64L9 10.5V13H13V15H9V17.5Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function ExtensionIcon({ fill = \"#FAFAFA\" }) {\n  return (\n    <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\">\n      <path\n        d=\"M16.6667 9.58333H15.4167V6.25C15.4167 5.33333 14.6667 4.58333 13.75 4.58333H10.4167V3.33333C10.4167 2.18333 9.48333 1.25 8.33333 1.25C7.18333 1.25 6.25 2.18333 6.25 3.33333V4.58333H2.91667C2 4.58333 1.25833 5.33333 1.25833 6.25V9.41667H2.5C3.74167 9.41667 4.75 10.425 4.75 11.6667C4.75 12.9083 3.74167 13.9167 2.5 13.9167H1.25V17.0833C1.25 18 2 18.75 2.91667 18.75H6.08333V17.5C6.08333 16.2583 7.09167 15.25 8.33333 15.25C9.575 15.25 10.5833 16.2583 10.5833 17.5V18.75H13.75C14.6667 18.75 15.4167 18 15.4167 17.0833V13.75H16.6667C17.8167 13.75 18.75 12.8167 18.75 11.6667C18.75 10.5167 17.8167 9.58333 16.6667 9.58333Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function PinIcon({ fill = \"#FAFAFA\" }) {\n  return (\n    <svg width=\"12\" height=\"18\" viewBox=\"0 0 12 18\" fill=\"none\">\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M9.33317 6.49996V2.33329H10.1665C10.6248 2.33329 10.9998 1.95829 10.9998 1.49996C10.9998 1.04163 10.6248 0.666626 10.1665 0.666626H1.83317C1.37484 0.666626 0.999837 1.04163 0.999837 1.49996C0.999837 1.95829 1.37484 2.33329 1.83317 2.33329H2.6665V6.49996C2.6665 7.88329 1.54984 8.99996 0.166504 8.99996V10.6666H5.1415V16.5L5.97484 17.3333L6.80817 16.5V10.6666H11.8332V8.99996C10.4498 8.99996 9.33317 7.88329 9.33317 6.49996Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function Backpack({ fill }: { fill: string }) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"200\"\n      height=\"41\"\n      viewBox=\"0 0 200 41\"\n      fill=\"none\"\n    >\n      <path\n        d=\"M2.02026 31.597V1.49499H14.748C16.8221 1.49499 18.6 1.84518 20.0815 2.54554C21.563 3.2459 22.6944 4.25603 23.4755 5.57594C24.2567 6.86892 24.6473 8.44473 24.6473 10.3034C24.6473 11.6233 24.2837 12.8893 23.5564 14.1015C22.8291 15.2867 21.6304 16.2834 19.9603 17.0915V14.0207C21.5496 14.6402 22.7752 15.381 23.6372 16.243C24.4991 17.105 25.0918 18.0478 25.415 19.0714C25.7382 20.068 25.8999 21.1186 25.8999 22.223C25.8999 25.186 24.9167 27.4892 22.9503 29.1323C20.9839 30.7755 18.2498 31.597 14.748 31.597H2.02026ZM8.2831 26.1423H15.4753C16.7413 26.1423 17.7514 25.7787 18.5057 25.0514C19.2599 24.3241 19.637 23.3813 19.637 22.223C19.637 21.0378 19.2599 20.0815 18.5057 19.3542C17.7514 18.6269 16.7413 18.2632 15.4753 18.2632H8.2831V26.1423ZM8.2831 12.8085H15.1924C16.1622 12.8085 16.9299 12.5391 17.4955 12.0004C18.0882 11.4347 18.3845 10.694 18.3845 9.77811C18.3845 8.86225 18.0882 8.13495 17.4955 7.59621C16.9299 7.03054 16.1622 6.7477 15.1924 6.7477H8.2831V12.8085Z\"\n        fill={fill}\n      />\n      <path\n        d=\"M36.3014 32.0819C34.7121 32.0819 33.3384 31.826 32.1801 31.3142C31.0218 30.8024 30.1329 30.0751 29.5133 29.1323C28.8938 28.1626 28.584 27.0178 28.584 25.6978C28.584 24.4587 28.8668 23.3678 29.4325 22.425C29.9982 21.4553 30.8602 20.6472 32.0184 20.0007C33.2037 19.3542 34.6717 18.8963 36.4226 18.6269L43.1703 17.5359V21.9805L37.5136 22.9907C36.6516 23.1523 35.9916 23.4351 35.5337 23.8392C35.0758 24.2163 34.8468 24.7685 34.8468 25.4958C34.8468 26.1692 35.1027 26.6945 35.6145 27.0716C36.1263 27.4487 36.7594 27.6373 37.5136 27.6373C38.5103 27.6373 39.3857 27.4218 40.1399 26.9908C40.8942 26.5598 41.4733 25.9807 41.8774 25.2534C42.3084 24.4992 42.5239 23.6776 42.5239 22.7887V17.0511C42.5239 16.216 42.1871 15.5157 41.5137 14.95C40.8672 14.3843 39.9783 14.1015 38.847 14.1015C37.7695 14.1015 36.8132 14.3978 35.9782 14.9904C35.1701 15.583 34.5775 16.3642 34.2003 17.3339L29.3517 15.0308C29.7827 13.7917 30.4696 12.7277 31.4124 11.8388C32.3552 10.9499 33.4865 10.263 34.8064 9.77811C36.1263 9.29324 37.5675 9.05081 39.1298 9.05081C40.9885 9.05081 42.6316 9.38752 44.0593 10.0609C45.4869 10.7344 46.5913 11.6772 47.3725 12.8893C48.1806 14.0746 48.5847 15.4618 48.5847 17.0511V31.597H42.9279V28.0414L44.3017 27.7989C43.6552 28.7687 42.9414 29.5768 42.1602 30.2233C41.379 30.8428 40.5036 31.3007 39.5339 31.597C38.5641 31.9203 37.4866 32.0819 36.3014 32.0819Z\"\n        fill={fill}\n      />\n      <path\n        d=\"M63.8582 32.0819C61.6494 32.0819 59.6561 31.5836 57.8782 30.5869C56.1273 29.5633 54.7266 28.176 53.6761 26.4251C52.6525 24.6742 52.1407 22.7078 52.1407 20.5259C52.1407 18.3441 52.6525 16.3911 53.6761 14.6672C54.6997 12.9163 56.1004 11.5425 57.8782 10.5458C59.6561 9.54914 61.6494 9.05081 63.8582 9.05081C65.5014 9.05081 67.0233 9.33365 68.4241 9.89933C69.8248 10.465 71.0235 11.2596 72.0201 12.2832C73.0168 13.2799 73.7306 14.4651 74.1616 15.8389L68.9089 18.1016C68.5318 16.9972 67.8853 16.1218 66.9695 15.4753C66.0805 14.8288 65.0435 14.5055 63.8582 14.5055C62.8077 14.5055 61.8649 14.7614 61.0299 15.2732C60.2218 15.785 59.5753 16.4989 59.0904 17.4147C58.6325 18.3306 58.4035 19.3811 58.4035 20.5664C58.4035 21.7516 58.6325 22.8021 59.0904 23.718C59.5753 24.6338 60.2218 25.3477 61.0299 25.8595C61.8649 26.3713 62.8077 26.6272 63.8582 26.6272C65.0704 26.6272 66.1209 26.3039 67.0099 25.6574C67.8988 25.011 68.5318 24.1355 68.9089 23.0311L74.1616 25.3342C73.7576 26.6272 73.0572 27.7855 72.0605 28.8091C71.0639 29.8327 69.8652 30.6408 68.4645 31.2334C67.0637 31.7991 65.5283 32.0819 63.8582 32.0819Z\"\n        fill={fill}\n      />\n      <path\n        d=\"M77.7306 31.597V1.01013H83.7914V20.6068L81.5287 19.8795L91.2664 9.53568H98.7414L90.7411 18.4249L98.701 31.597H91.832L85.1651 20.4047L88.6804 19.5158L81.9327 26.8696L83.7914 23.3543V31.597H77.7306Z\"\n        fill={fill}\n      />\n      <path\n        d=\"M101.406 39.6781V9.53568H107.062V13.7378L106.537 12.5257C107.264 11.4213 108.248 10.5727 109.487 9.98013C110.753 9.36058 112.194 9.05081 113.81 9.05081C115.911 9.05081 117.81 9.56261 119.507 10.5862C121.204 11.6098 122.551 12.9971 123.548 14.748C124.544 16.4719 125.043 18.4114 125.043 20.5664C125.043 22.6944 124.544 24.6338 123.548 26.3847C122.578 28.1356 121.245 29.5229 119.548 30.5465C117.851 31.5701 115.925 32.0819 113.77 32.0819C112.261 32.0819 110.86 31.8125 109.567 31.2738C108.301 30.7081 107.278 29.8865 106.497 28.8091L107.466 27.5565V39.6781H101.406ZM113.042 26.6272C114.174 26.6272 115.17 26.3713 116.032 25.8595C116.894 25.3477 117.568 24.6338 118.053 23.718C118.538 22.8021 118.78 21.7516 118.78 20.5664C118.78 19.3811 118.538 18.3441 118.053 17.4551C117.568 16.5393 116.894 15.8255 116.032 15.3137C115.17 14.7749 114.174 14.5055 113.042 14.5055C111.965 14.5055 110.995 14.7614 110.133 15.2732C109.298 15.785 108.638 16.4989 108.153 17.4147C107.695 18.3306 107.466 19.3811 107.466 20.5664C107.466 21.7516 107.695 22.8021 108.153 23.718C108.638 24.6338 109.298 25.3477 110.133 25.8595C110.995 26.3713 111.965 26.6272 113.042 26.6272Z\"\n        fill={fill}\n      />\n      <path\n        d=\"M135.421 32.0819C133.832 32.0819 132.458 31.826 131.3 31.3142C130.141 30.8024 129.252 30.0751 128.633 29.1323C128.013 28.1626 127.704 27.0178 127.704 25.6978C127.704 24.4587 127.986 23.3678 128.552 22.425C129.118 21.4553 129.98 20.6472 131.138 20.0007C132.323 19.3542 133.791 18.8963 135.542 18.6269L142.29 17.5359V21.9805L136.633 22.9907C135.771 23.1523 135.111 23.4351 134.653 23.8392C134.195 24.2163 133.966 24.7685 133.966 25.4958C133.966 26.1692 134.222 26.6945 134.734 27.0716C135.246 27.4487 135.879 27.6373 136.633 27.6373C137.63 27.6373 138.505 27.4218 139.259 26.9908C140.014 26.5598 140.593 25.9807 140.997 25.2534C141.428 24.4992 141.643 23.6776 141.643 22.7887V17.0511C141.643 16.216 141.307 15.5157 140.633 14.95C139.987 14.3843 139.098 14.1015 137.967 14.1015C136.889 14.1015 135.933 14.3978 135.098 14.9904C134.29 15.583 133.697 16.3642 133.32 17.3339L128.471 15.0308C128.902 13.7917 129.589 12.7277 130.532 11.8388C131.475 10.9499 132.606 10.263 133.926 9.77811C135.246 9.29324 136.687 9.05081 138.249 9.05081C140.108 9.05081 141.751 9.38752 143.179 10.0609C144.606 10.7344 145.711 11.6772 146.492 12.8893C147.3 14.0746 147.704 15.4618 147.704 17.0511V31.597H142.047V28.0414L143.421 27.7989C142.775 28.7687 142.061 29.5768 141.28 30.2233C140.499 30.8428 139.623 31.3007 138.653 31.597C137.684 31.9203 136.606 32.0819 135.421 32.0819Z\"\n        fill={fill}\n      />\n      <path\n        d=\"M162.978 32.0819C160.769 32.0819 158.776 31.5836 156.998 30.5869C155.247 29.5633 153.846 28.176 152.796 26.4251C151.772 24.6742 151.26 22.7078 151.26 20.5259C151.26 18.3441 151.772 16.3911 152.796 14.6672C153.819 12.9163 155.22 11.5425 156.998 10.5458C158.776 9.54914 160.769 9.05081 162.978 9.05081C164.621 9.05081 166.143 9.33365 167.544 9.89933C168.944 10.465 170.143 11.2596 171.14 12.2832C172.136 13.2799 172.85 14.4651 173.281 15.8389L168.028 18.1016C167.651 16.9972 167.005 16.1218 166.089 15.4753C165.2 14.8288 164.163 14.5055 162.978 14.5055C161.927 14.5055 160.984 14.7614 160.149 15.2732C159.341 15.785 158.695 16.4989 158.21 17.4147C157.752 18.3306 157.523 19.3811 157.523 20.5664C157.523 21.7516 157.752 22.8021 158.21 23.718C158.695 24.6338 159.341 25.3477 160.149 25.8595C160.984 26.3713 161.927 26.6272 162.978 26.6272C164.19 26.6272 165.24 26.3039 166.129 25.6574C167.018 25.011 167.651 24.1355 168.028 23.0311L173.281 25.3342C172.877 26.6272 172.177 27.7855 171.18 28.8091C170.183 29.8327 168.985 30.6408 167.584 31.2334C166.183 31.7991 164.648 32.0819 162.978 32.0819Z\"\n        fill={fill}\n      />\n      <path\n        d=\"M176.85 31.597V1.01013H182.911V20.6068L180.648 19.8795L190.386 9.53568H197.861L189.861 18.4249L197.821 31.597H190.952L184.285 20.4047L187.8 19.5158L181.052 26.8696L182.911 23.3543V31.597H176.85Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function RedBackpack({ style }: { style?: React.CSSProperties }) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"55\"\n      height=\"80\"\n      viewBox=\"0 0 55 80\"\n      fill=\"none\"\n      style={style}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M32.71 6.29026C35.6178 6.29026 38.3452 6.68005 40.8705 7.40296C38.3982 1.64085 33.2649 0 27.5519 0C21.8277 0 16.6855 1.64729 14.2188 7.43692C16.7255 6.68856 19.4412 6.29026 22.339 6.29026H32.71ZM21.6739 12.0752C7.86677 12.0752 0 22.9371 0 36.336V50.1C0 51.4399 1.11929 52.5 2.5 52.5H52.5C53.8807 52.5 55 51.4399 55 50.1V36.336C55 22.9371 45.8521 12.0752 32.0449 12.0752H21.6739ZM27.4805 36.4551C32.313 36.4551 36.2305 32.5376 36.2305 27.7051C36.2305 22.8726 32.313 18.9551 27.4805 18.9551C22.648 18.9551 18.7305 22.8726 18.7305 27.7051C18.7305 32.5376 22.648 36.4551 27.4805 36.4551ZM0 60.5901C0 59.2503 1.11929 58.1641 2.5 58.1641H52.5C53.8807 58.1641 55 59.2503 55 60.5901V75.1466C55 77.8264 52.7614 79.9988 50 79.9988H5C2.23857 79.9988 0 77.8264 0 75.1466V60.5901Z\"\n        fill=\"#E33E3F\"\n      />\n    </svg>\n  );\n}\n\nexport function Dollar({\n  fill,\n  style,\n}: {\n  fill?: string;\n  style?: React.CSSProperties;\n}) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"10\"\n      height=\"18\"\n      viewBox=\"0 0 10 18\"\n      fill=\"none\"\n      style={style}\n    >\n      <path\n        d=\"M5.3 7.9C3.03 7.31 2.3 6.7 2.3 5.75C2.3 4.66 3.31 3.9 5 3.9C6.42 3.9 7.13 4.44 7.39 5.3C7.51 5.7 7.84 6 8.26 6H8.56C9.22 6 9.69 5.35 9.46 4.73C9.04 3.55 8.06 2.57 6.5 2.19V1.5C6.5 0.67 5.83 0 5 0C4.17 0 3.5 0.67 3.5 1.5V2.16C1.56 2.58 0 3.84 0 5.77C0 8.08 1.91 9.23 4.7 9.9C7.2 10.5 7.7 11.38 7.7 12.31C7.7 13 7.21 14.1 5 14.1C3.35 14.1 2.5 13.51 2.17 12.67C2.02 12.28 1.68 12 1.27 12H0.99C0.32 12 -0.15 12.68 0.0999999 13.3C0.67 14.69 2 15.51 3.5 15.83V16.5C3.5 17.33 4.17 18 5 18C5.83 18 6.5 17.33 6.5 16.5V15.85C8.45 15.48 10 14.35 10 12.3C10 9.46 7.57 8.49 5.3 7.9Z\"\n        fill={fill}\n      />\n    </svg>\n  );\n}\n\nexport function StickerIcon({\n  fill,\n  style,\n}: {\n  fill?: string;\n  style?: React.CSSProperties;\n}) {\n  return (\n    <svg\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <g clipPath=\"url(#clip0_19735_161601)\">\n        <path\n          d=\"M6.66668 18.3345C6.66999 15.2414 7.90021 12.2758 10.0874 10.0886C12.2746 7.9014 15.2402 6.67118 18.3333 6.66787C18.7034 6.67109 19.0731 6.69334 19.4408 6.73453C18.8881 5.13248 17.937 3.69729 16.6771 2.56389C15.4171 1.43049 13.8896 0.63611 12.2382 0.255418C10.5868 -0.125275 8.86569 -0.0797711 7.2367 0.387652C5.60771 0.855074 4.12433 1.72906 2.92602 2.92746C1.7277 4.12585 0.85381 5.60928 0.386494 7.23831C-0.0808216 8.86733 -0.126213 10.5884 0.254588 12.2398C0.635389 13.8912 1.42987 15.4187 2.56336 16.6785C3.69684 17.9384 5.13209 18.8894 6.73418 19.442C6.69279 19.0743 6.67026 18.7046 6.66668 18.3345Z\"\n          fill={fill}\n        />\n        <path\n          d=\"M18.3338 8.33616C16.888 8.32642 15.4576 8.63238 14.1424 9.23269C12.8271 9.83299 11.6588 10.7132 10.7189 11.8118C9.77901 12.9103 9.09027 14.2008 8.70077 15.5932C8.31127 16.9855 8.23039 18.446 8.46378 19.8728L19.8705 8.46616C19.3623 8.38351 18.8486 8.34005 18.3338 8.33616Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <clipPath id=\"clip0_19735_161601\">\n          <rect width=\"20\" height=\"20\" fill=\"white\" />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n}\n","import { useCustomTheme } from \"@coral-xyz/themes\";\nimport VerifiedIcon from \"@mui/icons-material/Verified\";\nimport { Tooltip } from \"@mui/material\";\nimport { styled } from \"@mui/system\";\n\nexport const BackpackStaffIcon = () => {\n  const theme = useCustomTheme();\n\n  const StyledHomeIcon = styled(VerifiedIcon, {\n    name: \"StyledHomeIcon\",\n    slot: \"Wrapper\",\n  })({\n    color: theme.custom.colors.verified,\n    \"&:hover\": { color: theme.custom.colors.linkColor },\n  });\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      {\" \"}\n      <Tooltip title=\"Backpack staff\">\n        <StyledHomeIcon\n          style={{\n            fontSize: 14,\n            marginLeft: 3,\n          }}\n        />\n      </Tooltip>\n    </div>\n  );\n};\n","import { styles } from \"@coral-xyz/themes\";\n\nconst useStyles = styles((theme) => ({\n  topLabel: {\n    fontSize: 14,\n    color: theme.custom.colors.smallTextColor,\n    marginLeft: 4,\n    marginBottom: 4,\n  },\n}));\n\nexport const BubbleTopLabel = ({ text }: { text: string }) => {\n  const classes = useStyles();\n  return <div className={classes.topLabel}>{text}</div>;\n};\n","import { useCustomTheme } from \"@coral-xyz/themes\";\nimport type { Button } from \"@mui/material\";\n\nimport { NegativeButton } from \"./NegativeButton\";\n\nexport function DangerButton({\n  buttonLabelStyle,\n  label,\n  ...buttonProps\n}: {\n  buttonLabelStyle?: React.CSSProperties;\n  label?: string;\n} & React.ComponentProps<typeof Button>) {\n  const theme = useCustomTheme();\n  const buttonStyle = Object.assign(\n    {\n      backgroundColor: theme.custom.colors.negative,\n      color: \"#fff\",\n    },\n    buttonProps.style\n  );\n  return (\n    <NegativeButton\n      buttonLabelStyle={buttonLabelStyle}\n      label={label}\n      {...buttonProps}\n      style={{\n        ...(buttonProps.style || {}),\n        ...buttonStyle,\n      }}\n    />\n  );\n}\n","import { useCustomTheme } from \"@coral-xyz/themes\";\nimport { Typography } from \"@mui/material\";\n\nimport { PrimaryButton } from \"./PrimaryButton\";\n\nexport const EmptyState: React.FC<{\n  icon: (props: any) => React.ReactNode;\n  header?: React.ReactNode;\n  title: string;\n  subtitle: string;\n  buttonText?: string;\n  onClick?: () => void;\n  minimize?: boolean;\n  verticallyCentered?: boolean;\n  contentStyle?: React.CSSProperties;\n  style?: React.CSSProperties;\n  innerStyle?: React.CSSProperties;\n}> = ({\n  icon,\n  header,\n  title,\n  subtitle,\n  buttonText,\n  onClick,\n  contentStyle,\n  style,\n  innerStyle,\n  minimize,\n  verticallyCentered = true,\n}) => {\n  const theme = useCustomTheme();\n\n  return (\n    <div\n      style={{\n        borderRadius: \"12px\",\n        paddingLeft: \"12px\",\n        paddingRight: \"12px\",\n        height: verticallyCentered ? \"100%\" : \"auto\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        ...style,\n      }}\n    >\n      <div\n        style={{\n          borderRadius: \"12px\",\n          background: theme.custom.colors.nav,\n          border: `${theme.custom.colors.borderFull}`,\n          overflow: \"hidden\",\n          ...innerStyle,\n        }}\n      >\n        {header}\n        <div\n          style={{\n            padding: \"16px\",\n            ...contentStyle,\n          }}\n        >\n          {icon({\n            style: {\n              color: theme.custom.colors.icon,\n              width: \"56px\",\n              height: \"56px\",\n              display: \"block\",\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              marginBottom: \"16px\",\n            },\n          })}\n          <Typography\n            style={{\n              fontSize: \"24px\",\n              lineHeight: \"32px\",\n              textAlign: \"center\",\n              fontWeight: 500,\n              color: theme.custom.colors.fontColor,\n            }}\n          >\n            {title}\n          </Typography>\n          {minimize !== true && (\n            <Typography\n              style={{\n                marginTop: \"8px\",\n                color: theme.custom.colors.secondary,\n                textAlign: \"center\",\n                fontSize: \"16px\",\n                lineHeight: \"24px\",\n                fontWeight: 500,\n              }}\n            >\n              {subtitle}\n            </Typography>\n          )}\n          {minimize !== true && buttonText && (\n            <PrimaryButton\n              onClick={onClick}\n              label={buttonText}\n              style={{\n                marginTop: \"40px\",\n                ...(window.matchMedia(\"(max-width: 650px)\").matches\n                  ? {}\n                  : {\n                      display: \"block\",\n                      marginLeft: \"auto\",\n                      marginRight: \"auto\",\n                      width: \"max-content\",\n                      padding: \"0 24px\",\n                    }),\n              }}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { styles, useCustomTheme } from \"@coral-xyz/themes\";\nimport { TextField, Typography } from \"@mui/material\";\n\nimport { List, ListItem } from \"./List\";\n\nfunction overrideErrBorder(originalBorder: string, err: boolean, theme: any) {\n  if (err) {\n    return `solid 2pt ${theme.custom.colors.negative}`;\n  }\n  return originalBorder;\n}\n\nconst useStyles = styles((theme) => ({\n  textFieldRoot: {\n    color: theme.custom.colors.secondary,\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        border: \"none\",\n        color: theme.custom.colors.secondary,\n      },\n    },\n  },\n  smallInput: {\n    \"& .Mui-disabled\": {\n      \"-webkit-text-fill-color\": theme.custom.colors.fontColor2,\n    },\n  },\n  listParent: {\n    borderRadius: \"10px\",\n    border: (props) =>\n      overrideErrBorder(\n        theme.custom.colors.textInputBorderFull,\n        //@ts-ignore\n        props.error,\n        theme\n      ),\n    \"&:hover\": {\n      border: (props) =>\n        overrideErrBorder(\n          theme.custom.colors.textInputBorderHovered,\n          //@ts-ignore\n          props.error,\n          theme\n        ),\n    },\n    \"&:focus-within\": {\n      border: (props) =>\n        overrideErrBorder(\n          theme.custom.colors.textInputBorderFocussed,\n          //@ts-ignore\n          props.error,\n          theme\n        ),\n    },\n  },\n}));\n\ninterface InputListProps {\n  children: any;\n  error: boolean;\n}\n\nexport const Inputs = ({ children, error }: InputListProps) => {\n  const classes = useStyles({ error });\n  return <List className={classes.listParent}>{children}</List>;\n};\n\ninterface InputListItemProps {\n  isLast?: boolean;\n  isFirst?: boolean;\n  title: string;\n  value: string;\n  placeholder: string;\n  onChange: (e: any) => void;\n  button: boolean;\n  type?: string;\n}\n\nexport const InputListItem = ({\n  isLast = false,\n  isFirst = false,\n  title,\n  value,\n  onChange,\n  button = false,\n  placeholder,\n  type = \"text\",\n}: InputListItemProps) => {\n  const theme = useCustomTheme();\n  const textColor = value\n    ? theme.custom.colors.fontColor2\n    : theme.custom.colors.textPlaceholder;\n\n  return (\n    <ListItem\n      isLast={isLast}\n      isFirst={isFirst}\n      style={{\n        height: \"46px\",\n        padding: \"10px\",\n      }}\n      radius={\"8px\"}\n      button={button}\n    >\n      <Typography style={{ width: \"80px\" }}>{title}</Typography>\n      <TextField\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        type={type}\n        inputProps={{\n          style: {\n            padding: 0,\n            color: textColor,\n          },\n        }}\n        sx={(theme: any) => ({\n          color: theme.custom.colors.secondary,\n          \"& .MuiOutlinedInput-root\": {\n            backgroundColor: theme.custom.colors.textInputBorderFocussed,\n            \"& fieldset\": {\n              border: \"none\",\n              color: theme.custom.colors.secondary,\n            },\n          },\n        })}\n      />\n    </ListItem>\n  );\n};\n\ninterface InputProps {\n  value: string;\n  setValue: (e: any) => void;\n  onKeyDown?: (e: any) => void;\n  error?: boolean;\n  type?: string;\n  placeholder?: string;\n  disabled?: boolean;\n  inputProps?: any;\n  autoFocus?: boolean;\n  endAdornment?: any;\n  startAdornment?: any;\n  errorMessage?: string;\n  rows?: number;\n  className?: any;\n  children?: any;\n  select?: boolean;\n  margin?: \"none\" | \"dense\";\n  required?: boolean;\n}\n\nexport const TextInput = ({\n  rows,\n  value,\n  setValue,\n  onKeyDown,\n  error = false,\n  type = \"text\",\n  placeholder = \"\",\n  disabled = false,\n  inputProps = {},\n  autoFocus = false,\n  endAdornment,\n  startAdornment,\n  errorMessage,\n  className = \"\",\n  children,\n  select,\n  margin,\n  required = true,\n}: InputProps) => {\n  const theme = useCustomTheme();\n  const textColor = value\n    ? theme.custom.colors.fontColor2\n    : theme.custom.colors.textPlaceholder;\n\n  return (\n    <>\n      <TextField\n        multiline={!!rows}\n        rows={4}\n        type={type}\n        placeholder={placeholder}\n        value={value}\n        onChange={setValue}\n        onKeyDown={onKeyDown}\n        inputProps={{\n          ...inputProps,\n          style: {\n            color: textColor,\n            ...inputProps.style,\n          },\n        }}\n        className={className}\n        sx={(theme: any) => ({\n          fontWeight: 500,\n          borderRadius: \"24px\",\n          fontSize: \"16px\",\n          lineHeight: \"24px\",\n          \"& .MuiOutlinedInput-root\": {\n            background: theme.custom.colors.textBackground,\n            borderRadius: \"12px\",\n            outline: \"none\",\n            \"& .Mui-focused .MuiOutlinedInput-notchedOutline\": {\n              border: overrideErrBorder(\n                theme.custom.colors.textInputBorderFocussed,\n                error,\n                theme\n              ),\n              outline: \"none\",\n            },\n            \"& fieldset\": {\n              border: overrideErrBorder(\n                theme.custom.colors.borderFull,\n                error,\n                theme\n              ),\n            },\n            \"&:hover fieldset\": {\n              border: overrideErrBorder(\n                theme.custom.colors.textInputBorderHovered,\n                error,\n                theme\n              ),\n            },\n            \"&.Mui-focused fieldset\": {\n              border: overrideErrBorder(\n                theme.custom.colors.textInputBorderFocussed,\n                error,\n                theme\n              ),\n            },\n            \"&:active\": {\n              outline: \"none\",\n            },\n          },\n        })}\n        variant=\"outlined\"\n        fullWidth\n        required={required}\n        margin={margin ?? \"dense\"}\n        disabled={disabled}\n        autoFocus={autoFocus}\n        InputProps={{\n          startAdornment,\n          endAdornment,\n        }}\n        SelectProps={{\n          MenuProps: {\n            style: { zIndex: 1501 },\n          },\n        }}\n        select={select}\n      >\n        {children}\n      </TextField>\n      {errorMessage && (\n        <Typography\n          sx={{ color: theme.custom.colors.negative }}\n          style={{ marginLeft: 5 }}\n        >\n          {errorMessage}\n        </Typography>\n      )}\n    </>\n  );\n};\n\nexport const SmallInput = ({\n  value,\n  onChange,\n  placeholder,\n  disabled,\n}: {\n  value: string;\n  onChange: (e: any) => void;\n  placeholder: string;\n  disabled?: boolean;\n}) => {\n  const classes = useStyles();\n  const theme = useCustomTheme();\n  return (\n    <TextField\n      disabled={disabled}\n      inputProps={{\n        style: {\n          textAlign: \"right\",\n          padding: 2,\n          background: theme.custom.colors.background,\n          borderRadius: 5,\n          outline: \"none\",\n          color: theme.custom.colors.fontColor2,\n          fontSize: \"14px\",\n        },\n      }}\n      // sx={{\n      //   // textFieldRoot\n      //   color: theme.custom.colors.secondary,\n      //   \"& .MuiOutlinedInput-root\": {\n      //     \"& fieldset\": {\n      //       border: \"none\",\n      //       color: theme.custom.colors.secondary,\n      //     },\n      //   },\n      // }}\n      classes={{\n        root: classes.textFieldRoot,\n      }}\n      style={{\n        width: 100,\n        padding: 0,\n        borderRadius: 5,\n        border: \"none\",\n        outline: \"none\",\n      }}\n      className={classes.smallInput}\n      placeholder={placeholder}\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    />\n  );\n};\n","import { toDisplayBalance } from \"@coral-xyz/common\";\nimport type { CustomTheme } from \"@coral-xyz/themes\";\nimport { styles, useCustomTheme } from \"@coral-xyz/themes\";\nimport { Typography } from \"@mui/material\";\nimport type { BigNumber } from \"ethers\";\nconst useStyles = styles((theme: CustomTheme) => ({\n  leftLabel: {\n    color: theme.custom.colors.fontColor,\n    fontSize: \"16px\",\n    lineHeight: \"16px\",\n    fontWeight: 500,\n  },\n  rightLabel: {\n    fontWeight: 500,\n    fontSize: \"12px\",\n    lineHeight: \"16px\",\n    color: theme.custom.colors.fontColor,\n  },\n  wrapper: {\n    fontWeight: 500,\n    fontSize: \"12px\",\n    lineHeight: \"16px\",\n    color: theme.custom.colors.fontColor,\n  },\n  clickable: {\n    cursor: \"pointer\",\n    \"&:hover\": {\n      color: theme.custom.colors.primaryButton,\n    },\n  },\n}));\n\nexport function TextFieldLabel({\n  leftLabel,\n  rightLabel,\n  rightLabelComponent,\n  style,\n}: {\n  leftLabel: string;\n  rightLabel?: string;\n  rightLabelComponent?: React.ReactNode;\n  style?: any;\n}) {\n  const classes = useStyles();\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        marginBottom: \"8px\",\n        ...style,\n      }}\n    >\n      <Typography className={classes.leftLabel}>{leftLabel}</Typography>\n      {rightLabelComponent ? (\n        rightLabelComponent\n      ) : (\n        <Typography className={classes.rightLabel}>{rightLabel}</Typography>\n      )}\n    </div>\n  );\n}\n\nexport const MaxLabel = ({\n  amount,\n  onSetAmount,\n  decimals,\n}: {\n  amount: BigNumber | null;\n  onSetAmount: (amount: BigNumber) => void;\n  decimals: number;\n}) => {\n  const theme = useCustomTheme();\n  const classes = useStyles();\n  return (\n    <div\n      className={[\n        classes.wrapper,\n        amount && !amount.isZero() ? classes.clickable : \"\",\n      ].join(\" \")}\n      onClick={() => amount && onSetAmount(amount)}\n    >\n      <span style={{ color: theme.custom.colors.secondary }}>Max: </span>\n      {amount !== null ? toDisplayBalance(amount, decimals) : \"-\"}\n    </div>\n  );\n};\n","import { type MouseEvent, useCallback } from \"react\";\nimport { styles, useCustomTheme } from \"@coral-xyz/themes\";\nimport { CallMade, ChevronRight } from \"@mui/icons-material\";\nimport {\n  Divider,\n  List as MuiList,\n  ListItem as MuiListItem,\n} from \"@mui/material\";\n\nconst useStyles = styles((theme) => ({\n  settingsContentListItem: {\n    padding: \"8px\",\n    height: \"56px\",\n    display: \"flex\",\n    backgroundColor: `${theme.custom.colors.nav} !important`,\n  },\n  settingsContentListItemInverted: {\n    padding: \"8px\",\n    height: \"56px\",\n    display: \"flex\",\n    backgroundColor: `${theme.custom.colorsInverted.nav} !important`,\n    \"&:hover\": {\n      backgroundColor: `${theme.custom.colorsInverted.listItemHover} !important`,\n    },\n  },\n  dividerRoot: {\n    borderColor: \"transparent !important\",\n  },\n}));\n\nexport function List({ className, style, inverted, children }: any) {\n  const theme = useCustomTheme();\n  return (\n    <MuiList\n      className={className}\n      style={{\n        color: inverted\n          ? theme.custom.colorsInverted.fontColor\n          : theme.custom.colors.fontColor,\n        padding: 0,\n        marginLeft: \"16px\",\n        marginRight: \"16px\",\n        borderRadius: \"8px\",\n        ...style,\n      }}\n    >\n      {children}\n    </MuiList>\n  );\n}\n\nexport function ListItem({\n  style,\n  children,\n  isFirst,\n  isLast,\n  id,\n  disableBottomBorder = undefined,\n  onClick = undefined,\n  button = true,\n  borderColor,\n  detail,\n  inverted,\n  classes,\n  allowOnclickPropagation,\n}: any) {\n  const _classes = useStyles();\n  const theme = useCustomTheme();\n  const buttonProps = button ? { disableRipple: true } : {};\n  const handleClick = useCallback(\n    (ev: MouseEvent<HTMLDivElement>) => {\n      if (!allowOnclickPropagation) {\n        ev.preventDefault();\n      }\n      onClick?.(ev);\n    },\n    [onClick]\n  );\n\n  return (\n    <>\n      <MuiListItem\n        {...buttonProps}\n        data-testid={id}\n        button={button}\n        className={\n          inverted\n            ? _classes.settingsContentListItemInverted\n            : _classes.settingsContentListItem\n        }\n        onClick={handleClick}\n        style={{\n          ...isFirstLastListItemStyle(isFirst, isLast),\n          ...style,\n        }}\n        classes={classes}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            flex: 1,\n          }}\n        >\n          {children}\n        </div>\n        {detail}\n      </MuiListItem>\n      {!isLast && !disableBottomBorder ? <Divider\n        style={{\n            backgroundColor: borderColor\n              ? borderColor\n              : theme.custom.colors.border,\n            height: \"1px\",\n          }}\n        classes={{ root: _classes.dividerRoot }}\n        /> : null}\n    </>\n  );\n}\n\nexport function PushDetail({ style }: { style?: React.CSSProperties }) {\n  const theme = useCustomTheme();\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n      }}\n    >\n      <ChevronRight\n        style={{\n          color: theme.custom.colors.icon,\n          ...style,\n        }}\n      />\n    </div>\n  );\n}\n\nexport function LaunchDetail({ style }: { style?: React.CSSProperties }) {\n  const theme = useCustomTheme();\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        ...style,\n      }}\n    >\n      <CallMade\n        style={{\n          color: theme.custom.colors.icon,\n        }}\n      />\n    </div>\n  );\n}\n\n// Styles to properly highlight list item cells with rounded corners.\n// This is a total hack and presumably there's a better way to do this\n// with MUI.\nexport function isFirstLastListItemStyle(\n  isFirst: boolean,\n  isLast: boolean,\n  borderRadius?: number\n) {\n  const radius = `${borderRadius ?? 8}px`;\n  return {\n    borderTopLeftRadius: isFirst ? radius : 0,\n    borderTopRightRadius: isFirst ? radius : 0,\n    borderBottomLeftRadius: isLast ? radius : 0,\n    borderBottomRightRadius: isLast ? radius : 0,\n  };\n}\n","import type { CustomTheme } from \"@coral-xyz/themes\";\nimport { styles } from \"@coral-xyz/themes/\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nconst useStyles = styles((theme: CustomTheme) => ({\n  circle: {\n    stroke: \"url(#linearColors)\",\n  },\n  loadingContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    height: \"100%\",\n  },\n  loadingIndicator: {\n    display: \"block\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    color:\n      \"linear-gradient(113.94deg, #3EECB8 15.93%, #A372FE 58.23%, #FE7D4A 98.98%)\",\n  },\n}));\n\nexport function Loading(props: any) {\n  const classes = useStyles();\n  return (\n    <div style={props.style} className={classes.loadingContainer}>\n      <>\n        <svg style={{ position: \"fixed\" }}>\n          <linearGradient id=\"linearColors\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n            <stop offset=\"15.93%\" stopColor=\"#3EECB8\" />\n            <stop offset=\"58.23%\" stopColor=\"#A372FE\" />\n            <stop offset=\"98.98%\" stopColor=\"#FE7D4A\" />\n          </linearGradient>\n        </svg>\n        <CircularProgress\n          size={props.size ?? 48}\n          className={classes.loadingIndicator}\n          style={props.iconStyle}\n          thickness={props.thickness ?? 4}\n          classes={{ circle: classes.circle }}\n        />\n      </>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { getImage, LocalImageManager } from \"@coral-xyz/db\";\n\nimport { ProxyImage } from \"./ProxyImage\";\n\nexport const LocalImage = (props) => {\n  const [imageUrl, setImageUrl] = useState(props.src);\n\n  const fetchData = async (src) => {\n    if (src) {\n      try {\n        const parsedEl = await getImage(\"images\", `image-${src}`);\n        if (parsedEl) {\n          LocalImageManager.getInstance().addToQueue({\n            image: src,\n          });\n        }\n        setImageUrl(parsedEl?.url || src);\n      } catch (e) {\n        setImageUrl(src);\n      }\n    }\n  };\n  useEffect(() => {\n    fetchData(props.src);\n  }, [props.src]);\n\n  return (\n    <ProxyImage\n      src={imageUrl}\n      onClick={props.onClick}\n      alt={props.alt}\n      className={props.className}\n      style={props.style}\n      loadingStyles={props.loadingStyles}\n      size={props.size}\n    />\n  );\n};\n","import type {\n  CustomTheme} from \"@coral-xyz/themes\";\nimport {\n  HOVER_OPACITY,\n  styles,\n  useCustomTheme,\n} from \"@coral-xyz/themes\";\n\nimport { PrimaryButton } from \"./PrimaryButton\";\n\nconst useStyles = styles((theme: CustomTheme) => ({\n  negativeButton: {\n    \"&:hover\": {\n      opacity: HOVER_OPACITY,\n      background: `${theme.custom.colors.negative} !important`,\n      backgroundColor: `${theme.custom.colors.negative} !important,`,\n    },\n  },\n}));\n\nexport function NegativeButton({ label, onClick, ...buttonProps }: any) {\n  const classes = useStyles();\n  const theme = useCustomTheme();\n  return (\n    <PrimaryButton\n      className={classes.negativeButton}\n      label={label}\n      onClick={onClick}\n      style={{\n        backgroundColor: theme.custom.colors.negative,\n      }}\n      buttonLabelStyle={{\n        color: theme.custom.colors.negativeButtonTextColor,\n      }}\n      {...buttonProps}\n    />\n  );\n}\n","import type { CustomTheme } from \"@coral-xyz/themes\";\nimport { HOVER_OPACITY, styles, useCustomTheme } from \"@coral-xyz/themes\";\nimport { Button, Typography } from \"@mui/material\";\n\nconst useStyles = styles((theme: CustomTheme) => ({\n  button: {\n    width: \"100%\",\n    height: \"48px\",\n    borderRadius: \"12px\",\n    backgroundColor: theme.custom.colors.primaryButton,\n    \"&.Mui-disabled\": {\n      opacity: 0.5,\n      backgroundColor: theme.custom.colors.primaryButton,\n    },\n    \"&:hover\": {\n      backgroundColor: theme.custom.colors.primaryButton,\n    },\n  },\n  primaryButton: {\n    \"&:hover\": {\n      opacity: HOVER_OPACITY,\n      background: `${theme.custom.colors.primaryButton} !important`,\n      backgroundColor: `${theme.custom.colors.primaryButton} !important,`,\n    },\n  },\n  secondaryButton: {\n    color: `${theme.custom.colors.secondaryButtonTextColor} !important`,\n    backgroundColor: `${theme.custom.colors.secondaryButton} !important`,\n    \"&:hover\": {\n      opacity: HOVER_OPACITY,\n      background: `${theme.custom.colors.secondaryButton} !important`,\n      backgroundColor: `${theme.custom.colors.secondaryButton} !important,`,\n    },\n  },\n}));\n\nexport function PrimaryButton({\n  buttonLabelStyle,\n  label,\n  className,\n  invert,\n  ...buttonProps\n}: {\n  buttonLabelStyle?: React.CSSProperties;\n  label?: string | React.ReactNode;\n  invert?: boolean;\n} & React.ComponentProps<typeof Button>) {\n  const theme = useCustomTheme();\n  const classes = useStyles();\n  return (\n    <Button\n      disableRipple\n      disableElevation\n      className={`${classes.button} ${\n        className ?? (invert ? classes.secondaryButton : classes.primaryButton)\n      }`}\n      variant=\"contained\"\n      {...buttonProps}\n      style={{\n        backgroundColor: theme.custom.colors.primaryButton,\n        color: theme.custom.colors.primaryButtonTextColor,\n        fontWeight: 500,\n        fontSize: \"16px\",\n        lineHeight: \"24px\",\n        textTransform: \"none\",\n        ...buttonProps.style,\n      }}\n    >\n      <Typography\n        style={{\n          fontWeight: 600,\n          ...buttonLabelStyle,\n        }}\n        className={classes.buttonLabel}\n      >\n        {label}\n      </Typography>\n    </Button>\n  );\n}\n","import React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { externalResourceUri, proxyImageUrl } from \"@coral-xyz/common\";\nimport { Skeleton } from \"@mui/material\";\n\ntype ImgProps = React.DetailedHTMLProps<\n  React.ImgHTMLAttributes<HTMLImageElement>,\n  HTMLImageElement\n>;\nexport const ProxyImage = React.memo(function ProxyImage({\n  removeOnError,\n  loadingStyles,\n  size,\n  original,\n  ...imgProps\n}: {\n  removeOnError?: boolean;\n  loadingStyles?: React.CSSProperties;\n  size?: number;\n  original?: boolean;\n} & ImgProps) {\n  const placeholderRef = useRef<HTMLSpanElement>(null);\n  const imageRef = useRef<HTMLImageElement>(null);\n  const [errCount, setErrCount] = useState(0);\n\n  useLayoutEffect(() => {\n    if (imageRef.current?.complete) {\n      imageRef.current.style.position = \"inherit\";\n      imageRef.current.style.top = \"inherit\";\n      imageRef.current.style.visibility = \"visible\";\n      if (placeholderRef.current) {\n        placeholderRef.current.style.display = \"none\";\n      }\n    }\n  }, []);\n\n  const visuallyHidden: React.CSSProperties = {\n    position: \"absolute\",\n    top: \"0px\",\n    visibility: \"hidden\",\n  };\n\n  useEffect(() => {\n    // This is a hack since `onLoad` does not fire sometimes.\n    // This timeout makes the skeleton goes away.\n    setTimeout(() => {\n      if (placeholderRef.current) {\n        placeholderRef.current.style.display = \"none\";\n        if (imageRef.current) {\n          imageRef.current.style.position =\n            imgProps?.style?.position ?? \"inherit\";\n          /// @ts-ignore\n          imageRef.current.style.top = imgProps?.style?.top ?? \"inherit\";\n          imageRef.current.style.visibility = \"visible\";\n        }\n      }\n    }, 2000);\n  }, []);\n\n  return (\n    <>\n      {imgProps.src ? (\n        <Skeleton\n          style={{\n            height: \"100%\",\n            width: \"100%\",\n            transform: \"none\",\n            transformOrigin: \"none\",\n            ...(imgProps.style ?? {}),\n            ...(loadingStyles ?? {}),\n          }}\n          ref={placeholderRef}\n          className={imgProps.className}\n        />\n      ) : null}\n      {imgProps.src ? (\n        <img\n          loading=\"lazy\"\n          ref={imageRef}\n          {...imgProps}\n          style={{\n            ...(imgProps.style ?? {}),\n            ...visuallyHidden,\n          }}\n          alt=\"\"\n          onLoad={(...e) => {\n            const image = e[0].target as HTMLImageElement;\n            if (placeholderRef.current) {\n              placeholderRef.current.style.display = \"none\";\n            }\n            image.style.position = imgProps?.style?.position ?? \"inherit\";\n            /// @ts-ignore\n            image.style.top = imgProps?.style?.top ?? \"inherit\";\n            image.style.visibility = \"visible\";\n          }}\n          onError={(...e) => {\n            setErrCount((count) => {\n              if (count >= 1) {\n                if (removeOnError && placeholderRef.current) {\n                  placeholderRef.current.style.display = \"none\";\n                }\n              } else {\n                if (imageRef.current) imageRef.current.src = imgProps.src ?? \"\";\n              }\n              return count + 1;\n            });\n          }}\n          src={\n            original\n              ? externalResourceUri(imgProps.src, { cached: true })\n              : proxyImageUrl(imgProps.src ?? \"\", size)\n          }\n        />\n      ) : (\n        <Skeleton\n          style={{\n            height: \"100%\",\n            width: \"100%\",\n            transform: \"none\",\n            transformOrigin: \"none\",\n            ...(imgProps.style ?? {}),\n            ...(loadingStyles ?? {}),\n          }}\n          className={imgProps.className}\n        />\n      )}\n    </>\n  );\n});\n","import { styles, useCustomTheme } from \"@coral-xyz/themes\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\n\nimport { TextInput } from \"./Inputs\";\n\nexport const useStyles = styles((theme) => ({\n  searchField: {\n    marginTop: \"10px\",\n    marginBottom: \"16px\",\n    width: \"inherit\",\n    display: \"flex\",\n    \"& .MuiOutlinedInput-root\": {\n      \"& input\": {\n        paddingTop: 0,\n        paddingBottom: 0,\n      },\n      \"& fieldset\": {\n        border: `${theme.custom.colors.borderFull} !important`,\n      },\n    },\n  },\n}));\n\nexport const SearchBox = ({\n  onChange,\n  placeholder,\n  searchFilter,\n  setSearchFilter,\n}: {\n  onChange: any;\n  placeholder?: string;\n  searchFilter: string;\n  setSearchFilter: any;\n}) => {\n  const classes = useStyles();\n  const theme = useCustomTheme();\n\n  return (\n    <TextInput\n      className={classes.searchField}\n      placeholder={placeholder ?? \"Enter a username or address\"}\n      value={searchFilter}\n      startAdornment={\n        <InputAdornment position=\"start\">\n          <SearchIcon style={{ color: theme.custom.colors.icon }} />\n        </InputAdornment>\n      }\n      setValue={async (e) => {\n        const prefix = e.target.value;\n        setSearchFilter(prefix);\n        onChange(prefix);\n      }}\n      inputProps={{\n        style: {\n          height: \"48px\",\n        },\n      }}\n    />\n  );\n};\n","import type {\n  CustomTheme} from \"@coral-xyz/themes\";\nimport {\n  HOVER_OPACITY,\n  styles,\n  useCustomTheme,\n} from \"@coral-xyz/themes\";\nimport type { Button } from \"@mui/material\";\n\nimport { PrimaryButton } from \"./PrimaryButton\";\n\nconst useStyles = styles((theme: CustomTheme) => ({\n  secondaryButton: {},\n}));\n\nexport function SecondaryButton({\n  buttonLabelStyle,\n  label,\n  ...buttonProps\n}: {\n  buttonLabelStyle?: React.CSSProperties;\n  label?: string;\n} & React.ComponentProps<typeof Button>) {\n  const classes = useStyles();\n  const theme = useCustomTheme();\n  const buttonStyle = {\n    backgroundColor: theme.custom.colors.secondaryButton,\n    color: theme.custom.colors.secondaryButtonTextColor,\n    ...buttonProps.style,\n  };\n  return (\n    <PrimaryButton\n      className={classes.secondaryButton}\n      buttonLabelStyle={buttonLabelStyle}\n      label={label}\n      {...buttonProps}\n      style={buttonStyle}\n    />\n  );\n}\n","import type { CustomTheme } from \"@coral-xyz/themes\";\nimport { HOVER_OPACITY, styles, useCustomTheme } from \"@coral-xyz/themes\";\n\nimport { PrimaryButton } from \"./PrimaryButton\";\n\nconst useStyles = styles((theme: CustomTheme) => ({\n  successButton: {\n    \"&:hover\": {\n      opacity: HOVER_OPACITY,\n      background: `${theme.custom.colors.successButton} !important`,\n      backgroundColor: `${theme.custom.colors.successButton} !important,`,\n    },\n  },\n}));\n\nexport function SuccessButton({ label, onClick, ...buttonProps }: any) {\n  const classes = useStyles();\n  const theme = useCustomTheme();\n\n  return (\n    <PrimaryButton\n      className={classes.successButton}\n      label={label}\n      onClick={onClick}\n      buttonLabelStyle={{\n        color: theme.custom.colors.negativeButtonTextColor,\n      }}\n      {...buttonProps}\n      style={{\n        backgroundColor: theme.custom.colors.positive,\n        ...(buttonProps.style || {}),\n      }}\n    />\n  );\n}\n","import type { CSSProperties, MouseEvent } from \"react\";\nimport { styles } from \"@coral-xyz/themes\";\n\nconst useStyles = styles((theme) => ({\n    userRequestText: {\n        color: theme.custom.colors.textPlaceholder,\n    },\n}));\n\n\nexport function UserAction({\n  text,\n  onClick,\n  style,\n}: {\n  text: string;\n  onClick: (ev: MouseEvent) => void;\n  style?: CSSProperties;\n}) {\n  const classes = useStyles();\n  return (\n    <div\n      className={classes.userRequestText}\n      style={{\n        height: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        fontSize: \"14px\",\n        ...style,\n      }}\n      onClick={onClick}\n    >\n      {text}\n    </div>\n  );\n}\n","import { useCustomTheme } from \"@coral-xyz/themes\";\n\nimport { LocalImage } from \"./LocalImage\";\n\nexport function UserIcon({ image, size, marginRight }: any) {\n  // TODO(mui)\n  const theme = useCustomTheme();\n  return (\n    <LocalImage\n      size={size || 44}\n      src={image}\n      style={{\n        width: size || 44,\n        height: size || 44,\n        borderRadius: (size || 44) / 2,\n        marginRight: marginRight || \"8px\",\n        color: theme.custom.colors.positive,\n      }}\n    />\n  );\n}\n","export * from \"./BackpackStaffIcon\";\nexport * from \"./BubbleTopLabel\";\nexport * from \"./DangerButton\";\nexport * from \"./EmptyState\";\nexport * from \"./Inputs\";\nexport * from \"./Labels\";\nexport * from \"./List\";\nexport * from \"./Loading\";\nexport * from \"./LocalImage\";\nexport * from \"./NegativeButton\";\nexport * from \"./PrimaryButton\";\nexport * from \"./ProxyImage\";\nexport * from \"./SearchBox\";\nexport * from \"./SecondaryButton\";\nexport * from \"./SuccessButton\";\nexport * from \"./UserIcon\";\nexport * from \"./UserAction\"\n","import type { ReactNode } from \"react\";\nimport { useMemo } from \"react\";\nimport { darkTheme, lightTheme } from \"@coral-xyz/themes\";\nimport { CssBaseline, StyledEngineProvider } from \"@mui/material\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { ThemeProvider as OldThemeProvider } from \"@mui/styles\";\n\nexport const WithThemeInner = ({\n  children,\n  isDarkMode,\n}: {\n  children: ReactNode;\n  isDarkMode: boolean;\n}) => {\n  const [theme, rawTheme] = useMemo(() => {\n    const rawTheme = isDarkMode ? darkTheme : lightTheme;\n    const theme = createTheme(rawTheme as any, { custom: rawTheme.custom });\n    return [theme, rawTheme];\n  }, [isDarkMode]);\n  return (\n    <StyledEngineProvider injectFirst>\n      <OldThemeProvider theme={rawTheme}>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          {children}\n        </ThemeProvider>\n      </OldThemeProvider>\n    </StyledEngineProvider>\n  );\n};\n","export * from \"./WithTheme\";\n","import { useCustomTheme } from \"@coral-xyz/themes\";\nimport CheckIcon from \"@mui/icons-material/Check\";\n\nexport const Success = ({ title, body }: { title: string; body: string }) => {\n  const theme = useCustomTheme();\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        borderRadius: 12,\n        paddingRight: 20,\n        paddingTop: 5,\n      }}\n    >\n      <div style={{ paddingRight: 15 }}>\n        <div\n          style={{\n            width: 50,\n            height: 50,\n            borderRadius: 25,\n            background: \"#F1FFEF\",\n            display: \"flex\",\n            justifyContent: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n            }}\n          >\n            <CheckIcon style={{ color: \"#11A800\" }} />\n          </div>\n        </div>\n      </div>\n      <div>\n        <div\n          style={{\n            fontWeight: 600,\n            fontSize: 16,\n            color: theme.custom.colors.fontColor2,\n          }}\n        >\n          {title}\n        </div>\n        <div style={{ color: theme.custom.colors.fontColor3, fontSize: 14 }}>\n          {body}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { toast as toastLibrary } from \"react-toastify\";\n\nimport { Success } from \"./Success\";\n\nexport const toast = {\n  success: (title, body) => {\n    toastLibrary(<Success title={title} body={body} />, {\n      position: \"top-center\",\n      hideProgressBar: true,\n    });\n  },\n};\n","export { useBreakpoints } from \"@coral-xyz/recoil\";\n","export * from \"./components/base\";\nexport * from \"./components/Icon\";\nexport * from \"./components/mui\";\nexport * from \"./components/toasts\";\nexport * from \"./hooks\";\n","import { atomFamily } from \"recoil\";\n\ntype NewAvatar = {\n  url: string;\n  id: string;\n};\ntype Username = string;\n/**\n * Store updated Avatar data\n */\nexport const newAvatarAtom = atomFamily<NewAvatar | null, Username>({\n  key: \"newAvatarAtom\",\n  default: null,\n});\n","import { Blockchain } from \"@coral-xyz/common\";\nimport { selector, selectorFamily } from \"recoil\";\n\nimport type { TokenDataWithBalance, TokenDataWithPrice } from \"../types\";\n\nimport {\n  ethereumTokenBalance,\n  ethereumTokenNativeBalance,\n} from \"./ethereum/token\";\nimport { ethereumTokenMetadata } from \"./ethereum/token-metadata\";\nimport {\n  solanaFungibleTokenAccountKeys,\n  solanaFungibleTokenBalance,\n  solanaFungibleTokenNativeBalance,\n} from \"./solana/token\";\nimport { allWalletsDisplayed } from \"./wallet\";\n\n/**\n * Return token balances sorted by usd notional balances.\n */\nexport const blockchainBalancesSorted = selectorFamily<\n  Array<TokenDataWithPrice>,\n  { publicKey: string; blockchain: Blockchain }\n>({\n  key: \"blockchainBalancesSorted\",\n  get:\n    ({ publicKey, blockchain }) =>\n    ({ get }) => {\n      const tokenAddresses = get(\n        blockchainTokenAddresses({ publicKey, blockchain })\n      );\n      const tokenData = tokenAddresses\n        .map(\n          (tokenAddress) =>\n            get(\n              blockchainTokenData({\n                publicKey,\n                tokenAddress,\n                blockchain,\n              })\n            )!\n        )\n        .filter(Boolean);\n      return tokenData.sort((a, b) => b.usdBalance - a.usdBalance);\n    },\n});\n\n/**\n * Return native token balances (without their price information)\n */\nexport const blockchainNativeBalances = selectorFamily<\n  Array<TokenDataWithBalance>,\n  { blockchain: Blockchain; publicKey: string }\n>({\n  key: \"blockchainNativeBalances\",\n  get:\n    ({ blockchain, publicKey }) =>\n    ({ get }) => {\n      const tokenAddresses = get(\n        blockchainTokenAddresses({ publicKey, blockchain })\n      );\n      return tokenAddresses\n        .map(\n          (tokenAddress) =>\n            get(\n              blockchainTokenNativeData({\n                publicKey,\n                tokenAddress,\n                blockchain,\n              })\n            )!\n        )\n        .filter(Boolean);\n    },\n});\n\n/**\n * Returns token balances but not the price information for a given token address and blockchain.\n */\nexport const blockchainTokenNativeData = selectorFamily<\n  TokenDataWithBalance | null,\n  { publicKey: string; tokenAddress: string; blockchain: Blockchain }\n>({\n  key: \"blockchainTokenNativeData\",\n  get:\n    ({ publicKey, tokenAddress, blockchain }) =>\n    ({ get }) => {\n      switch (blockchain) {\n        case Blockchain.SOLANA:\n          return get(\n            solanaFungibleTokenNativeBalance({ tokenAddress, publicKey })\n          );\n        case Blockchain.ETHEREUM:\n          return get(ethereumTokenNativeBalance({ tokenAddress, publicKey }));\n        default:\n          throw new Error(`unsupported blockchain: ${blockchain}`);\n      }\n    },\n});\n\n/**\n * Returns token balance and pricing data for a given token address and blockchain.\n */\nexport const blockchainTokenData = selectorFamily<\n  TokenDataWithPrice | null,\n  { publicKey: string; tokenAddress: string; blockchain: Blockchain }\n>({\n  key: \"blockchainTokenData\",\n  get:\n    ({ publicKey, tokenAddress, blockchain }) =>\n    ({ get }) => {\n      switch (blockchain) {\n        case Blockchain.SOLANA:\n          return get(solanaFungibleTokenBalance({ publicKey, tokenAddress }));\n        case Blockchain.ETHEREUM:\n          return get(ethereumTokenBalance({ publicKey, tokenAddress }));\n        default:\n          throw new Error(`unsupported blockchain: ${blockchain}`);\n      }\n    },\n});\n\n/**\n * Selects a blockchain token list based on a network string.\n */\nexport const blockchainTokenAddresses = selectorFamily<\n  Array<string>,\n  { publicKey: string; blockchain: Blockchain }\n>({\n  key: \"blockchainTokenAddresses\",\n  get:\n    ({ publicKey, blockchain }) =>\n    ({ get }) => {\n      switch (blockchain) {\n        case Blockchain.SOLANA:\n          return get(solanaFungibleTokenAccountKeys(publicKey));\n        case Blockchain.ETHEREUM:\n          const ethTokenMetadata = get(ethereumTokenMetadata)();\n          return ethTokenMetadata\n            ? [...ethTokenMetadata.values()].map((t) => t.address)\n            : [];\n        default:\n          throw new Error(`unsupported blockchain: ${blockchain}`);\n      }\n    },\n});\n\n/**\n * Total asset balance in USD, change in USD, and percent change for a given blockchain.\n */\nexport const blockchainTotalBalance = selectorFamily<\n  { totalBalance: number; totalChange: number; percentChange: number },\n  { publicKey: string; blockchain: Blockchain }\n>({\n  key: \"blockchainTotalBalance\",\n  get:\n    ({ publicKey, blockchain }) =>\n    ({ get }) => {\n      const tokens = get(\n        blockchainBalancesSorted({ publicKey, blockchain })\n      ).filter((t) => t.usdBalance && t.recentUsdBalanceChange);\n      const totalBalance = tokens\n        .map((t) => t.usdBalance)\n        .reduce((a, b) => a + b, 0);\n      const totalChange = tokens\n        .map((t) => t.recentUsdBalanceChange)\n        .reduce((a, b) => a + b, 0);\n      const oldBalance = totalBalance - totalChange;\n      const percentChange = (totalChange / oldBalance) * 100;\n      return {\n        totalBalance: parseFloat(totalBalance.toFixed(2)),\n        totalChange: parseFloat(totalChange.toFixed(2)),\n        percentChange: parseFloat(percentChange.toFixed(2)),\n      };\n    },\n});\n\n/**\n * Total asset balance in USD, change in USD, and percent change for all blockchains.\n */\nexport const totalBalance = selector<{\n  totalBalance: number;\n  totalChange: number;\n  percentChange?: number;\n}>({\n  key: \"totalBalance\",\n  get: ({ get }) => {\n    const wallets = get(allWalletsDisplayed);\n    const totals = wallets.reduce(\n      (\n        acc: { totalBalance: number; totalChange: number },\n        wallet: { publicKey: string; blockchain: Blockchain }\n      ) => {\n        const { publicKey, blockchain } = wallet;\n        const total = get(blockchainTotalBalance({ publicKey, blockchain }));\n        return {\n          totalBalance: acc.totalBalance + total.totalBalance,\n          totalChange: acc.totalChange + total.totalChange,\n        };\n      },\n      {\n        totalBalance: 0.0,\n        totalChange: 0.0,\n      }\n    );\n    const oldBalance = totals.totalBalance - totals.totalChange;\n    const percentChange = (totals.totalChange / oldBalance) * 100;\n    return {\n      totalBalance: parseFloat(totals.totalBalance.toFixed(2)),\n      totalChange: parseFloat(totals.totalChange.toFixed(2)),\n      percentChange: parseFloat(percentChange.toFixed(2)),\n    };\n  },\n});\n","import { UI_RPC_METHOD_NAVIGATION_READ_URL } from \"@coral-xyz/common\";\nimport { atom, selector } from \"recoil\";\n\nimport { backgroundClient } from \"./client\";\n\n// Version of bootstrap for very fast data on load. This shouldn't block the load\n// in any discernable way and can be called on initial load, regardless of the app\n// being locked or unlocked.\nexport const bootstrapFast = atom<string>({\n  key: \"bootstrapFast\",\n  default: selector({\n    key: \"bootstrapFastDefault\",\n    get: async ({ get }) => {\n      const bg = get(backgroundClient);\n      const url = await bg.request({\n        method: UI_RPC_METHOD_NAVIGATION_READ_URL,\n        params: [],\n      });\n      return url;\n    },\n  }),\n});\n\n/**\n * This is fetched once on loading the app for the initial url redirect\n * and is otherwise ignored.\n */\nexport const navCurrentUrl = atom<string>({\n  key: \"navigationState\",\n  default: selector({\n    key: \"navigationStateDefault\",\n    get: ({ get }: any) => {\n      return get(bootstrapFast);\n    },\n  }),\n});\n","import type {\n  ChannelAppUiClient,\n  ChannelAppUiResponder,\n} from \"@coral-xyz/common\";\nimport {\n  CHANNEL_ETHEREUM_CONNECTION_RPC_UI,\n  CHANNEL_POPUP_RESPONSE,\n  CHANNEL_POPUP_RPC,\n  CHANNEL_SOLANA_CONNECTION_RPC_UI,\n  ChannelAppUi,\n} from \"@coral-xyz/common\";\nimport { atom, selector } from \"recoil\";\n\n/**\n * Allows the app ui to send requests to the background script.\n * This is the primary way the UI communicates with the background.\n */\nexport const backgroundClient = atom<ChannelAppUiClient>({\n  key: \"backgroundClient\",\n  default: ChannelAppUi.client(CHANNEL_POPUP_RPC),\n});\n\n/**\n * Allows the app ui to respond to requests to the background script.\n * This only happens when a third party web app requests permission\n * from the app for something.\n */\nexport const backgroundResponder = atom<ChannelAppUiResponder>({\n  key: \"backgroundResponseClient\",\n  default: ChannelAppUi.responder(CHANNEL_POPUP_RESPONSE),\n});\n\n/**\n * Channel for proxying Solana Connection requests to be fulfilled by\n * the background.\n */\nexport const connectionBackgroundClient = selector({\n  key: \"connectionBackgroundClient\",\n  get: () => {\n    return ChannelAppUi.client(CHANNEL_SOLANA_CONNECTION_RPC_UI);\n  },\n});\n\n/**\n * Channel for proxying Ethereum provider requests to be fulfilled by\n * the background.\n */\nexport const providerBackgroundClient = selector({\n  key: \"providerBackgroundClient\",\n  get: () => {\n    return ChannelAppUi.client(CHANNEL_ETHEREUM_CONNECTION_RPC_UI);\n  },\n});\n","export * from \"./nft\";\nexport * from \"./preferences\";\nexport * from \"./provider\";\nexport * from \"./token\";\nexport * from \"./token-metadata\";\n","import type { EthereumNft, Nft, NftCollection } from \"@coral-xyz/common\";\nimport {\n  Blockchain,\n  EthereumConnectionUrl,\n  externalResourceUri,\n} from \"@coral-xyz/common\";\nimport { selectorFamily } from \"recoil\";\n\nimport { equalSelectorFamily } from \"../../equals\";\nimport { allWallets } from \"../wallet\";\n\nimport { ethereumConnectionUrl } from \"./preferences\";\n\nconst ethereumNftCollections = selectorFamily<\n  { collections: Map<string, NftCollection>; nfts: Map<string, Nft> },\n  { publicKey: string; connectionUrl: string }\n>({\n  key: \"ethereumNftCollections\",\n  get:\n    ({ publicKey, connectionUrl }) =>\n    async ({ get }) => {\n      const wallet = get(allWallets).find((w) => w.publicKey === publicKey);\n      if (!wallet) {\n        return {\n          collections: new Map(),\n          nfts: new Map(),\n        };\n      }\n\n      const url = `${EthereumConnectionUrl.MAINNET}/nft/getNFTs?owner=${wallet.publicKey}`;\n      const response = await fetch(url);\n      const data = await response.json();\n\n      const collections: Map<string, NftCollection> = new Map();\n      const nfts: Map<string, Nft> = new Map();\n\n      for (const nft of data.ownedNfts) {\n        if (!nft.contractMetadata) continue;\n        const collectionId = nft.contract.address;\n        const collection = collections.get(collectionId);\n        if (!collection) {\n          collections.set(collectionId, {\n            id: collectionId,\n            metadataCollectionId: collectionId,\n            symbol: nft.contractMetadata.symbol,\n            tokenType: nft.contractMetadata.tokenType,\n            totalSupply: nft.contractMetadata.totalSupply,\n            itemIds: [],\n          });\n        }\n        const c = collections.get(collectionId)!;\n        // Token ID is not unique so prepend with contract address\n        const id = `${nft.contract.address}/${nft.id.tokenId}`;\n        c.itemIds.push(id);\n\n        nfts.set(id, {\n          id,\n          blockchain: Blockchain.ETHEREUM,\n          tokenId: nft.id.tokenId,\n          contractAddress: nft.contract.address,\n          name: nft.metadata.name || nft.contractMetadata.name,\n          description: nft.metadata.description,\n          externalUrl: externalResourceUri(nft.metadata.external_url),\n          imageUrl:\n            externalResourceUri(nft.metadata.image) ||\n            externalResourceUri(nft.metadata.image_url),\n          attributes:\n            Array.isArray(nft.metadata.attributes) &&\n            nft.metadata.attributes.map(\n              (a: { trait_type: string; value: string }) => ({\n                traitType: a.trait_type,\n                value: a.value,\n              })\n            ),\n\n          collectionName: nft.contractMetadata.name,\n        });\n      }\n\n      return { collections, nfts };\n    },\n});\n\nexport const ethereumWalletCollections = selectorFamily<\n  {\n    publicKey: string;\n    collections: Array<NftCollection>;\n  },\n  { publicKey: string }\n>({\n  key: \"ethereumWalletCollections\",\n  get:\n    ({ publicKey }) =>\n    ({ get }) => {\n      const connectionUrl = get(ethereumConnectionUrl);\n      const { collections } = get(\n        ethereumNftCollections({ publicKey, connectionUrl })\n      );\n\n      return {\n        publicKey,\n        collections: [...collections.values()],\n      };\n    },\n});\n\nexport const ethereumNftById = equalSelectorFamily<\n  Nft,\n  { publicKey: string; connectionUrl: string; nftId: string }\n>({\n  key: \"nftById\",\n  get:\n    ({ publicKey, connectionUrl, nftId }) =>\n    ({ get }) => {\n      const { nfts } = get(\n        ethereumNftCollections({ publicKey, connectionUrl })\n      );\n      return nfts.get(nftId)!;\n    },\n  equals: (m1, m2) => JSON.stringify(m1) === JSON.stringify(m2),\n});\n","import { selector } from \"recoil\";\n\nimport { preferences } from \"../preferences\";\n\nexport const ethereumExplorer = selector<string>({\n  key: \"ethereumExplorer\",\n  get: async ({ get }) => {\n    const p = get(preferences);\n    return p.ethereum.explorer;\n  },\n});\n\n/**\n * URL to the network to communicate with.\n */\nexport const ethereumConnectionUrl = selector<string>({\n  key: \"ethereumConnectionUrl\",\n  get: async ({ get }) => {\n    const p = get(preferences);\n    return p.ethereum.connectionUrl;\n  },\n});\n\n/**\n * Chain ID of the network to communicate with.\n * Note that often this can be determined from the connection URL, but it\n * can also be independent, e.g. http://localhost:8545 may have any chain id.\n */\nexport const ethereumChainId = selector<string>({\n  key: \"ethereumChainId\",\n  get: async ({ get }) => {\n    const p = get(preferences);\n    return p.ethereum.chainId;\n  },\n});\n","import { BackgroundEthereumProvider } from \"@coral-xyz/common\";\nimport type { FeeData } from \"@ethersproject/abstract-provider\";\nimport { atom, selector } from \"recoil\";\n\nimport { providerBackgroundClient } from \"../client\";\n\nimport { ethereumChainId, ethereumConnectionUrl } from \"./preferences\";\n\nexport const ethersContext = selector({\n  key: \"ethersContext\",\n  get: ({ get }) => {\n    const connectionUrl = get(ethereumConnectionUrl);\n    const chainId = get(ethereumChainId);\n    const _providerBackgroundClient = get(providerBackgroundClient);\n    const provider = new BackgroundEthereumProvider(\n      _providerBackgroundClient,\n      connectionUrl,\n      chainId\n    );\n    return {\n      chainId,\n      connectionUrl,\n      provider,\n    };\n  },\n  // Ethers provider extends itself, there will be errors if this is disabled\n  dangerouslyAllowMutability: true,\n});\n\nexport const ethereumFeeData = atom<FeeData>({\n  key: \"ethereumFeeData\",\n  default: selector({\n    key: \"ethereumFeeDataDefault\",\n    get: ({ get }) => {\n      const { provider } = get(ethersContext);\n      return provider.getFeeData();\n    },\n  }),\n});\n","import { ETH_NATIVE_MINT, UniswapTokenList } from \"@coral-xyz/common\";\nimport { atom } from \"recoil\";\n\n// Ethereum token metadata\nexport const ethereumTokenMetadata = atom({\n  key: \"ethereumTokenData\",\n  default: () => {\n    const ETH_LOGO_URI =\n      \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png\";\n\n    const tokenMap: Map<string, any> = new Map(\n      UniswapTokenList.tokens.map((t: any) => {\n        return [t.address, t];\n      })\n    );\n    tokenMap.set(ETH_NATIVE_MINT, {\n      name: \"Ethereum\",\n      address: ETH_NATIVE_MINT,\n      chainId: 1,\n      decimals: 18,\n      symbol: \"ETH\",\n      logoURI: ETH_LOGO_URI,\n      extensions: {\n        coingeckoId: \"ethereum\",\n      },\n    });\n    return tokenMap;\n  },\n});\n","import {\n  ETH_NATIVE_MINT,\n  fetchEthereumTokenBalances,\n  toDisplayBalance,\n} from \"@coral-xyz/common\";\nimport type { TokenInfo } from \"@solana/spl-token-registry\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { atomFamily, selectorFamily } from \"recoil\";\n\nimport type { TokenDataWithBalance, TokenDataWithPrice } from \"../../types\";\nimport { ethereumPrice, pricesForErc20Addresses } from \"../prices\";\n\nimport { ethereumConnectionUrl } from \"./preferences\";\nimport { ethersContext } from \"./provider\";\nimport { ethereumTokenMetadata } from \"./token-metadata\";\n\n// Map of ETH native balance and all ERC20 balances\n// We use a dummy address for the ETH balance (zero address) so it can be\n// treated like an ERC20 in state.\nexport const ethereumBalances = atomFamily<\n  Map<string, BigNumber>,\n  { connectionUrl: string; publicKey: string }\n>({\n  key: \"ethereumBalances\",\n  default: selectorFamily({\n    key: \"ethereumBalancesDefault\",\n    get:\n      ({\n        connectionUrl,\n        publicKey,\n      }: {\n        connectionUrl: string;\n        publicKey: string;\n      }) =>\n      ({ get }: any) => {\n        const balanceMap = get(erc20Balances({ publicKey }));\n        // Add ETH balance at dummy address\n        balanceMap.set(ETH_NATIVE_MINT, get(ethBalance({ publicKey })));\n        return balanceMap;\n      },\n  }),\n});\n\n// Native ETH balance\nexport const ethBalance = atomFamily<BigNumber, { publicKey: string }>({\n  key: \"ethBalance\",\n  default: selectorFamily({\n    key: \"ethereumBalanceDefault\",\n    get:\n      ({ publicKey }) =>\n      ({ get }: any) => {\n        const provider = get(ethersContext).provider;\n        return provider.getBalance(publicKey);\n      },\n  }),\n});\n\n// ERC20 Token Balances\nexport const erc20Balances = selectorFamily<\n  Map<string, any>,\n  { publicKey: string }\n>({\n  key: \"erc20Balances\",\n  get:\n    ({ publicKey }) =>\n    async ({ get }: any) => {\n      const provider = get(ethersContext).provider;\n      return await fetchEthereumTokenBalances(provider, publicKey);\n    },\n});\n\nexport const ethereumTokenNativeBalance = selectorFamily<\n  TokenDataWithBalance | null,\n  { publicKey: string; tokenAddress: string }\n>({\n  key: \"ethereumTokenNativeBalance\",\n  get:\n    ({ publicKey, tokenAddress }) =>\n    ({ get }) => {\n      const contractAddress = tokenAddress;\n      const connectionUrl = get(ethereumConnectionUrl);\n      const ethTokenMetadata = get(ethereumTokenMetadata)();\n      const ethTokenBalances: Map<String, BigNumber> = get(\n        ethereumBalances({ connectionUrl, publicKey })\n      );\n\n      const tokenMetadata =\n        ethTokenMetadata!.get(contractAddress) ?? ({} as TokenInfo);\n      const { symbol: ticker, logoURI: logo, name, decimals } = tokenMetadata;\n\n      const nativeBalance = ethTokenBalances.get(contractAddress)\n        ? BigNumber.from(ethTokenBalances.get(contractAddress))\n        : BigNumber.from(0);\n      const displayBalance = toDisplayBalance(nativeBalance, decimals);\n\n      return {\n        name,\n        decimals,\n        nativeBalance,\n        displayBalance,\n        ticker,\n        logo,\n        address: contractAddress,\n      };\n    },\n});\n\nexport const ethereumTokenBalance = selectorFamily<\n  TokenDataWithPrice | null,\n  { publicKey: string; tokenAddress: string }\n>({\n  key: \"ethereumTokenBalance\",\n  get:\n    ({ publicKey, tokenAddress }) =>\n    ({ get }) => {\n      const contractAddress = tokenAddress;\n      const nativeTokenBalance = get(\n        ethereumTokenNativeBalance({ publicKey, tokenAddress })\n      );\n      if (!nativeTokenBalance) {\n        return null;\n      }\n\n      const price =\n        contractAddress === ETH_NATIVE_MINT\n          ? get(ethereumPrice)\n          : (get(pricesForErc20Addresses({ publicKey })).get(\n              contractAddress\n            ) as any);\n\n      const usdBalance =\n        (price?.usd ?? 0) *\n        parseFloat(\n          ethers.utils.formatUnits(\n            nativeTokenBalance.nativeBalance,\n            nativeTokenBalance.decimals\n          )\n        );\n\n      const recentPercentChange = parseFloat(\n        (price?.usd_24h_change ?? 0).toFixed(2)\n      );\n\n      const oldUsdBalance =\n        usdBalance === 0\n          ? 0\n          : usdBalance - usdBalance * (recentPercentChange / 100);\n\n      const recentUsdBalanceChange = usdBalance - oldUsdBalance;\n\n      return {\n        ...nativeTokenBalance,\n        usdBalance,\n        recentPercentChange,\n        recentUsdBalanceChange,\n        priceData: price,\n      };\n    },\n});\n","import type { FEATURE_GATES_MAP } from \"@coral-xyz/common\";\nimport {\n  buildFullFeatureGatesMap,\n  UI_RPC_METHOD_GET_FEATURE_GATES,\n} from \"@coral-xyz/common\";\nimport { selector } from \"recoil\";\n\nimport { equalAtom } from \"../equals\";\n\nimport { backgroundClient } from \"./client\";\n\nexport const featureGates = equalAtom<FEATURE_GATES_MAP>({\n  key: \"featureGates\",\n  default: selector({\n    key: \"featureGatesDefaults\",\n    get: async ({ get }) => {\n      const background = get(backgroundClient);\n      const response = await background.request({\n        method: UI_RPC_METHOD_GET_FEATURE_GATES,\n        params: [],\n      });\n      const gates = buildFullFeatureGatesMap(response);\n      return gates;\n    },\n  }),\n  equals: (m1, m2) => JSON.stringify(m1) === JSON.stringify(m2),\n});\n","import type {\n  CollectionChatData,\n  EnrichedMessage,\n  Friendship,\n  SubscriptionType,\n  UserMetadata,\n} from \"@coral-xyz/common\";\nimport { Blockchain, fetchFriendship } from \"@coral-xyz/common\";\nimport type { EnrichedInboxDb } from \"@coral-xyz/common/dist/esm/messages/db\";\nimport { getFriendshipByUserId } from \"@coral-xyz/db\";\nimport { atomFamily, selectorFamily } from \"recoil\";\n\nimport * as atoms from \"./preferences/index\";\n\nexport const friendship = atomFamily<Friendship | null, { userId: string }>({\n  key: \"friendship\",\n  default: selectorFamily({\n    key: \"friendshipDefault\",\n    get:\n      ({ userId }: { userId: string }) =>\n      async ({ get }: any) => {\n        const localUser = get(atoms.user);\n        if (!userId || !localUser.uuid) {\n          return null;\n        }\n        const friendship = await getFriendshipByUserId(localUser.uuid, userId);\n        if (friendship && friendship.friendshipId) {\n          return {\n            id: friendship.friendshipId,\n            areFriends: friendship.areFriends === 1 ? true : false,\n            blocked: friendship.blocked === 1 ? true : false,\n            requested: friendship.requested === 1 ? true : false,\n            spam: friendship.spam === 1 ? true : false,\n            remoteRequested: friendship.remoteRequested === 1 ? true : false,\n          };\n        }\n        try {\n          const json = await fetchFriendship({ userId });\n          return {\n            id: json.friendshipId,\n            areFriends: json.areFriends,\n            blocked: json.blocked,\n            requested: json.requested,\n            spam: json.spam,\n            remoteRequested: json.remoteRequested,\n          };\n        } catch (e) {\n          return null;\n        }\n      },\n  }),\n});\n\nexport const friendships = atomFamily<\n  EnrichedInboxDb[] | null | undefined,\n  { uuid: string }\n>({\n  key: \"friendships\",\n  default: selectorFamily({\n    key: \"friendshipsDefault\",\n    get:\n      ({ uuid }: { uuid: string }) =>\n      async ({ get }: any) => {\n        return [];\n      },\n  }),\n});\n\nexport const messageUnreadCount = atomFamily<number, { uuid: string }>({\n  key: \"messageUnreadCount\",\n  default: selectorFamily({\n    get:\n      ({ uuid }: { uuid: string }) =>\n      async ({ get }: any) => {\n        const activeChats = get(friendships({ uuid }));\n        const groupChats = get(groupCollections({ uuid }));\n        return (\n          (activeChats.filter((x) => (x.unread ? true : false))?.length || 0) +\n          (groupChats\n            .filter((x) => x.lastMessageUuid !== x.lastReadMessage)\n            .filter((x) => x.name && x.image).length || 0)\n        );\n      },\n    key: \"messageUnreadCountDefault\",\n  }),\n});\n\nexport const roomChats = atomFamily<\n  EnrichedMessage[] | null | undefined,\n  { uuid: string; room: string; type: SubscriptionType }\n>({\n  key: \"chats\",\n  default: selectorFamily({\n    key: \"chatsDefault\",\n    get:\n      ({\n        uuid,\n        room,\n        type,\n      }: {\n        uuid: string;\n        room: string;\n        type: SubscriptionType;\n      }) =>\n      async ({ get }: any) => {\n        return [];\n      },\n  }),\n});\n\nexport const requestCount = atomFamily<number, { uuid: string }>({\n  key: \"requestCount\",\n  default: selectorFamily({\n    key: \"requestCountDefault\",\n    get:\n      ({ uuid }: { uuid: string }) =>\n      async ({ get }: any) => {\n        return 0;\n      },\n  }),\n});\n\nexport const groupCollections = atomFamily<\n  CollectionChatData[],\n  { uuid: string }\n>({\n  key: \"groupCollections\",\n  default: selectorFamily({\n    key: \"groupCollectionsDefault\",\n    get:\n      ({ uuid }: { uuid: string }) =>\n      async ({ get }: any) => {\n        return [];\n      },\n  }),\n});\n\nexport const remoteUsersMetadata = atomFamily<\n  {\n    username: string;\n    image: string;\n    color: string;\n    loading: boolean;\n    colorIndex: number;\n  },\n  { uuid: string; remoteUserId: string }\n>({\n  key: \"remoteUsersMetadata\",\n  default: selectorFamily({\n    key: \"remoteUsersMetadataDefault\",\n    get:\n      ({ uuid, remoteUserId }: { uuid: string; remoteUserId: string }) =>\n      async ({ get }: any) => {\n        return {\n          username: \"\",\n          image: \"\",\n          loading: false,\n          color: \"\",\n          colorIndex: 0,\n        };\n      },\n  }),\n});\n\nexport const remoteUsersMetadataMap = atomFamily<\n  {\n    [key: string]: UserMetadata;\n  },\n  { uuid: string }\n>({\n  key: \"remoteUsersMetadataMap\",\n  default: selectorFamily({\n    key: \"remoteUsersMetadataMapDefault\",\n    get:\n      ({ uuid }: { uuid: string; remoteUserId: string }) =>\n      async ({ get }: any) => {\n        return {};\n      },\n  }),\n});\n\nexport const remoteUsersMetadataSelector = selectorFamily<\n  {\n    [key: string]: UserMetadata;\n  },\n  { remoteUserIds: string[]; uuid: string }\n>({\n  key: \"remoteUsersMetadataSelector\",\n  get:\n    ({ uuid, remoteUserIds }) =>\n    ({ get }) => {\n      const remoteUsersMetadata = get(remoteUsersMetadataMap({ uuid }));\n      const returnMap: {\n        [key: string]: UserMetadata;\n      } = {};\n      Object.keys(remoteUsersMetadata)\n        .filter((x) => remoteUserIds.includes(x))\n        .forEach((x) => (returnMap[x] = remoteUsersMetadata[x]));\n      return returnMap;\n    },\n});\n","export * from \"./avatar\";\nexport * from \"./balance\";\nexport * from \"./bootstrap\";\nexport * from \"./client\";\nexport * from \"./ethereum\";\nexport * from \"./feature-gates\";\nexport * from \"./friendship\";\nexport * from \"./keyring\";\nexport * from \"./nft\";\nexport * from \"./notifications\";\nexport * from \"./preferences\";\nexport * from \"./preferences/connection-urls\";\nexport * from \"./prices\";\nexport * from \"./primaryWallets\";\nexport * from \"./recent-transactions\";\nexport * from \"./solana\";\nexport * from \"./spotlight\";\nexport * from \"./transaction-request\";\nexport * from \"./unreadCount\";\nexport * from \"./wallet\";\n","import {\n  UI_RPC_METHOD_KEYRING_HAS_MNEMONIC,\n  UI_RPC_METHOD_KEYRING_STORE_STATE,\n} from \"@coral-xyz/common\";\nimport { atom, selector } from \"recoil\";\n\nimport { user } from \"../atoms/preferences\";\n\nimport { backgroundClient } from \"./client\";\n\nexport type KeyringStoreState = \"locked\" | \"unlocked\" | \"needs-onboarding\";\n\nexport const KeyringStoreStateEnum: { [key: string]: KeyringStoreState } = {\n  Locked: \"locked\",\n  Unlocked: \"unlocked\",\n  NeedsOnboarding: \"needs-onboarding\",\n};\n\n/**\n * Status of the keyring store.\n */\nexport const keyringStoreState = atom<KeyringStoreState | null>({\n  key: \"keyringStoreState\",\n  default: null,\n  effects: [\n    ({ setSelf, getPromise }) => {\n      const checkState = async () => {\n        const background = await getPromise(backgroundClient);\n        const newState = await background.request({\n          method: UI_RPC_METHOD_KEYRING_STORE_STATE,\n          params: [],\n        });\n        setSelf(newState);\n        await new Promise((resolve) => setTimeout(() => resolve(null), 5000));\n        requestAnimationFrame(checkState);\n      };\n      checkState().catch(null);\n    },\n  ],\n});\n\n/**\n * Whether the users keyring has a mnemonic configured.\n */\nexport const keyringHasMnemonic = atom<boolean>({\n  key: \"keyringHasMnemonic\",\n  default: selector({\n    key: \"keyringHasMnemonicDefault\",\n    get: ({ get }) => {\n      // Dependent on changes to the user\n      get(user);\n      const background = get(backgroundClient);\n      return background.request({\n        method: UI_RPC_METHOD_KEYRING_HAS_MNEMONIC,\n        params: [],\n      });\n    },\n  }),\n});\n","import type { Nft, NftCollection } from \"@coral-xyz/common\";\nimport {\n  BACKEND_API_URL,\n  Blockchain,\n  EnrichedNotification,\n  fetchXnftsFromPubkey,\n  WHITELISTED_CHAT_COLLECTIONS,\n} from \"@coral-xyz/common\";\nimport {\n  selector,\n  selectorFamily,\n  useRecoilValue,\n  useRecoilValueLoadable,\n  waitForAll,\n} from \"recoil\";\n\nimport { equalSelectorFamily } from \"../equals\";\n\nimport { ethereumNftById, ethereumWalletCollections } from \"./ethereum/nft\";\nimport { ethereumConnectionUrl } from \"./ethereum\";\nimport { xnftJwt } from \"./preferences\";\nimport {\n  anchorContext,\n  isOneLive,\n  solanaConnectionUrl,\n  solanaNftById,\n  solanaWalletCollections,\n} from \"./solana\";\nimport { allWallets, allWalletsDisplayed } from \"./wallet\";\n\nexport const nftCollectionsWithIds = selector<\n  Array<{\n    publicKey: string;\n    collections: Array<NftCollection>;\n  }>\n>({\n  key: \"nftCollectionsWithIds\",\n  get: ({ get }) => {\n    const wallets = get(allWalletsDisplayed);\n    const allWalletCollections = get(\n      waitForAll(\n        wallets.map(({ blockchain, publicKey }) => {\n          if (blockchain === Blockchain.SOLANA) {\n            return solanaWalletCollections({ publicKey });\n          } else {\n            return ethereumWalletCollections({ publicKey });\n          }\n        })\n      )\n    );\n    return allWalletCollections.filter(Boolean) as Array<{\n      publicKey: string;\n      collections: Array<NftCollection>;\n    }>;\n  },\n});\n\nexport const nftById = equalSelectorFamily<\n  Nft | null,\n  { publicKey: string; connectionUrl: string; nftId: string }\n>({\n  key: \"nftById\",\n  get:\n    ({ publicKey, connectionUrl, nftId }) =>\n    ({ get }) => {\n      const wallets = get(allWallets);\n      const { blockchain } = wallets.find((w) => w.publicKey === publicKey)!;\n      if (blockchain === Blockchain.SOLANA) {\n        return get(solanaNftById({ publicKey, connectionUrl, nftId }));\n      } else {\n        return get(ethereumNftById({ publicKey, connectionUrl, nftId }));\n      }\n    },\n  equals: (m1, m2) => JSON.stringify(m1) === JSON.stringify(m2),\n});\n\nexport const nftsByOwner = selectorFamily<\n  { nfts: Array<Nft> },\n  {\n    publicKey: string;\n    blockchain: Blockchain;\n  }\n>({\n  key: \"nftsByOwner\",\n  get:\n    ({\n      publicKey,\n      blockchain,\n    }: {\n      publicKey: string;\n      blockchain: Blockchain;\n    }) =>\n    async ({ get }: any) => {\n      try {\n        const nftCollections =\n          blockchain === Blockchain.SOLANA\n            ? get(solanaWalletCollections({ publicKey }))\n            : get(ethereumWalletCollections({ publicKey }));\n        const connectionUrl =\n          blockchain === Blockchain.ETHEREUM\n            ? get(ethereumConnectionUrl)\n            : get(solanaConnectionUrl);\n        const allItems: string[] = [];\n        nftCollections?.collections?.map((x) =>\n          x.itemIds?.map((nftId) => allItems.push(nftId))\n        );\n        const allNfts = get(\n          waitForAll(\n            allItems.map((id) => {\n              return nftById({ publicKey, connectionUrl, nftId: id });\n            })\n          )\n        );\n        return allNfts;\n      } catch (e) {\n        console.error(e);\n        return [];\n      }\n    },\n});\n\nexport const nftsByIds = selectorFamily<\n  Array<Nft>,\n  {\n    nftIds: { nftId: string; publicKey: string }[];\n    blockchain: Blockchain;\n  }\n>({\n  key: \"nftsByIds\",\n  get:\n    ({\n      nftIds,\n      blockchain,\n    }: {\n      nftIds: { nftId: string; publicKey: string }[];\n      blockchain: Blockchain;\n    }) =>\n    async ({ get }) => {\n      const connectionUrl =\n        blockchain === Blockchain.ETHEREUM\n          ? get(ethereumConnectionUrl)\n          : get(solanaConnectionUrl);\n\n      const allNfts = get(\n        waitForAll(\n          nftIds.map(({ nftId, publicKey }) => {\n            if (blockchain === Blockchain.SOLANA) {\n              return solanaNftById({ publicKey, connectionUrl, nftId });\n            } else {\n              return ethereumNftById({ publicKey, connectionUrl, nftId });\n            }\n          })\n        )\n      );\n      return allNfts.filter(Boolean) as Array<Nft>;\n    },\n});\n\nexport const collectionChatWL = selector<\n  {\n    id: string;\n    name: string;\n    image: string;\n    collectionId: string;\n    attributeMapping?: { [key: string]: string };\n  }[]\n>({\n  key: \"collectionChatWL\",\n  get: async ({ get }: any) => {\n    const onLive = get(isOneLive);\n    return onLive.madladsCollection &&\n      onLive.madladsCollection !==\n        \"3PMczHyeW2ds7ZWDZbDSF3d21HBqG6yR4tG7vP6qczfj\"\n      ? [\n          ...WHITELISTED_CHAT_COLLECTIONS,\n          {\n            id: onLive.madladsCollection,\n            name: \"Mad Lads\",\n            image: \"https://www.madlads.com/mad_lads_logo.svg\",\n            collectionId: onLive.madladsCollection,\n          },\n        ]\n      : WHITELISTED_CHAT_COLLECTIONS;\n  },\n});\n\nexport const chatByCollectionId = selectorFamily<\n  {\n    id: string;\n    name: string;\n    image: string;\n    collectionId: string;\n    attributeMapping?: { [key: string]: string };\n    memberCount: number;\n  } | null,\n  string | undefined\n>({\n  key: \"chatByCollectionId\",\n  get:\n    (metadataCollectionId) =>\n    async ({ get }: any) => {\n      if (!metadataCollectionId) {\n        return null;\n      }\n      const whitelistedChatCollections = get(collectionChatWL);\n\n      const whitelistedChatCollection = whitelistedChatCollections.find(\n        (x) => x.collectionId === metadataCollectionId && !x.attributeMapping\n      );\n      const chatInfo = whitelistedChatCollection ?? null;\n\n      if (!chatInfo) {\n        return null;\n      }\n\n      const response = await fetch(\n        `${BACKEND_API_URL}/nft/members?room=${\n          chatInfo.id\n        }&type=collection&limit=${0}`\n      );\n      const json = await response.json();\n      return { ...chatInfo, memberCount: json.count };\n    },\n});\n\nexport const chatByNftId = selectorFamily<\n  {\n    id: string;\n    name: string;\n    image: string;\n    collectionId: string;\n    attributeMapping?: { [key: string]: string };\n    memberCount: number;\n  } | null,\n  { publicKey: string; connectionUrl: string; nftId: string }\n>({\n  key: \"chatByNftId\",\n  get:\n    (nftId) =>\n    async ({ get }: any) => {\n      const nft = get(nftById(nftId));\n\n      const whitelistedChatCollections = get(collectionChatWL);\n\n      const whitelistedChatCollection = whitelistedChatCollections.find((x) => {\n        if (x.collectionId !== nft?.metadataCollectionId) {\n          return false;\n        }\n\n        if (!x.attributeMapping) {\n          return true;\n        }\n        const doesNOThaveAttributes = Object.keys(\n          x.attributeMapping || {}\n        ).find((attrName) => {\n          if (\n            !nft?.attributes?.find(\n              (y) =>\n                y.traitType === attrName &&\n                y.value === x?.attributeMapping?.[attrName]\n            )\n          ) {\n            return true;\n          }\n          return false;\n        });\n\n        if (doesNOThaveAttributes) {\n          return false;\n        }\n\n        return true;\n      });\n\n      if (!whitelistedChatCollection) {\n        return null;\n      }\n\n      const response = await fetch(\n        `${BACKEND_API_URL}/nft/members?room=${\n          whitelistedChatCollection.id\n        }&limit=${0}`\n      );\n      const json = await response.json();\n\n      return { ...whitelistedChatCollection, memberCount: json.count };\n    },\n});\n","import type { DbNotification, EnrichedNotification } from \"@coral-xyz/common\";\nimport {\n  BACKEND_API_URL,\n  EnrichedMessage,\n  fetchXnftsFromPubkey,\n  SubscriptionType,\n} from \"@coral-xyz/common\";\nimport { atomFamily, selectorFamily } from \"recoil\";\n\nimport { anchorContext } from \"./solana/wallet\";\n\nexport const recentNotifications = atomFamily<\n  Array<EnrichedNotification>,\n  {\n    limit: number;\n    offset: number;\n    uuid: string;\n  }\n>({\n  key: \"recentNotifications\",\n  default: selectorFamily({\n    key: \"recentNotificationsDefault\",\n    get:\n      ({\n        limit,\n        offset,\n        uuid,\n      }: {\n        limit: number;\n        offset: number;\n        uuid: string;\n      }) =>\n      async ({ get }: any) => {\n        try {\n          const notifications = (await fetchNotifications(offset, limit)) || [];\n          const xnftIds = notifications.map((x) => x.xnft_id);\n          const uniqueXnftIds = xnftIds.filter(\n            (x, index) => xnftIds.indexOf(x) === index\n          );\n          const xnftMetadata = await fetchXnftsFromPubkey(\n            uniqueXnftIds.filter(\n              (x) => x !== \"friend_requests\" && x !== \"friend_requests_accept\"\n            )\n          );\n          return notifications.map((notificaiton) => {\n            const metadata = xnftMetadata.find(\n              (x) => x.xnftId === notificaiton.xnft_id\n            );\n            return {\n              ...notificaiton,\n              xnftImage: metadata?.image || \"\",\n              xnftTitle: metadata?.title || \"\",\n              timestamp: new Date(notificaiton.timestamp).getTime(),\n            };\n          });\n        } catch (e) {\n          return [];\n        }\n      },\n  }),\n});\n\nconst fetchNotifications = (\n  offset: number,\n  limit: number\n): Promise<DbNotification[]> => {\n  return new Promise((resolve) => {\n    fetch(`${BACKEND_API_URL}/notifications?limit=${limit}&offset=${offset}`, {\n      method: \"GET\",\n    })\n      .then(async (response) => {\n        const json = await response.json();\n        resolve(json.notifications || []);\n      })\n      .catch((e) => resolve([]));\n  });\n};\n","import { Blockchain } from \"@coral-xyz/common\";\nimport { atom, selector } from \"recoil\";\n\nimport { ethereumConnectionUrl } from \"../ethereum\";\nimport { solanaConnectionUrl } from \"../solana\";\n\nexport const connectionUrls = atom<{ [key: string]: string | null }>({\n  key: \"connectionUrls\",\n  default: selector({\n    key: \"connectionUrlsDefault\",\n    get: async ({ get }) => {\n      return {\n        [Blockchain.SOLANA as string]: get(solanaConnectionUrl),\n        [Blockchain.ETHEREUM as string]: get(ethereumConnectionUrl),\n      };\n    },\n  }),\n});\n","import type {\n  AutolockSettings,\n  Blockchain,\n  Preferences,\n} from \"@coral-xyz/common\";\nimport {\n  BACKEND_API_URL,\n  DEFAULT_AUTO_LOCK_INTERVAL_SECS,\n  isMobile,\n  UI_RPC_METHOD_ALL_USERS_READ,\n  UI_RPC_METHOD_PREFERENCES_READ,\n  UI_RPC_METHOD_USER_READ,\n} from \"@coral-xyz/common\";\nimport {\n  atom,\n  atomFamily,\n  DefaultValue,\n  selector,\n  selectorFamily,\n} from \"recoil\";\n\nimport { backgroundClient } from \"../client\";\n\nexport const preferences = atom<Preferences>({\n  key: \"preferences\",\n  default: selector({\n    key: \"preferencesDefault\",\n    get: async ({ get }) => {\n      const background = get(backgroundClient);\n      // Preferences are dependent on the current active user\n      const _user = get(user);\n      return await background.request({\n        method: UI_RPC_METHOD_PREFERENCES_READ,\n        params: [_user.uuid],\n      });\n    },\n  }),\n  effects: [\n    ({ onSet }) => {\n      onSet((preferences: Preferences) => {\n        //\n        // On extension, we write preferences to the local storage of the UI so that\n        // we can use it without hitting the service worker on app load. See\n        // src/app/App.tsx for the user of this.\n        //\n        if (!isMobile()) {\n          window.localStorage.setItem(\n            \"preferences\",\n            JSON.stringify(preferences)\n          );\n        }\n      });\n    },\n  ],\n});\n\nexport const isDarkMode = selector<boolean>({\n  key: \"isDarkMode\",\n  get: async ({ get }) => {\n    const p = get(preferences);\n    return p.darkMode;\n  },\n});\n\nexport const isDeveloperMode = selector<boolean>({\n  key: \"isDeveloperMode\",\n  get: async ({ get }) => {\n    const p = get(preferences);\n    return p.developerMode;\n  },\n});\n\nexport const autoLockSettings = selector<AutolockSettings>({\n  key: \"autoLockSettings\",\n  get: async ({ get }) => {\n    const p = get(preferences);\n    return (\n      p.autoLockSettings || {\n        seconds: p.autoLockSecs || DEFAULT_AUTO_LOCK_INTERVAL_SECS,\n        option: undefined,\n      }\n    );\n  },\n});\n\nexport const isAggregateWallets = selector<boolean>({\n  key: \"isAggregateWallets\",\n  get: async ({ get }) => {\n    const p = get(preferences);\n    return Boolean(p.aggregateWallets);\n  },\n});\n\nexport const approvedOrigins = selector<Array<string>>({\n  key: \"approvedOrigins\",\n  get: async ({ get }) => {\n    const p = get(preferences);\n    return p.approvedOrigins;\n  },\n});\n\n// This is the *active* username.\nexport const user = atom<{ username: string; uuid: string; jwt: string }>({\n  key: \"user\",\n  default: selector({\n    key: \"userDefault\",\n    get: async ({ get }) => {\n      const background = get(backgroundClient);\n      return await background.request({\n        method: UI_RPC_METHOD_USER_READ,\n        params: [],\n      });\n    },\n  }),\n});\n\n// This is the actively authenticated user. Note there is a delay between\n// switching a user on the client and the authenticated user being updated\n// because it requires a HTTP request to ensure authentication.\nexport const authenticatedUser = atom<{\n  username: string;\n  uuid: string;\n  jwt: string;\n} | null>({\n  key: \"authenticatedUser\",\n  default: null,\n});\n\nexport const xnftJwt = atomFamily({\n  key: \"xnftJwt\",\n  default: selectorFamily({\n    key: \"xnftJwtDefault\",\n    get:\n      ({ xnftAddress }: { xnftAddress: string }) =>\n      async (): Promise<string> => {\n        try {\n          const response = await fetch(\n            `${BACKEND_API_URL}/users/jwt/xnft?xnftAddress=${xnftAddress}`\n          );\n          return (await response.json())?.jwt || \"\";\n        } catch (e) {\n          return \"\";\n        }\n      },\n  }),\n});\n\nexport const allUsers = selector({\n  key: \"allUsernamesDefault\",\n  get: async ({ get }) => {\n    const background = get(backgroundClient);\n    get(allUsersTrigger); // Use this to retriger a fetch when the active username changes.\n    return await background.request({\n      method: UI_RPC_METHOD_ALL_USERS_READ,\n      params: [],\n    });\n  },\n  set: ({ set }, value) => {\n    if (value instanceof DefaultValue) {\n      set(allUsersTrigger, (v) => v + 1);\n    }\n  },\n});\n\n// This atom is used for nothing other than re-triggering the allUsers fetch.\nexport const allUsersTrigger = atom<number>({\n  key: \"allUsersTrigger\",\n  default: 0,\n});\n\nexport * from \"./xnft-preferences\";\n","import type { XnftPreference, XnftPreferenceStore } from \"@coral-xyz/common\";\nimport { UI_RPC_METHOD_GET_XNFT_PREFERENCES } from \"@coral-xyz/common\";\nimport { atom, selector, selectorFamily } from \"recoil\";\n\nimport { backgroundClient } from \"../client\";\n\ntype xNftId = string;\nexport const xnftPreferences = atom<XnftPreferenceStore | null>({\n  key: \"xnftPreferences\",\n  default: selector({\n    key: \"xnftPreferencesDefault\",\n    get: async ({ get }) => {\n      const background = get(backgroundClient);\n      const response = await background.request({\n        method: UI_RPC_METHOD_GET_XNFT_PREFERENCES,\n        params: [],\n      });\n\n      const result: XnftPreferenceStore = {\n        // Set default pushNotification permissions for ONE xNFT\n        \"4ekUZj2TKNoyCwnRDstvViCZYkhnhNoWNQpa5bBLwhq4\": {\n          disabled: false,\n          pushNotifications: true,\n          mediaPermissions: false,\n        },\n        // And for the Dropzone xNFT\n        CVkbt7dscJdjAJFF2uKrtin6ve9M8DA4gsUccAjePUHH: {\n          disabled: false,\n          pushNotifications: true,\n          mediaPermissions: false,\n        },\n        ...(response ?? null),\n      };\n\n      return result;\n    },\n  }),\n});\n\nexport const xnftPreference = selectorFamily<\n  XnftPreference | null,\n  xNftId | undefined\n>({\n  key: \"xnftPreference\",\n  get:\n    (xnftId) =>\n    async ({ get }) => {\n      if (!xnftId) {\n        return null;\n      }\n      const preferences = get(xnftPreferences);\n      return preferences?.[xnftId] ?? null;\n    },\n});\n","import { ETH_NATIVE_MINT } from \"@coral-xyz/common\";\nimport { ethers } from \"ethers\";\nimport { selector, selectorFamily } from \"recoil\";\n\nimport { equalSelectorFamily } from \"../equals\";\n\nimport { erc20Balances } from \"./ethereum/token\";\nimport { solanaConnectionUrl } from \"./solana/preferences\";\nimport { solanaFungibleTokenAccounts } from \"./solana/token\";\nimport { splTokenRegistry } from \"./solana/token-registry\";\n\nconst baseCoingeckoParams = {\n  vs_currencies: \"usd\",\n  include_market_cap: \"true\",\n  include_24hr_vol: \"true\",\n  include_24hr_change: \"true\",\n  include_last_updated_at: \"true\",\n};\n\n// TODO move this to a remote API so it can be updated without updating\n// the app\nconst coingeckoIdOverride = {\n  DUSTawucrTsGU8hcqRdHDCbuYhCPADMLM2VcCb8VnFnQ: \"dust-protocol\",\n  DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263: \"bonk\",\n  bSo13r4TkiE4KumL71LsHTPpL2euBYLFx6h9HP3piy1: \"blazestake-staked-sol\",\n  \"5yxNbU8DgYJZNi3mPD9rs4XLh9ckXrhPjJ5VCujUWg5H\": \"fronk\",\n  CvB1ztJvpYQPvdPBePtRzjL4aQidjydtUz61NWgcgQtP: \"epics-token\",\n  J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn: \"jito-staked-sol\",\n};\n\n// Coingecko API query for all Coingecko IDs (for Solana).\nexport const solanaPricesForIds = selectorFamily<\n  Map<string, any>,\n  { publicKey: string }\n>({\n  key: \"pricesFoIds\",\n  get:\n    ({ publicKey }) =>\n    async ({ get }) => {\n      const ids = get(coingeckoIds({ publicKey }));\n      if (ids.length === 0) return new Map();\n      const params = {\n        ...baseCoingeckoParams,\n        ids,\n      } as any;\n      const queryString = new URLSearchParams(params).toString();\n      try {\n        const resp = await fetch(\n          `https://api.coingecko.com/api/v3/simple/price?${queryString}`\n        );\n        const json = await resp.json();\n        const coingeckoIdToAddressMap = get(\n          coingeckoIdToAddress({ publicKey })\n        );\n        return new Map(\n          // Transform the response from id -> price data to addresss -> price data\n          Object.keys(json).map((id) => [\n            coingeckoIdToAddressMap.get(id),\n            json[id],\n          ])\n        ) as Map<string, any>;\n      } catch (err) {\n        console.error(\"error querying all Coingecko IDs\", err);\n        return new Map();\n      }\n    },\n});\n\n// Map of SPL mint addresses to Coingecko ID\nconst splMintsToCoingeckoId = equalSelectorFamily<\n  Map<string, string>,\n  { publicKey: string }\n>({\n  key: \"splMintsToCoingeckoId\",\n  get:\n    ({ publicKey }: { publicKey: string }) =>\n    ({ get }: any) => {\n      const connectionUrl = get(solanaConnectionUrl);\n      const _fungibleTokenAccounts = get(\n        solanaFungibleTokenAccounts({ connectionUrl, publicKey })\n      );\n      const tokenRegistry = get(splTokenRegistry);\n      return [..._fungibleTokenAccounts.values()].reduce(\n        (acc, splTokenAccount) => {\n          const mint = splTokenAccount.mint.toString();\n          // Use override if one is available\n          if (coingeckoIdOverride[mint]) {\n            acc.set(mint, coingeckoIdOverride[mint]);\n            return acc;\n          }\n          const tokenInfo = tokenRegistry.get(mint);\n          if (\n            tokenInfo &&\n            tokenInfo.extensions &&\n            tokenInfo.extensions.coingeckoId\n          ) {\n            acc.set(mint, tokenInfo.extensions.coingeckoId);\n          }\n          return acc;\n        },\n        new Map()\n      );\n    },\n  // Map equality\n  equals: (m1, m2) =>\n    m1.size === m2.size &&\n    Array.from(m1.keys()).every((key) => m1.get(key) === m2.get(key)),\n});\n\n// Map of Ethereum addresses to Coingecko ID\nexport const ethAddressToCoingeckoId = selector<Map<string, string>>({\n  key: \"ethereumAddressToCoingeckoId\",\n  get: () => {\n    const addressIdMap = new Map();\n    addressIdMap.set(ETH_NATIVE_MINT, \"ethereum\");\n    return addressIdMap;\n  },\n});\n\n// Map of addresses to Coingecko ID (any blockchain)\nexport const addressToCoingeckoId = selectorFamily<\n  Map<string, string>,\n  { publicKey: string }\n>({\n  key: \"addressToCoingeckoId\",\n  get:\n    ({ publicKey }) =>\n    ({ get }: any) => {\n      return new Map([\n        ...get(splMintsToCoingeckoId({ publicKey })),\n        ...get(ethAddressToCoingeckoId),\n      ]);\n    },\n});\n\n// Map of Coingecko IDs to addresses (any blockchain)\nexport const coingeckoIdToAddress = selectorFamily<\n  Map<string, string>,\n  { publicKey: string }\n>({\n  key: \"coingeckoIdToAddress\",\n  get:\n    ({ publicKey }) =>\n    ({ get }: any) => {\n      return new Map(\n        [...get(addressToCoingeckoId({ publicKey })).entries()].map(\n          ([a, b]) => [b, a]\n        )\n      );\n    },\n});\n\n// The list of all Coingecko token IDs prices need to be loaded for.\n// This is determined by the list of all tokens in the wallet.\nexport const coingeckoIds = selectorFamily<\n  Array<string>,\n  { publicKey: string }\n>({\n  key: \"coingeckoIds\",\n  get:\n    ({ publicKey }) =>\n    ({ get }: any) => {\n      const allIds = [\n        ...get(splMintsToCoingeckoId({ publicKey })).values(),\n        ...get(ethAddressToCoingeckoId).values(),\n      ].flat();\n      // Deduplicate\n      return [...new Set(allIds)];\n    },\n});\n\n// The list of all Ethereum ERC20 contract addresses prices need to be loaded\n// for.\nexport const erc20ContractAddresses = equalSelectorFamily<\n  Array<string>,\n  { publicKey: string }\n>({\n  key: \"erc20ContractAddresses\",\n  get:\n    ({ publicKey }) =>\n    ({ get }: any) => {\n      const balances = get(erc20Balances({ publicKey }));\n      const addresses = [...balances.keys()].filter(\n        // TODO figure out how ETH_NATIVE_MINT ends up in this array\n        (k: string) => k !== ETH_NATIVE_MINT\n      );\n      addresses.sort();\n      return addresses;\n    },\n  equals: (a1, a2) => JSON.stringify(a1) === JSON.stringify(a2),\n});\n\n// Coingecko API query for all ERC20 contract addresses\nexport const pricesForErc20Addresses = selectorFamily<\n  Map<string, any>,\n  { publicKey: string }\n>({\n  key: \"pricesForErc20Addresses\",\n  get:\n    ({ publicKey }) =>\n    async ({ get }: any) => {\n      const contractAddresses = get(erc20ContractAddresses({ publicKey }));\n      if (contractAddresses.length === 0) {\n        // No contract addresses, nothing to query\n        return new Map();\n      }\n      const params = {\n        ...baseCoingeckoParams,\n        contract_addresses: contractAddresses,\n      };\n      const queryString = new URLSearchParams(params).toString();\n      try {\n        const resp = await fetch(\n          `https://api.coingecko.com/api/v3/simple/token_price/ethereum?${queryString}`\n        );\n        const json = await resp.json();\n        return new Map(\n          // Transform the response from id -> price data to addresss -> price data\n          Object.keys(json).map((address) => [\n            ethers.utils.getAddress(address),\n            json[address],\n          ])\n        );\n      } catch (err) {\n        console.error(\"error querying all ER20 tokens\", err);\n        return new Map();\n      }\n    },\n});\n\n// Retrieve only the Etheruem price. Useful for transaction approval screens\n// where the exchange rate is needed to show transaction fee.\nexport const ethereumPrice = selector({\n  key: \"ethereumPrice\",\n  get: async () => {\n    const params = {\n      ...baseCoingeckoParams,\n      ids: \"ethereum\",\n    };\n    const queryString = new URLSearchParams(params).toString();\n    try {\n      const resp = await fetch(\n        `https://api.coingecko.com/api/v3/simple/price?${queryString}`\n      );\n      const json = await resp.json();\n      return json[\"ethereum\"];\n    } catch (err) {\n      console.error(\"error fetching ethereum price:\", err);\n      return;\n    }\n  },\n});\n","import type { ServerPublicKey } from \"@coral-xyz/common\";\nimport { selector } from \"recoil\";\n\nimport { serverPublicKeys } from \"./wallet\";\n\nexport const primaryWallets = selector<Array<ServerPublicKey>>({\n  key: \"primaryWallets\",\n  get: ({ get }) => {\n    return get(serverPublicKeys).filter((s) => s.primary);\n  },\n});\n","import type { RecentTransaction } from \"@coral-xyz/common\";\nimport { Blockchain, ETH_NATIVE_MINT } from \"@coral-xyz/common\";\nimport { atomFamily, selectorFamily } from \"recoil\";\n\nimport { ethersContext } from \"./ethereum/provider\";\nimport {\n  fetchNftMetadata,\n  fetchRecentSolanaTransactionDetails,\n} from \"./solana/recent-transactions\";\n\n/**\n * Retrieve recent Ethereum transactions using alchemy_getAssetTransfers.\n * https://docs.alchemy.com/reference/alchemy-getassettransfers\n */\nexport const recentEthereumTransactions = atomFamily<\n  Array<RecentTransaction>,\n  {\n    address: string;\n    contractAddresses?: Array<string>;\n  }\n>({\n  key: \"recentEthereumTransactions\",\n  default: selectorFamily({\n    key: \"recentEthereumTransactionsDefault\",\n    get:\n      ({\n        address,\n        contractAddresses,\n      }: {\n        address: string;\n        contractAddresses: Array<string>;\n      }) =>\n      async ({ get }: any) => {\n        const { provider: ethereumProvider } = get(ethersContext);\n        const parameters: {\n          withMetadata: boolean;\n          order: string;\n          contractAddresses?: Array<string>;\n          category?: Array<string>;\n        } = {\n          withMetadata: true,\n          order: \"desc\",\n        };\n        if (contractAddresses) {\n          if (\n            contractAddresses.length === 1 &&\n            contractAddresses[0] === ETH_NATIVE_MINT\n          ) {\n            parameters.category = [\"external\"];\n            // Don't use contract addresses here because ETH_NATIVE_MINT is just a\n            // representation of native ETH in Backpack, not a real contract.\n          } else {\n            parameters.category = [\"erc20\"];\n            parameters.contractAddresses = contractAddresses;\n          }\n        } else {\n          // All asset transfers\n          parameters.category = [\n            \"external\",\n            \"erc20\",\n            \"erc721\",\n            \"erc1155\",\n            \"specialnft\",\n          ];\n        }\n        const fromTransferPromise = ethereumProvider.send(\n          \"alchemy_getAssetTransfers\",\n          [\n            {\n              fromAddress: address,\n              ...parameters,\n            },\n          ]\n        );\n        const toTransferPromise = ethereumProvider.send(\n          \"alchemy_getAssetTransfers\",\n          [\n            {\n              toAddress: address,\n              ...parameters,\n            },\n          ]\n        );\n        const results = await Promise.allSettled([\n          fromTransferPromise,\n          toTransferPromise,\n        ]);\n\n        const isFulfilled = <T,>(\n          input: PromiseSettledResult<T>\n        ): input is PromiseFulfilledResult<T> => input.status === \"fulfilled\";\n\n        const merged = results\n          // Don't crash on promise rejections\n          .filter(isFulfilled)\n          .map((r) => r.value.transfers)\n          .flat()\n          .sort((a: any, b: any) => Number(b.blockNum) - Number(a.blockNum));\n\n        return merged.map((t) => ({\n          blockchain: Blockchain.ETHEREUM,\n          date: new Date(t.metadata.blockTimestamp),\n          signature: t.hash,\n          // alchemy_getAssetTransfers doesn't support error status\n          didError: false,\n        }));\n      },\n  }),\n});\n\n/**\n * Retrieve recent Solana transactions using Helius API.\n */\nexport const recentSolanaTransactions = atomFamily<\n  Array<any>,\n  {\n    address: string;\n  }\n>({\n  key: \"recentSolanaTransactions\",\n  default: selectorFamily({\n    key: \"recentSolanaTransactionsDefault\",\n    get:\n      ({ address }: { address: string }) =>\n      async () => {\n        try {\n          // get parsed transactions from Helius\n          const heliusTransactionDetails =\n            await fetchRecentSolanaTransactionDetails(address);\n\n          return heliusTransactionDetails?.map((t: any) => ({\n            blockchain: Blockchain.SOLANA,\n            ...t,\n          }));\n        } catch (err) {\n          console.error(err);\n          return [];\n        }\n      },\n  }),\n});\n\nexport const metadataForRecentSolanaTransaction = selectorFamily<\n  any,\n  { transaction: any }\n>({\n  key: \"metadataForRecentSolanaTransaction\",\n  get:\n    ({ transaction }) =>\n    async () => {\n      try {\n        const mint =\n          transaction?.events?.nft?.nfts[0]?.mint ||\n          transaction?.tokenTransfers[0]?.mint;\n        if (!mint) {\n          return undefined;\n        }\n        return await fetchNftMetadata(mint);\n      } catch (err) {\n        console.error(err);\n        return undefined;\n      }\n    },\n});\n","export * from \"./isONELive\";\nexport * from \"./jupiter\";\nexport * from \"./nft\";\nexport * from \"./preferences\";\nexport * from \"./recent-transactions\";\nexport * from \"./token\";\nexport * from \"./token-registry\";\nexport * from \"./wallet\";\nexport * from \"./xnft\";\n","import { Blockchain } from \"@coral-xyz/common\";\nimport { selector } from \"recoil\";\n\nimport { authenticatedUser } from \"../preferences\";\nimport { activeWallet } from \"../wallet\";\n\nexport const isOneLive = selector<{\n  isLive: boolean;\n  wlCollection?: string;\n  madladsCollection?: string;\n  banner?: string;\n  hasMadladBanner?: string;\n  hasWLBanner?: string;\n}>({\n  key: \"isOneLive\",\n  get: async ({ get }) => {\n    const wallet = get(activeWallet);\n    if (wallet?.blockchain !== Blockchain.SOLANA) {\n      return { isLive: false };\n    }\n    return (\n      fetch(\"https://one.xnfts.dev/api/isLive?wallet=\" + wallet.publicKey)\n        // return fetch(\"http://localhost:3000/api/isLive\")\n        .then((r) => r.json())\n        .catch(() => ({ isLive: false }))\n    );\n  },\n});\n","import { Blockchain, SOL_NATIVE_MINT, WSOL_MINT } from \"@coral-xyz/common\";\nimport type { TokenInfo } from \"@solana/spl-token-registry\";\nimport { selector, selectorFamily } from \"recoil\";\n\nimport type { TokenDataWithBalance } from \"../../types\";\nimport { blockchainBalancesSorted } from \"../balance\";\n\nimport { splTokenRegistry } from \"./token-registry\";\n\n// Load the route map from the Jupiter API\nconst jupiterRouteMap = selector({\n  key: \"jupiterRouteMap\",\n  get: async () => {\n    try {\n      const [response, topTokensReversed] = await (async () => {\n        const url =\n          \"https://quote-api.jup.ag/v4/indexed-route-map?onlyDirectRoutes=true\";\n        try {\n          // Try to fetch the routes & top token list in parallel to reduce wait,\n          // but fall back to just routes and an empty top token list if it fails\n          return await Promise.all([\n            (async () => {\n              const res = await fetch(url);\n              return await res.json();\n            })(),\n            (async () => {\n              // Fetch the top token list so that it can be used to reorder the\n              // list of available output tokens with the most popular ones first\n              const res = await fetch(`https://cache.jup.ag/top-tokens`);\n              const topTokens = await res.json();\n              // Reverse the list so it makes the .sort() below a little easier\n              return topTokens.reverse();\n            })(),\n          ]);\n        } catch (err) {\n          const res = await fetch(url);\n          return [await res.json(), []];\n        }\n      })();\n\n      const getMint = (index: number) => response[\"mintKeys\"][index];\n\n      // Replace indices with mint addresses\n      return Object.keys(response[\"indexedRouteMap\"]).reduce((acc, key) => {\n        acc[getMint(parseInt(key))] = response[\"indexedRouteMap\"][key]\n          .map((i: number) => getMint(i))\n          .sort(\n            (a, b) =>\n              topTokensReversed.indexOf(b) - topTokensReversed.indexOf(a)\n          );\n        return acc;\n      }, {});\n    } catch (e) {\n      console.log(\"failed to load Jupiter route map\", e);\n      return null;\n    }\n  },\n});\n\nexport const jupiterTokenList = selector<TokenInfo[]>({\n  key: \"jupiterTokenList\",\n  get: async () => {\n    try {\n      return await (await fetch(\"https://token.jup.ag/strict\")).json();\n    } catch (e) {\n      console.log(\"failed to load Jupiter token list\", e);\n      return {};\n    }\n  },\n});\n\nexport const jupiterTokenMap = selector<Map<string, TokenInfo>>({\n  key: \"jupterTokenMap\",\n  get: ({ get }) => {\n    const tokens = get(jupiterTokenList);\n    const m = new Map();\n    for (const t of tokens) {\n      m.set(t.address, t);\n    }\n    return m;\n  },\n});\n\n// All input tokens for Jupiter\nconst allJupiterInputMints = selector({\n  key: \"allJupiterInputMints\",\n  get: async ({ get }) => {\n    const routeMap = get(jupiterRouteMap);\n    if (routeMap) return Object.keys(routeMap);\n    // API request fail\n    else return [];\n  },\n});\n\n// Jupiter tokens that can be swapped *from* owned by the currently active\n// wallet.\nexport const jupiterInputTokens = selectorFamily({\n  key: \"jupiterInputTokens\",\n  get:\n    ({ publicKey }: { publicKey: string }) =>\n    async ({ get }) => {\n      // Get all possible inputs rom the Jupiter route map\n      const inputMints = get(allJupiterInputMints);\n      // Get balances for the current public key\n      const walletTokens = get(\n        blockchainBalancesSorted({\n          publicKey,\n          blockchain: Blockchain.SOLANA,\n        })\n      );\n      // Filter all Jupiter's input mints to only those that the wallet holds a\n      // balance for, and always display native SOL.\n      return walletTokens.filter(\n        (token: TokenDataWithBalance) =>\n          inputMints.includes(token.mint!) || token.mint === SOL_NATIVE_MINT\n      ) as Array<TokenDataWithBalance>;\n    },\n});\n\nexport const jupiterOutputTokens = selectorFamily({\n  key: \"jupiterOutputTokens\",\n  get:\n    ({ inputMint }: { inputMint: string }) =>\n    ({ get }: any) => {\n      const routeMap = get(jupiterRouteMap);\n      const tokenRegistry = get(splTokenRegistry)!;\n      const tokenList = get(jupiterTokenList);\n\n      // If input mint is SOL native then we can use WSOL with unwrapping\n      const routeMapMint =\n        inputMint === SOL_NATIVE_MINT ? WSOL_MINT : inputMint;\n      if (!routeMap || !routeMap[routeMapMint]) return [];\n\n      // Lookup\n      const swapTokens = routeMap[routeMapMint].map((mint: string) => {\n        const tokenMetadata =\n          (tokenList.find((t: TokenInfo) => t.address === mint) ||\n            tokenRegistry.get(mint)) ??\n          ({} as TokenInfo);\n        return {\n          // Rewrite the name for Wrapped SOL because auto wrap/unwrap is set in\n          // the API call, so it'll automatically unwrap wSOL.\n          name:\n            tokenMetadata.name === \"Wrapped SOL\"\n              ? \"Eclipse\"\n              : tokenMetadata.name,\n          ticker: tokenMetadata.symbol,\n          decimals: tokenMetadata.decimals,\n          logo: tokenMetadata.logoURI,\n          mint: tokenMetadata.address,\n        };\n      });\n\n      if (inputMint === SOL_NATIVE_MINT) {\n        // Add wSOL as an output for native SOL. It won't show up here because\n        // we are using routes for wSOL for native SOL, and wSOL is not an\n        // output token for itself.\n        const wrappedSol = tokenRegistry.get(WSOL_MINT);\n        swapTokens.push({\n          name: wrappedSol.name,\n          ticker: wrappedSol.symbol,\n          logo: wrappedSol.logoURI,\n          decimals: wrappedSol.decimals,\n          mint: WSOL_MINT,\n        });\n      }\n\n      // Filter out tokens that don't have at least name and ticker\n      return swapTokens.filter((t: any) => t.name && t.ticker);\n    },\n});\n","import type {\n  Nft,\n  NftCollection,\n  SolanaTokenAccountWithKeyString,\n  TokenMetadataString,\n} from \"@coral-xyz/common\";\nimport {\n  Blockchain,\n  externalResourceUri,\n  isMadLads,\n  metadataAddress,\n  UNKNOWN_NFT_ICON_SRC,\n} from \"@coral-xyz/common\";\nimport { Metadata } from \"@metaplex-foundation/mpl-token-metadata\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { selectorFamily } from \"recoil\";\n\nimport { equalSelectorFamily } from \"../../equals\";\nimport { isPromise } from \"../../utils\";\n\nimport { customSplTokenAccounts } from \"./token\";\nimport { anchorContext } from \"./wallet\";\nimport { solanaConnectionUrl } from \".\";\n\nexport const solanaWalletCollections = selectorFamily<\n  {\n    publicKey: string;\n    collections: Array<NftCollection>;\n  } | null,\n  { publicKey: string }\n>({\n  key: \"solanaWalletCollections\",\n  get:\n    ({ publicKey }) =>\n    ({ get }) => {\n      const metadataMap = get(solanaMetadataMap({ publicKey }));\n      const collectionsMap = intoSolanaCollectionsMap(metadataMap);\n      if (!collectionsMap) {\n        return null;\n      }\n      const { publicKey: pk, collections } = collectionsMap;\n      let sortedCollections = Object.values(collections).sort((a, b) => {\n        if (a.isMadlads) {\n          return -1;\n        } else if (b.isMadlads) {\n          return 1;\n        }\n\n        return a.id.localeCompare(b.id);\n      });\n      return {\n        publicKey: pk,\n        collections: sortedCollections,\n      };\n    },\n});\n\n// Returns the nft metadata map for a given public key.\n// Maps metadata pubkey -> account data.\nconst solanaMetadataMap = selectorFamily<\n  MetadataMap | null,\n  { publicKey: string }\n>({\n  key: \"metadataMap\",\n  get:\n    ({ publicKey }) =>\n    ({ get }) => {\n      try {\n        const connectionUrl = get(solanaConnectionUrl);\n        const { nfts } = get(\n          customSplTokenAccounts({ publicKey, connectionUrl })\n        );\n        // Transform into the map now.\n        const nftMap = {};\n        for (let k = 0; k < nfts.nftTokens.length; k += 1) {\n          const nftToken = nfts.nftTokens[k];\n          const nftTokenMetadata = nfts.nftTokenMetadata[k]!;\n          if (nftTokenMetadata) {\n            nftMap[nftTokenMetadata.publicKey] = {\n              metadataPublicKey: nftTokenMetadata.publicKey,\n              nftToken,\n              nftTokenMetadata,\n            };\n          }\n        }\n        return {\n          publicKey,\n          metadata: nftMap,\n        };\n      } catch (errorOrPromise) {\n        if (isPromise(errorOrPromise)) {\n          const promise = errorOrPromise;\n          throw promise;\n        }\n        const error = errorOrPromise;\n        console.error(error);\n        return null;\n      }\n    },\n});\n\nexport const solanaNftById = equalSelectorFamily<\n  Nft | null,\n  { publicKey: string; connectionUrl: string; nftId: string }\n>({\n  key: \"nftById\",\n  get:\n    ({ publicKey, connectionUrl, nftId }) =>\n    async ({ get }) => {\n      try {\n        const { connection } = get(anchorContext);\n        const metadataMap = get(solanaMetadataMap({ publicKey }));\n        if (!metadataMap) {\n          return null;\n        }\n        const { nftToken, nftTokenMetadata } = metadataMap.metadata[nftId];\n\n        const resp = await connection.customSplMetadataUri(\n          [nftToken],\n          [nftTokenMetadata]\n        );\n        const [_, uriData] = resp[0] ?? [];\n        const collectionName = (() => {\n          if (!uriData) {\n            return \"\";\n          } else if (uriData.metadata.collection) {\n            // TODO: there is a verified boolean on the object. We should probably check it.\n            const metadata = get(\n              solanaNftCollection({\n                collectionPublicKey:\n                  uriData?.metadata.collection.key.toString(),\n              })\n            );\n            return metadata?.data.name;\n          } else if (uriData.tokenMetaUriData.collection) {\n            return uriData.tokenMetaUriData?.collection?.name;\n          } else {\n            return uriData.metadata.data.name;\n          }\n        })()?.replace(/\\0/g, \"\");\n\n        const nft: Nft = {\n          id: nftTokenMetadata?.publicKey ?? \"\",\n          blockchain: Blockchain.SOLANA,\n          publicKey: nftToken.key!,\n          mint: nftTokenMetadata?.account.mint,\n          metadataCollectionId: uriData?.metadata?.collection?.key.toString(),\n          name: (\n            nftTokenMetadata?.account.data.name ??\n            (uriData ? uriData.tokenMetaUriData.name : \"Unknown\")\n          )?.replace(/\\0/g, \"\"),\n          description: uriData ? uriData.tokenMetaUriData.description : \"\",\n          externalUrl: uriData\n            ? externalResourceUri(\n                uriData.tokenMetaUriData.external_url?.replace(/\\0/g, \"\")\n              )\n            : \"\",\n          imageUrl:\n            uriData && uriData.tokenMetaUriData.image\n              ? externalResourceUri(\n                  uriData.tokenMetaUriData.image?.replace(/\\0/g, \"\")\n                )\n              : UNKNOWN_NFT_ICON_SRC,\n          // ensuring attributes is an array\n          attributes:\n            uriData && uriData?.tokenMetaUriData?.attributes?.map\n              ? uriData?.tokenMetaUriData?.attributes?.map(\n                  (a: { trait_type: string; value: string }) => ({\n                    traitType: a.trait_type,\n                    value: a.value,\n                  })\n                )\n              : [],\n          properties: uriData?.tokenMetaUriData?.properties ?? {},\n          creators: uriData?.metadata?.data?.creators ?? [],\n          collectionName,\n        };\n        if (isMadLads(nft.creators)) {\n          nft.lockScreenImageUrl = nft.properties?.files?.[0]?.uri;\n        }\n        return nft;\n      } catch (e) {\n        console.error(e);\n        return null;\n      }\n    },\n  equals: (m1, m2) => JSON.stringify(m1) === JSON.stringify(m2),\n});\n\nconst solanaNftCollection = selectorFamily<\n  Metadata | null,\n  { collectionPublicKey: string }\n>({\n  key: \"solanaNftCollection\",\n  get:\n    ({ collectionPublicKey }) =>\n    async ({ get }) => {\n      const { connection } = get(anchorContext);\n      const collectionMetadataPublicKey = await metadataAddress(\n        new PublicKey(collectionPublicKey)\n      );\n      const account = await connection.getAccountInfo(\n        collectionMetadataPublicKey\n      );\n      if (account === null) {\n        return null;\n      }\n      const metadata = Metadata.deserialize(account.data)[0];\n      return metadata;\n    },\n});\n\n////////////////////////////////////////////////////////////////////////////////\n// Non-atom utils and types.\n////////////////////////////////////////////////////////////////////////////////\n\n// Given all the token account data for a given wallet, transform into a\n// collection array for UI presentation.\nfunction intoSolanaCollectionsMap(metadataMap: MetadataMap | null): null | {\n  publicKey: string;\n  collections: {\n    [collectionId: string]: NftCollection;\n  };\n} {\n  if (!metadataMap) {\n    return null;\n  }\n  const collections = {};\n  Object.values(metadataMap.metadata).forEach((value) => {\n    const [collectionId, metadataCollectionId] = (() => {\n      const collectionId = extractCollectionId(value.nftTokenMetadata!);\n      const metadataCollectionId =\n        value.nftTokenMetadata?.account.collection?.key || \"\";\n      return [collectionId, metadataCollectionId];\n    })();\n    if (collectionId && !collections[collectionId]) {\n      collections[collectionId] = {\n        id: collectionId,\n        metadataCollectionId,\n        name: collectionId,\n        symbol: value.nftTokenMetadata?.account?.data?.symbol,\n        tokenType: \"\",\n        totalSupply: \"\",\n        itemIds: [],\n      };\n    }\n    if (collectionId) {\n      collections[collectionId]!.itemIds.push(\n        value.nftTokenMetadata?.publicKey\n      );\n      if (\n        isMadLads(value.nftTokenMetadata?.account?.data?.creators ?? undefined)\n      ) {\n        collections[collectionId]!.isMadlads = true;\n      }\n    }\n  });\n  return {\n    publicKey: metadataMap.publicKey,\n    collections,\n  };\n}\n\ntype MetadataMap = {\n  publicKey: string;\n  metadata: {\n    [metadataPublicKey: string]: {\n      metadataPublicKey: string;\n      nftToken: SolanaTokenAccountWithKeyString;\n      nftTokenMetadata: TokenMetadataString | null;\n    };\n  };\n};\n\nfunction extractCollectionId(\n  tokenMetadata: TokenMetadataString\n): string | null {\n  const creators = tokenMetadata.account.data.creators;\n  if (!creators) {\n    return null;\n  }\n  const id = JSON.stringify(\n    [...creators].sort((a, b) => a.address.localeCompare(b.address))\n  );\n  return id;\n}\n","import type { Commitment } from \"@solana/web3.js\";\nimport { selector } from \"recoil\";\n\nimport { preferences } from \"../preferences\";\n\nexport const solanaExplorer = selector<string>({\n  key: \"solanaExplorer\",\n  get: async ({ get }) => {\n    const p = get(preferences);\n    return p.solana.explorer;\n  },\n});\n\nexport const solanaCommitment = selector<Commitment>({\n  key: \"solanaCommitment\",\n  get: async ({ get }) => {\n    const p = get(preferences);\n    return p.solana.commitment;\n  },\n});\n\n/**\n * URL to the cluster to communicate with.\n */\nexport const solanaConnectionUrl = selector<string>({\n  key: \"solanaConnectionUrl\",\n  get: ({ get }) => {\n    const p = get(preferences);\n    return p.solana.cluster;\n  },\n});\n","import { BACKEND_API_URL } from \"@coral-xyz/common\";\nimport type {\n  Connection,\n  ParsedTransactionWithMeta,\n  PublicKey,\n} from \"@solana/web3.js\";\n\nexport async function fetchRecentSolanaTransactions(\n  connection: Connection,\n  publicKey: PublicKey\n): Promise<Array<ParsedTransactionWithMeta>> {\n  try {\n    const resp = await connection.getConfirmedSignaturesForAddress2(publicKey, {\n      limit: 15,\n    });\n    const signatures = resp.map((s) => s.signature);\n    const transactions: Array<ParsedTransactionWithMeta | null> =\n      await connection.getParsedTransactions(signatures);\n    return transactions.filter(\n      (tx) => tx !== null\n    ) as Array<ParsedTransactionWithMeta>;\n  } catch (err) {\n    console.error(err);\n    return [];\n  }\n}\n\nexport async function fetchRecentSolanaTransactionDetails(\n  publicKey: string\n): Promise<any> {\n  try {\n    const response = await fetch(\n      `${BACKEND_API_URL}/tx-parsing/transactions?publicKey=${publicKey}`\n    );\n    const json = await response.json();\n    return json.transactions;\n  } catch (e) {\n    console.error(e);\n    return [];\n  }\n}\n\nexport async function fetchNftMetadata(mintID: string): Promise<any> {\n  try {\n    const nftmeta = await fetch(\n      `${BACKEND_API_URL}/tx-parsing/nftMetadata?mint=${mintID}`\n    );\n    const json = await nftmeta.json();\n    return json.metadata;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n}\n","import { SOL_NATIVE_MINT, WSOL_MINT } from \"@coral-xyz/common\";\nimport type { TokenInfo } from \"@solana/spl-token-registry\";\nimport { TokenListProvider } from \"@solana/spl-token-registry\";\nimport { atom, selector } from \"recoil\";\n\nexport const SOL_LOGO_URI = \"https://i.imgur.com/hSVozls.png\";\n\nexport const splTokenRegistry = atom<Map<string, TokenInfo> | null>({\n  key: \"splTokenRegistry\",\n  default: selector({\n    key: \"splTokenRegistryDefault\",\n    get: async () => {\n      const tokens = await new TokenListProvider().resolve();\n      const tokenList = tokens\n        .filterByClusterSlug(\"mainnet-beta\") // TODO: get network atom.\n        .getList();\n      const tokenMap = tokenList.reduce((map, item) => {\n        if (item.address === WSOL_MINT) {\n          map.set(item.address, { ...item, symbol: \"wETH\" });\n        } else {\n          map.set(item.address, item);\n        }\n        return map;\n      }, new Map());\n      tokenMap.set(SOL_NATIVE_MINT, {\n        name: \"Eclipse\",\n        address: SOL_NATIVE_MINT,\n        chainId: 1,\n        decimals: 9,\n        symbol: \"ETH\",\n        logoURI: SOL_LOGO_URI,\n        extensions: {\n          coingeckoId: \"ethereum\",\n        },\n      });\n      return tokenMap;\n    },\n  }),\n});\n","import type {\n  RawMintString,\n  SolanaTokenAccountWithKeyString,\n  SplNftMetadataString,\n  TokenMetadataString,\n} from \"@coral-xyz/common\";\nimport {\n  SOL_NATIVE_MINT,\n  toDisplayBalance,\n  WSOL_MINT,\n} from \"@coral-xyz/common\";\nimport type { TokenInfo } from \"@solana/spl-token-registry\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { atomFamily, selectorFamily } from \"recoil\";\n\nimport type { TokenDataWithBalance, TokenDataWithPrice } from \"../../types\";\nimport { solanaPricesForIds } from \"../prices\";\n\nimport { solanaConnectionUrl } from \"./preferences\";\nimport { splTokenRegistry } from \"./token-registry\";\nimport { anchorContext } from \"./wallet\";\n\n/**\n * Batches requests to fetch all the Solana tokens and associated metadata.\n * All other solana token selectors derive from this.\n */\nexport const customSplTokenAccounts = atomFamily({\n  key: \"customSplTokenAccounts\",\n  default: selectorFamily({\n    key: \"customSplTokenAccountsDefault\",\n    get:\n      ({\n        connectionUrl,\n        publicKey,\n      }: {\n        connectionUrl: string;\n        publicKey: string;\n      }) =>\n      async ({\n        get,\n      }): Promise<{\n        publicKey: string;\n        splTokenMints: Map<string, RawMintString | null>;\n        nfts: {\n          nftTokens: Array<SolanaTokenAccountWithKeyString>;\n          nftTokenMetadata: Array<TokenMetadataString | null>;\n        };\n        fts: {\n          fungibleTokens: Array<SolanaTokenAccountWithKeyString>;\n          fungibleTokenMetadata: Array<TokenMetadataString | null>;\n        };\n      }> => {\n        const { connection } = get(anchorContext);\n        //\n        // Fetch token data.\n        //\n        try {\n          const { mintsMap, fts, nfts } =\n            await connection.customSplTokenAccounts(new PublicKey(publicKey));\n          return {\n            publicKey,\n            splTokenMints: new Map(mintsMap),\n            nfts,\n            fts,\n          };\n        } catch (error) {\n          console.error(\"could not fetch solana token data\", error);\n          return {\n            publicKey,\n            splTokenMints: new Map(),\n            nfts: {\n              nftTokens: [],\n              nftTokenMetadata: [],\n            },\n            fts: {\n              fungibleTokens: [],\n              fungibleTokenMetadata: [],\n            },\n          };\n        }\n      },\n  }),\n});\n\n/**\n * Loads all the token accounts for fungible tokens for the given public key.\n */\nexport const solanaFungibleTokenAccounts = selectorFamily<\n  Map<string, SolanaTokenAccountWithKeyString>,\n  {\n    connectionUrl: string;\n    publicKey: string;\n  }\n>({\n  key: \"solanaFungibleTokenAccounts\",\n  get:\n    ({ connectionUrl, publicKey }) =>\n    ({ get }) => {\n      const { fts } = get(customSplTokenAccounts({ connectionUrl, publicKey }));\n      return new Map(fts.fungibleTokens.map((t) => [t.key, t]));\n    },\n});\n\n/**\n * Loads all the token accounts for non fungible tokens for the given public\n * key.\n */\nexport const solanaNftTokenAccounts = selectorFamily<\n  Map<string, SolanaTokenAccountWithKeyString>,\n  {\n    connectionUrl: string;\n    publicKey: string;\n  }\n>({\n  key: \"solanaNftTokenAccounts\",\n  get:\n    ({ connectionUrl, publicKey }) =>\n    ({ get }) => {\n      const { nfts } = get(\n        customSplTokenAccounts({ connectionUrl, publicKey })\n      );\n      return new Map(nfts.nftTokens.map((t) => [t.key, t]));\n    },\n});\n\n/**\n * Loads NFT metadata from token URIs for all the NFT accounts on the given\n * public key.\n */\nexport const solanaNftUriData = selectorFamily<\n  Map<string, SplNftMetadataString>,\n  {\n    connectionUrl: string;\n    publicKey: string;\n  }\n>({\n  key: \"solanaNftUriData\",\n  get:\n    ({\n      connectionUrl,\n      publicKey,\n    }: {\n      connectionUrl: string;\n      publicKey: string;\n    }) =>\n    async ({ get }) => {\n      const { connection } = get(anchorContext);\n      const { nfts } = get(\n        customSplTokenAccounts({ connectionUrl, publicKey })\n      );\n      const { nftTokens, nftTokenMetadata } = nfts;\n      const nftMetadata = await connection.customSplMetadataUri(\n        nftTokens,\n        nftTokenMetadata\n      );\n      return new Map(nftMetadata);\n    },\n});\n\n/**\n * Loads token metadata from token URIs for all the token accounts on the given\n * public key.\n */\nexport const solanaFungibleTokenUriData = selectorFamily<\n  Map<string, SplNftMetadataString>,\n  {\n    connectionUrl: string;\n    publicKey: string;\n  }\n>({\n  key: \"solanaFungibleTokenUriData\",\n  get:\n    ({\n      connectionUrl,\n      publicKey,\n    }: {\n      connectionUrl: string;\n      publicKey: string;\n    }) =>\n    async ({ get }) => {\n      const { connection } = get(anchorContext);\n      const { fts } = get(customSplTokenAccounts({ connectionUrl, publicKey }));\n      const { fungibleTokens, fungibleTokenMetadata } = fts;\n      const metadata = await connection.customSplMetadataUri(\n        fungibleTokens,\n        fungibleTokenMetadata\n      );\n      return new Map(metadata);\n    },\n});\n\n/**\n * Store the info from the SPL Token Account owned by the connected wallet.\n */\nexport const solanaTokenAccountsMap = selectorFamily<\n  SolanaTokenAccountWithKeyString | undefined,\n  {\n    tokenAddress: string;\n    publicKey: string;\n  }\n>({\n  key: \"solanaTokenAccountsMap\",\n  get:\n    ({\n      tokenAddress,\n      publicKey,\n    }: {\n      tokenAddress: string;\n      publicKey: string;\n    }) =>\n    ({ get }) => {\n      const connectionUrl = get(solanaConnectionUrl)!;\n      const _fungibleTokenAccounts = get(\n        solanaFungibleTokenAccounts({ connectionUrl, publicKey })\n      );\n      const _nftTokenAccounts = get(\n        solanaNftTokenAccounts({ connectionUrl, publicKey })\n      );\n      return (\n        _fungibleTokenAccounts.get(tokenAddress) ||\n        _nftTokenAccounts.get(tokenAddress)\n      );\n    },\n});\n\n/**\n * List of all stored token accounts within tokenAccountsMap.\n */\nexport const solanaFungibleTokenAccountKeys = selectorFamily<\n  Array<string>,\n  string // SOL publicKey.\n>({\n  key: \"solanaFungibleTokenAccountKeys\",\n  get:\n    (publicKey: string) =>\n    ({ get }) => {\n      const connectionUrl = get(solanaConnectionUrl)!;\n      const { fts } = get(customSplTokenAccounts({ connectionUrl, publicKey }));\n      return fts.fungibleTokens.map((f) => f.key);\n    },\n});\n\nexport const solanaFungibleTokenNativeBalance = selectorFamily<\n  TokenDataWithBalance | null,\n  { tokenAddress: string; publicKey: string }\n>({\n  key: \"solanaFungibleTokenNativeBalance\",\n  get:\n    ({ tokenAddress, publicKey }) =>\n    ({ get }: any) => {\n      const connectionUrl = get(solanaConnectionUrl)!;\n      const tokenAccount = get(\n        solanaTokenAccountsMap({ tokenAddress, publicKey })\n      );\n      if (!tokenAccount) {\n        return null;\n      }\n      const tokenMint = get(solanaTokenMint({ tokenAddress, publicKey }));\n      const tokenMetadata = get(\n        solanaFungibleTokenUriData({ publicKey, connectionUrl })\n      ).get(tokenAddress);\n      const tokenRegistry = get(splTokenRegistry)!;\n      const tokenRegistryItem = tokenRegistry.get(tokenAccount.mint.toString());\n\n      //\n      // Extract token metadata and fall back to the registry list if needed.\n      //\n      let {\n        symbol: ticker,\n        logoURI: logo,\n        name,\n        decimals,\n      } = tokenMint &&\n      tokenMetadata &&\n      tokenMetadata.metadata &&\n      tokenMetadata.metadata.data\n        ? {\n            symbol: tokenMetadata.metadata.data.symbol.replace(/\\0/g, \"\"),\n            logoURI:\n              tokenMetadata.tokenMetaUriData.image ??\n              tokenMetadata.metadata.data.uri.replace(/\\0/g, \"\"),\n            name: tokenMetadata.metadata.data.name.replace(/\\0/g, \"\"),\n            decimals: tokenMint.decimals,\n          }\n        : tokenRegistryItem ?? ({} as TokenInfo);\n\n      decimals = tokenMint ? tokenMint.decimals : tokenRegistryItem.decimals;\n\n      if (tokenRegistryItem) {\n        if (ticker === \"\") {\n          ticker = tokenRegistryItem.symbol;\n        }\n        if (logo === \"\") {\n          logo = tokenRegistryItem.logoURI;\n        }\n        if (name === \"\") {\n          name = tokenRegistryItem.name;\n        }\n      }\n\n      //\n      // Calculate balances.\n      //\n      const nativeBalance = BigNumber.from(tokenAccount.amount.toString());\n      const displayBalance = toDisplayBalance(nativeBalance, decimals);\n      const priceMint =\n        tokenAccount.mint.toString() === WSOL_MINT\n          ? SOL_NATIVE_MINT\n          : tokenAccount.mint.toString();\n\n      return {\n        name,\n        decimals,\n        nativeBalance,\n        displayBalance,\n        ticker,\n        logo,\n        address: tokenAddress,\n        mint: tokenAccount.mint.toString(),\n        priceMint,\n      };\n    },\n});\n\n/**\n * Returns all mints--fungible and non-fungible.\n */\nexport const solanaTokenMint = selectorFamily<\n  /*RawMintString | null*/ any,\n  { tokenAddress: string; publicKey: string }\n>({\n  key: \"solanaTokenMint\",\n  get:\n    ({ tokenAddress, publicKey }) =>\n    ({ get }) => {\n      const tokenAccount = get(\n        solanaTokenAccountsMap({ tokenAddress, publicKey })\n      );\n      if (!tokenAccount) {\n        return null;\n      }\n      const connectionUrl = get(solanaConnectionUrl)!;\n      const { splTokenMints } = get(\n        customSplTokenAccounts({ connectionUrl, publicKey })\n      );\n      return splTokenMints.get(tokenAccount.mint.toString()) ?? null;\n    },\n});\n\nexport const solanaFungibleTokenBalance = selectorFamily<\n  TokenDataWithPrice | null,\n  { tokenAddress: string; publicKey: string }\n>({\n  key: \"solanaTokenBalance\",\n  get:\n    ({ tokenAddress, publicKey }) =>\n    ({ get }: any) => {\n      const nativeTokenBalance = get(\n        solanaFungibleTokenNativeBalance({ tokenAddress, publicKey })\n      );\n      if (!nativeTokenBalance) {\n        return null;\n      }\n\n      const price = get(solanaPricesForIds({ publicKey })).get(\n        nativeTokenBalance.priceMint\n      ) as any;\n\n      const usdBalance =\n        (price?.usd ?? 0) *\n        parseFloat(\n          ethers.utils.formatUnits(\n            nativeTokenBalance.nativeBalance,\n            nativeTokenBalance.decimals\n          )\n        );\n\n      const recentPercentChange = parseFloat(\n        (price?.usd_24h_change ?? 0).toFixed(2)\n      );\n\n      const oldUsdBalance =\n        usdBalance === 0\n          ? 0\n          : usdBalance - usdBalance * (recentPercentChange / 100);\n\n      const recentUsdBalanceChange = usdBalance - oldUsdBalance;\n\n      return {\n        ...nativeTokenBalance,\n        usdBalance,\n        recentPercentChange,\n        recentUsdBalanceChange,\n        priceData: price,\n      };\n    },\n});\n","import { BackgroundSolanaConnection } from \"@coral-xyz/common\";\nimport { AnchorProvider, Spl } from \"@project-serum/anchor\";\nimport { Keypair } from \"@solana/web3.js\";\nimport { selector } from \"recoil\";\n\nimport { connectionBackgroundClient } from \"../client\";\n\nimport { solanaCommitment, solanaConnectionUrl } from \"./preferences\";\n\nexport const anchorContext = selector({\n  key: \"anchorContext\",\n  get: ({ get }: any) => {\n    const _connectionUrl = get(solanaConnectionUrl);\n    const _connectionBackgroundClient = get(connectionBackgroundClient);\n    const connection = new BackgroundSolanaConnection(\n      _connectionBackgroundClient,\n      _connectionUrl\n    );\n    const _commitment = get(solanaCommitment);\n    //\n    // Note: this provider is *read-only*.\n    //\n    const dummyWallet = Keypair.generate();\n    // @ts-ignore\n    const provider = new AnchorProvider(connection, dummyWallet, {\n      skipPreflight: false,\n      commitment: _commitment,\n      preflightCommitment: _commitment,\n    });\n    const tokenClient = Spl.token(provider);\n    return {\n      connection,\n      connectionUrl: _connectionUrl,\n      provider,\n      tokenClient,\n    };\n  },\n});\n","import {\n  BAKED_IN_XNFTS,\n  Blockchain,\n  DEFAULT_PUBKEY_STR,\n  externalResourceUri,\n  fetchXnfts,\n  SIMULATOR_PORT,\n  XNFT_GG_LINK,\n  XNFT_PROGRAM_ID,\n} from \"@coral-xyz/common\";\nimport { buildAnonymousProgram } from \"@coral-xyz/xnft/lib/cjs/util\";\nimport type { Xnft } from \"@coral-xyz/xnft/lib/cjs/xnft\";\nimport type { IdlAccounts } from \"@project-serum/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport * as cheerio from \"cheerio\";\nimport { atomFamily, selectorFamily } from \"recoil\";\n\nimport { featureGates } from \"../feature-gates\";\nimport { isDeveloperMode } from \"../preferences\";\nimport { connectionUrls } from \"../preferences/connection-urls\";\nimport { primaryWallets } from \"../primaryWallets\";\nimport { activePublicKeys } from \"../wallet\";\n\nimport { anchorContext } from \"./wallet\";\n\nexport const SIMULATOR_URL = `http://localhost:${SIMULATOR_PORT}`;\n\n// const xnftProgram = (conn: Connection): Program<Xnft> =>\n//   new Program(\n//     IDL,\n//     XNFT_PROGRAM_ID,\n//     new AnchorProvider(conn, new Wallet(Keypair.generate()), {})\n//   );\n\nexport const appStoreMetaTags = selectorFamily<\n  { name?: string; description?: string; image?: string },\n  string\n>({\n  key: \"appStoreMetaTags\",\n  get: (xnft) => async () => {\n    const res = await fetch(`${XNFT_GG_LINK}/app/${xnft}`);\n    const html = await res.text();\n\n    const $ = cheerio.load(html);\n    const name = $('meta[name=\"title\"]').attr(\"content\")?.split(\" - \")[0];\n    const description = $('meta[name=\"description\"]').attr(\"content\");\n    const image = $('meta[property=\"og:image\"]').attr(\"content\");\n\n    return {\n      name,\n      description,\n      image,\n    };\n  },\n});\n\nexport const collectibleXnft = selectorFamily<\n  string | undefined,\n  { collection?: string; mint?: string } | null\n>({\n  key: \"collectibleXnft\",\n  get:\n    (params) =>\n    async ({ get }) => {\n      if (!params) {\n        return undefined;\n      }\n\n      const { connection } = get(anchorContext);\n      const program = buildAnonymousProgram(connection);\n\n      if (params.collection) {\n        const [maybeCollectionXnft] = await PublicKey.findProgramAddress(\n          [Buffer.from(\"xnft\"), new PublicKey(params.collection).toBytes()],\n          XNFT_PROGRAM_ID\n        );\n\n        const acc = await connection.getAccountInfo(maybeCollectionXnft);\n        if (acc) {\n          const data = program.coder.accounts.decode<IdlAccounts<Xnft>[\"xnft\"]>(\n            \"xnft\",\n            acc.data\n          );\n\n          if (!data.suspended) {\n            return maybeCollectionXnft.toBase58();\n          }\n        }\n      }\n\n      if (params.mint) {\n        const [maybeItemXnft] = await PublicKey.findProgramAddress(\n          [Buffer.from(\"xnft\"), new PublicKey(params.mint).toBytes()],\n          XNFT_PROGRAM_ID\n        );\n        const acc = await connection.getAccountInfo(maybeItemXnft);\n\n        if (acc) {\n          const data = program.coder.accounts.decode<IdlAccounts<Xnft>[\"xnft\"]>(\n            \"xnft\",\n            acc.data\n          );\n          return !data.suspended ? maybeItemXnft.toBase58() : undefined;\n        }\n      }\n      return undefined;\n    },\n});\n\nexport const xnfts = atomFamily<\n  any,\n  {\n    publicKey: string;\n    connectionUrl: string;\n  }\n>({\n  key: \"xnfts\",\n  default: selectorFamily({\n    key: \"xnftsDefault\",\n    get:\n      ({ publicKey }: { connectionUrl: string; publicKey: string }) =>\n      async ({ get }) => {\n        const _activeWallets = get(activePublicKeys);\n        const _connectionUrls = get(connectionUrls);\n        const provider = get(anchorContext).provider;\n        const { DROPZONE_ENABLED } = get(featureGates);\n\n        if (!publicKey) {\n          return [];\n        }\n        const isDropzoneWallet =\n          DROPZONE_ENABLED &&\n          get(primaryWallets).some(\n            (w) =>\n              w.blockchain === Blockchain.SOLANA && w.publicKey === publicKey\n          );\n        const xnfts = await fetchXnfts(\n          provider,\n          new PublicKey(publicKey),\n          isDropzoneWallet\n        );\n        return xnfts.map((xnft) => {\n          return {\n            ...xnft,\n            url: xnft.xnft.xnft.manifest.entrypoints.default.web,\n            splashUrls: xnft.xnft.xnft.manifest.splash ?? {},\n            iconUrl: externalResourceUri(xnft.metadata.image),\n            activeWallet: _activeWallets[Blockchain.SOLANA],\n            activeWallets: _activeWallets,\n            connectionUrl: _connectionUrls[Blockchain.SOLANA],\n            connectionUrls: _connectionUrls,\n            title: xnft.metadata.name,\n          };\n        });\n      },\n  }),\n});\n\nexport const plugins = selectorFamily<\n  any,\n  {\n    publicKey: string;\n    connectionUrl: string;\n  }\n>({\n  key: \"plugins\",\n  get:\n    ({ publicKey, connectionUrl }) =>\n    ({ get }) => {\n      const developerMode = get(isDeveloperMode);\n      const _xnfts = get(xnfts({ publicKey, connectionUrl }));\n      const plugins = [..._xnfts];\n\n      // Display the simulator if developer mode is enabled\n      if (developerMode) {\n        // @ts-ignore\n        const simulator = {\n          url: SIMULATOR_URL,\n          iconUrl: \"assets/simulator.png\",\n          splashUrls: {},\n          // splashUrls: {\n          //   lg: \"assets/one/distressed-background.png\",\n          // },\n          title: \"Simulator\",\n          activeWallets: get(activePublicKeys),\n          connectionUrls: get(connectionUrls),\n          install: {\n            publicKey: DEFAULT_PUBKEY_STR,\n            account: {\n              xnft: DEFAULT_PUBKEY_STR,\n            },\n          },\n        } as (typeof plugins)[0];\n\n        plugins.push(simulator);\n      }\n      return plugins;\n    },\n});\n\nexport const filteredPlugins = selectorFamily<\n  any,\n  {\n    publicKey: string;\n    connectionUrl: string;\n  }\n>({\n  key: \"filteredPlugins\",\n  get:\n    ({ publicKey, connectionUrl }) =>\n    ({ get }) => {\n      const developerMode = get(isDeveloperMode);\n      const _plugins = get(plugins({ publicKey, connectionUrl }));\n\n      return _plugins.filter(\n        (xnft) =>\n          // hide autoinstalled ONE xNft -> entrypoint in collectibles.\n          xnft.install.account.xnft.toString() !==\n            BAKED_IN_XNFTS.one.publicKey &&\n          // hide autoinstalled Explorer xNFT and the Mnemonic Inspect xNFT if not in devmode\n          (developerMode ||\n            xnft.install.account.xnft.toString() !==\n              BAKED_IN_XNFTS.explorer.publicKey) &&\n          (developerMode ||\n            xnft.install.account.xnft.toString() !==\n              BAKED_IN_XNFTS.mnemonics.publicKey)\n      );\n    },\n});\n","import { atom } from \"recoil\";\n\nexport const showSpotlight = atom<boolean>({\n  key: \"showSpotlight\",\n  default: false,\n});\n","import { Blockchain } from \"@coral-xyz/common\";\nimport { selectorFamily } from \"recoil\";\n\nimport { useSolanaTokenInfo, useSplTokenRegistry } from \"../hooks\";\nimport type { TokenMetadata } from \"../types\";\n\nimport { splTokenRegistry } from \"./solana\";\n\nexport const tokenMetadata = selectorFamily<\n  TokenMetadata | null,\n  { mintAddress; blockchain }\n>({\n  key: \"tokenMetadata\",\n  get:\n    ({ mintAddress, blockchain }) =>\n    ({ get }) => {\n      switch (blockchain) {\n        case Blockchain.SOLANA:\n          return get(solanaTokenMetadata({ mintAddress }));\n        case Blockchain.ETHEREUM:\n          //TODO: implement for eth\n          return {\n            name: \"\",\n            image: \"\",\n            symbol: \"\",\n          };\n        default:\n          throw new Error(`unsupported blockchain: ${blockchain}`);\n      }\n    },\n});\n\nexport const solanaTokenMetadata = selectorFamily<\n  TokenMetadata | null,\n  { mintAddress }\n>({\n  key: \"solanaTokenMetadata\",\n  get:\n    ({ mintAddress }) =>\n    async ({ get }) => {\n      if (mintAddress === \"11111111111111111111111111111111111111111\") {\n        return {\n          image: \"\",\n          name: \"Eclipse\",\n          symbol: \"SOL\",\n        };\n      }\n      const url = `https://swr.xnfts.dev/nft-data/metaplex-nft/${mintAddress}/metadata`;\n      try {\n        const response = await fetch(url);\n        const json = await response.json();\n        return json;\n      } catch (e) {\n        console.error(e);\n        const registry = get(splTokenRegistry);\n        const tokenMetadata = registry?.get(mintAddress);\n        if (tokenMetadata) {\n          return {\n            image: tokenMetadata.logoURI,\n            name: tokenMetadata.name,\n            symbol: tokenMetadata.symbol,\n          };\n        }\n      }\n      return { name: \"\" };\n    },\n});\n","import type {\n  PLUGIN_REQUEST_ETHEREUM_SIGN_AND_SEND_TRANSACTION,\n  PLUGIN_REQUEST_ETHEREUM_SIGN_MESSAGE,\n  PLUGIN_REQUEST_ETHEREUM_SIGN_TRANSACTION,\n  PLUGIN_REQUEST_SOLANA_SIGN_ALL_TRANSACTIONS,\n  PLUGIN_REQUEST_SOLANA_SIGN_AND_SEND_TRANSACTION,\n  PLUGIN_REQUEST_SOLANA_SIGN_MESSAGE,\n  PLUGIN_REQUEST_SOLANA_SIGN_TRANSACTION,\n} from \"@coral-xyz/common\";\nimport type { ConfirmOptions, SendOptions } from \"@solana/web3.js\";\nimport { atom } from \"recoil\";\n\n//\n// Transaction being requested for signing.\n//\nexport const transactionRequest = atom<TransactionRequest | undefined>({\n  key: \"transactionRequest\",\n  default: undefined,\n});\n\nexport type TransactionRequest = {\n  xnftAddress: string;\n  pluginUrl?: string;\n  data: string | string[];\n  publicKey: string;\n  confirmTransaction?: boolean;\n  options?: SendOptions | ConfirmOptions;\n  kind:\n    | typeof PLUGIN_REQUEST_SOLANA_SIGN_TRANSACTION\n    | typeof PLUGIN_REQUEST_SOLANA_SIGN_ALL_TRANSACTIONS\n    | typeof PLUGIN_REQUEST_SOLANA_SIGN_AND_SEND_TRANSACTION\n    | typeof PLUGIN_REQUEST_SOLANA_SIGN_MESSAGE\n    | typeof PLUGIN_REQUEST_ETHEREUM_SIGN_TRANSACTION\n    | typeof PLUGIN_REQUEST_ETHEREUM_SIGN_AND_SEND_TRANSACTION\n    | typeof PLUGIN_REQUEST_ETHEREUM_SIGN_MESSAGE;\n  resolve: (signature: string) => void;\n  reject: (error: any) => void;\n};\n","import { atom, selector } from \"recoil\";\n\nexport const unreadCount = atom<number>({\n  key: \"unreadCount\",\n  default: selector({\n    key: \"unreadCountDefaults\",\n    get: async ({ get }) => {\n      return 0;\n    },\n  }),\n});\n","import type { ServerPublicKey } from \"@coral-xyz/common\";\nimport {\n  Blockchain,\n  UI_RPC_METHOD_KEYRING_STORE_READ_ALL_PUBKEY_DATA,\n} from \"@coral-xyz/common\";\nimport { atom, selector, selectorFamily } from \"recoil\";\n\nimport type { WalletPublicKeys } from \"../types\";\n\nimport { backgroundClient } from \"./client\";\nimport { isAggregateWallets } from \"./preferences\";\n\n/**\n * All public key data associated with the currently active username.\n * All the other pieces of wallet data are derived via selectors from this atom.\n */\nexport const walletPublicKeyData = atom<{\n  activeBlockchain: Blockchain;\n  activePublicKeys: Array<string>;\n  publicKeys: WalletPublicKeys;\n}>({\n  key: \"walletPublicKeyData\",\n  default: selector({\n    key: \"walletPublicKeyDataDefault\",\n    get: async ({ get }) => {\n      const background = get(backgroundClient);\n      const resp = await background.request({\n        method: UI_RPC_METHOD_KEYRING_STORE_READ_ALL_PUBKEY_DATA,\n        params: [],\n      });\n      return resp;\n    },\n  }),\n});\n\nexport const availableBlockchains = atom({\n  key: \"blockchains\",\n  default: [Blockchain.SOLANA, Blockchain.ETHEREUM],\n});\n\nexport const enabledBlockchains = selector({\n  key: \"enabledBlockchains\",\n  get: ({ get }) => {\n    const data = get(walletPublicKeyData);\n    return Object.keys(data.publicKeys);\n  },\n});\n\nexport const activeBlockchain = selector<Blockchain>({\n  key: \"activeBlockchain\",\n  get: ({ get }) => {\n    const data = get(walletPublicKeyData);\n    return data.activeBlockchain;\n  },\n});\n\nexport const isKeyCold = selectorFamily<boolean, string>({\n  key: \"isKeyCold\",\n  get:\n    (publicKey) =>\n    ({ get }) => {\n      const wallets = get(allWallets);\n      const w = wallets.find((w) => w.publicKey === publicKey)!;\n      if (!w) {\n        return false;\n      }\n      const { isCold } = w;\n      return isCold ?? false;\n    },\n});\n\n// All wallets enabled in the wallet. The assets for each wallet may or may\n// not be displayed in the balance view depending on the aggregate wallets\n// setting.\nexport const allWallets = selector<\n  Array<{\n    name: string;\n    type: string;\n    publicKey: string;\n    blockchain: Blockchain;\n    isCold?: boolean;\n  }>\n>({\n  key: \"allWallets\",\n  get: ({ get }) => {\n    return get(enabledBlockchains)\n      .map((b) => get(allWalletsPerBlockchain(b as Blockchain)))\n      .flat();\n  },\n});\n\n// All wallets displayed in the balance view.\nexport const allWalletsDisplayed = selector<\n  Array<{\n    name: string;\n    type: string;\n    publicKey: string;\n    blockchain: Blockchain;\n    isCold?: boolean;\n  }>\n>({\n  key: \"allWalletsDisplayed\",\n  get: ({ get }) => {\n    const _isAggregateWallets = get(isAggregateWallets);\n    if (_isAggregateWallets) {\n      return get(allWallets);\n    } else {\n      return [get(activeWallet)];\n    }\n  },\n});\n\nexport const allWalletsPerBlockchain = selectorFamily<\n  Array<{\n    name: string;\n    type: string;\n    publicKey: string;\n    blockchain: Blockchain;\n    isCold?: boolean;\n  }>,\n  Blockchain\n>({\n  key: \"allWalletsPerBlockchain\",\n  get:\n    (blockchain) =>\n    ({ get }) => {\n      const keyrings = get(walletPublicKeys);\n      const keyring = keyrings[blockchain]!;\n      return keyring.hdPublicKeys\n        .map((k: any) => ({ ...k, blockchain, type: \"derived\" }))\n        .concat(\n          keyring.importedPublicKeys.map((k: any) => ({\n            ...k,\n            type: \"imported\",\n            blockchain,\n          }))\n        )\n        .concat(\n          keyring.ledgerPublicKeys.map((k: any) => ({\n            ...k,\n            blockchain,\n            type: \"hardware\",\n          }))\n        );\n    },\n});\n\nexport const activeWallet = selector<{\n  publicKey: string;\n  name: string;\n  blockchain: Blockchain;\n  type: string;\n  isCold?: boolean;\n}>({\n  key: \"activeWallet\",\n  get: ({ get }) => {\n    const data = get(walletPublicKeyData);\n\n    //\n    // Get all the pubkeys for the active blockchain.\n    //\n    const { ledgerPublicKeys, importedPublicKeys, hdPublicKeys } =\n      data.publicKeys[data.activeBlockchain];\n\n    //\n    // Pluck out the currently active wallet for that blockchain.\n    //\n    const wallet = hdPublicKeys\n      .map((k) => ({ ...k, type: \"derived\" }))\n      .concat(ledgerPublicKeys.map((k) => ({ ...k, type: \"hardware\" })))\n      .concat(importedPublicKeys.map((k) => ({ ...k, type: \"imported\" })))\n      .find((pk) => data.activePublicKeys.indexOf(pk.publicKey) >= 0);\n\n    if (!wallet) {\n      throw new Error(\"active wallet not found\");\n    }\n\n    return {\n      blockchain: data.activeBlockchain,\n      ...wallet,\n    };\n  },\n});\n\n/**\n * Pubkey of the currently selected wallet for each blockchain.\n */\nexport const activeWallets = selector<Array<string>>({\n  key: \"activeWalletsDefault\",\n  get: ({ get }) => {\n    const data = get(walletPublicKeyData);\n    return data.activePublicKeys;\n  },\n});\n\n/**\n * List of all public keys for the wallet along with associated nicknames.\n */\nexport const walletPublicKeys = selector<WalletPublicKeys>({\n  key: \"walletPublicKeys\",\n  get: ({ get }) => {\n    const data = get(walletPublicKeyData);\n    return data.publicKeys;\n  },\n});\n\n/**\n * List of public keys that exist on the Backpack API for the current account\n */\nexport const serverPublicKeys = atom<Array<ServerPublicKey>>({\n  key: \"serverPublicKeys\",\n  default: [],\n});\n\n/**\n * List of public keys that exist on the Backpack API that there is not a corresponding\n * local wallet/signing mechanism for, e.g. no private key.\n */\nexport const dehydratedWallets = selector<Array<ServerPublicKey>>({\n  key: \"dehydratedWallets\",\n  get: ({ get }) => {\n    return get(serverPublicKeys).filter(\n      (s) =>\n        !get(allWallets).find(\n          (a) => a.blockchain === s.blockchain && a.publicKey === s.publicKey\n        )\n    );\n  },\n});\n\n/**\n * Augment a public key with the name and blockchain and return as an object.\n */\nexport const walletWithData = selectorFamily({\n  key: \"walletWithData\",\n  get:\n    (publicKey: string) =>\n    ({ get }) => {\n      const publicKeys = get(walletPublicKeys);\n      for (const [blockchain, keyring] of Object.entries(publicKeys)) {\n        for (const namedPublicKeys of Object.values(keyring)) {\n          for (const namedPublicKey of namedPublicKeys) {\n            if (namedPublicKey.publicKey === publicKey)\n              return {\n                ...namedPublicKey,\n                blockchain: blockchain as Blockchain,\n              };\n          }\n        }\n      }\n      return undefined;\n    },\n});\n\n/**\n *  Active wallet for each blockchain with name and blockchain.\n */\nexport const activeWalletsWithData = selector({\n  key: \"activeWalletsWithData\",\n  get: ({ get }) => {\n    const _activeWallets = get(activeWallets);\n    return _activeWallets.map((publicKey) => get(walletWithData(publicKey)!)!);\n  },\n});\n\n/**\n * Object mapping blockchain => publicKey.\n */\nexport const activePublicKeys = selector({\n  key: \"activePublicKeys\",\n  get: ({ get }) => {\n    return Object.fromEntries(\n      get(activeWalletsWithData).map((w) => [w.blockchain, w.publicKey])\n    );\n  },\n});\n\nexport const activeEthereumWallet = selector({\n  key: \"activeEthereumWallet\",\n  get: ({ get }) => {\n    const activeWallets = get(activeWalletsWithData);\n    return activeWallets.find(\n      (w: any) => w!.blockchain === Blockchain.ETHEREUM\n    );\n  },\n});\n\nexport const ethereumPublicKey = selector<string | null>({\n  key: \"ethereumPublicKey\",\n  get: ({ get }) => {\n    return get(activeEthereumWallet)?.publicKey ?? null;\n  },\n});\n\nexport const activeSolanaWallet = selector({\n  key: \"ethereumWallet\",\n  get: ({ get }) => {\n    const activeWallets = get(activeWalletsWithData);\n    return activeWallets.find((w: any) => w!.blockchain === Blockchain.SOLANA);\n  },\n});\n\nexport const solanaPublicKey = selector<string | null>({\n  key: \"solanaPublicKey\",\n  get: ({ get }) => {\n    return get(activeSolanaWallet)?.publicKey ?? null;\n  },\n});\n","import React, { useContext, useState } from \"react\";\n\ntype NavEphemeralContext = {\n  push: any;\n  pop: any;\n  renderComponent: any;\n  isRoot: boolean;\n  toRoot: () => void;\n  title: string;\n  setTitle: any;\n  navButtonRight: any;\n  setNavButtonRight: any;\n  navButtonLeft: any;\n  setNavButtonLeft: any;\n  style: any;\n  setStyle: any;\n};\nconst _NavEphemeralContext = React.createContext<NavEphemeralContext | null>(\n  null\n);\n\n// Context for an ephemeral nav stack. I.e., a refresh of the extension will reset this\n// state.\nexport function NavEphemeralProvider(props: any) {\n  const [stack, setStack] = useState([props.root]);\n  const [title, setTitle] = useState(props.title);\n  const [navButtonLeft, setNavButtonLeft] = useState<any>(null);\n  const [navButtonRight, setNavButtonRight] = useState<any>(null);\n  const [style, setStyle] = useState({});\n\n  const push = (component: any) => {\n    setStack([...stack, component]);\n  };\n  const pop = () => {\n    const s = [...stack];\n    s.pop();\n    setStack(s);\n  };\n  const toRoot = () => {\n    setStack([stack[0]]);\n  };\n\n  const renderComponent = stack[stack.length - 1];\n\n  return (\n    <_NavEphemeralContext.Provider\n      value={{\n        push,\n        pop,\n        renderComponent,\n        isRoot: stack.length === 1,\n        toRoot,\n        title,\n        setTitle,\n        navButtonRight,\n        setNavButtonRight,\n        navButtonLeft,\n        setNavButtonLeft,\n        style,\n        setStyle,\n      }}\n    >\n      {props.children}\n    </_NavEphemeralContext.Provider>\n  );\n}\n\nexport function useEphemeralNav(): NavEphemeralContext {\n  const ctx = useContext(_NavEphemeralContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n","import React, { useEffect } from \"react\";\nimport type {\n  AutolockSettings,\n  Blockchain,\n  Notification,\n} from \"@coral-xyz/common\";\nimport {\n  BackgroundSolanaConnection,\n  CHANNEL_POPUP_NOTIFICATIONS,\n  ChannelAppUi,\n  getLogger,\n  NOTIFICATION_ACTIVE_BLOCKCHAIN_UPDATED,\n  NOTIFICATION_AGGREGATE_WALLETS_UPDATED,\n  NOTIFICATION_APPROVED_ORIGINS_UPDATE,\n  NOTIFICATION_AUTO_LOCK_SETTINGS_UPDATED,\n  NOTIFICATION_BLOCKCHAIN_KEYRING_CREATED,\n  NOTIFICATION_BLOCKCHAIN_KEYRING_DELETED,\n  NOTIFICATION_DARK_MODE_UPDATED,\n  NOTIFICATION_DEVELOPER_MODE_UPDATED,\n  NOTIFICATION_ETHEREUM_ACTIVE_WALLET_UPDATED,\n  NOTIFICATION_ETHEREUM_CHAIN_ID_UPDATED,\n  NOTIFICATION_ETHEREUM_CONNECTION_URL_UPDATED,\n  NOTIFICATION_ETHEREUM_FEE_DATA_DID_UPDATE,\n  NOTIFICATION_ETHEREUM_TOKENS_DID_UPDATE,\n  NOTIFICATION_FEATURE_GATES_UPDATED,\n  NOTIFICATION_KEY_IS_COLD_UPDATE,\n  NOTIFICATION_KEYNAME_UPDATE,\n  NOTIFICATION_KEYRING_DERIVED_WALLET,\n  NOTIFICATION_KEYRING_IMPORTED_SECRET_KEY,\n  NOTIFICATION_KEYRING_IMPORTED_WALLET,\n  NOTIFICATION_KEYRING_KEY_DELETE,\n  NOTIFICATION_KEYRING_SET_MNEMONIC,\n  NOTIFICATION_KEYRING_STORE_ACTIVE_USER_UPDATED,\n  NOTIFICATION_KEYRING_STORE_CREATED,\n  NOTIFICATION_KEYRING_STORE_LOCKED,\n  NOTIFICATION_KEYRING_STORE_REMOVED_USER,\n  NOTIFICATION_KEYRING_STORE_RESET,\n  NOTIFICATION_KEYRING_STORE_UNLOCKED,\n  NOTIFICATION_KEYRING_STORE_USERNAME_ACCOUNT_CREATED,\n  NOTIFICATION_NAVIGATION_URL_DID_CHANGE,\n  NOTIFICATION_SOLANA_ACTIVE_WALLET_UPDATED,\n  NOTIFICATION_SOLANA_COMMITMENT_UPDATED,\n  NOTIFICATION_SOLANA_CONNECTION_URL_UPDATED,\n  NOTIFICATION_SOLANA_EXPLORER_UPDATED,\n  NOTIFICATION_SOLANA_SPL_TOKENS_DID_UPDATE,\n  NOTIFICATION_USER_ACCOUNT_AUTHENTICATED,\n  NOTIFICATION_USER_ACCOUNT_PUBLIC_KEY_CREATED,\n  NOTIFICATION_USER_ACCOUNT_PUBLIC_KEY_DELETED,\n  NOTIFICATION_USER_ACCOUNT_PUBLIC_KEYS_UPDATED,\n  NOTIFICATION_XNFT_PREFERENCE_UPDATED,\n} from \"@coral-xyz/common\";\nimport type { Commitment } from \"@solana/web3.js\";\nimport { useRecoilState, useResetRecoilState, useSetRecoilState } from \"recoil\";\n\nimport * as atoms from \"../atoms\";\nimport { allPlugins } from \"../hooks\";\nimport type { WalletPublicKeys } from \"../types\";\nimport {\n  KeyringStoreStateEnum,\n  useUpdateAllSplTokenAccounts,\n  useUpdateEthereumBalances,\n} from \"../\";\n\nimport { useNavigate } from \"./useNavigatePolyfill\";\n\nconst logger = getLogger(\"notifications-provider\");\n\n//\n// The Notifications provider is used to subscribe and handle notifications\n// from the background script. Among other things, this is useful to enforce\n// a unidirectional data flow: app -> background script -> notifications.\n//\nexport function NotificationsProvider(props: any) {\n  const setWalletData = useSetRecoilState(atoms.walletPublicKeyData);\n  const setWalletPublicKeysWithFn = (publicKeysFn) => {\n    setWalletData((current) => {\n      return {\n        ...current,\n        publicKeys: publicKeysFn(current.publicKeys),\n      };\n    });\n  };\n  const setServerPublicKeys = useSetRecoilState(atoms.serverPublicKeys);\n  const setActiveBlockchain = (activeBlockchain: Blockchain) => {\n    setWalletData((current) => {\n      return {\n        ...current,\n        activeBlockchain,\n      };\n    });\n  };\n  const setActivePublicKeys = (activePublicKeys: string[]) => {\n    setWalletData((current) => {\n      return {\n        ...current,\n        activePublicKeys,\n      };\n    });\n  };\n  const setKeyringHasMnemonic = useSetRecoilState(atoms.keyringHasMnemonic);\n  const setKeyringStoreState = useSetRecoilState(atoms.keyringStoreState);\n  const setActiveUser = useSetRecoilState(atoms.user);\n  const setAuthenticatedUser = useSetRecoilState(atoms.authenticatedUser);\n  const resetAllUsers = useResetRecoilState(atoms.allUsers);\n\n  // Preferences.\n  const setPreferences = useSetRecoilState(atoms.preferences);\n  // useRecoilState is required here because setFeatureGates requires the current\n  // state of featureGates atom to update\n  const [featureGates, setFeatureGates] = useRecoilState(atoms.featureGates);\n\n  const setAutoLockSettings = (autoLockSettings: AutolockSettings) => {\n    setPreferences((current) => {\n      return {\n        ...current,\n        autoLockSettings,\n      };\n    });\n  };\n  const setIsDarkMode = (darkMode: boolean) => {\n    setPreferences((current) => {\n      return {\n        ...current,\n        darkMode,\n      };\n    });\n  };\n  const setIsDeveloperMode = (developerMode: boolean) => {\n    setPreferences((current) => {\n      return {\n        ...current,\n        developerMode,\n      };\n    });\n  };\n  const setIsAggregateWallets = (aggregateWallets: boolean) => {\n    setPreferences((current) => {\n      return {\n        ...current,\n        aggregateWallets,\n      };\n    });\n  };\n  const setApprovedOrigins = (approvedOrigins: string[]) => {\n    setPreferences((current) => {\n      return {\n        ...current,\n        approvedOrigins,\n      };\n    });\n  };\n  const setXnftPreferences = useSetRecoilState(atoms.xnftPreferences);\n  // Solana\n  const setSolanaConnectionUrl = (cluster: string) => {\n    setPreferences((current) => {\n      return {\n        ...current,\n        solana: {\n          ...current.solana,\n          cluster,\n        },\n      };\n    });\n  };\n  const setSolanaExplorer = (explorer: string) => {\n    setPreferences((current) => {\n      return {\n        ...current,\n        solana: {\n          ...current.solana,\n          explorer,\n        },\n      };\n    });\n  };\n  const setSolanaCommitment = (commitment: Commitment) => {\n    setPreferences((current) => {\n      return {\n        ...current,\n        solana: {\n          ...current.solana,\n          commitment,\n        },\n      };\n    });\n  };\n  // Ethereum\n  const setEthereumConnectionUrl = (connectionUrl: string) => {\n    setPreferences((current) => {\n      return {\n        ...current,\n        ethereum: {\n          ...current.ethereum,\n          connectionUrl,\n        },\n      };\n    });\n  };\n  const setEthereumChainId = (chainId: string) => {\n    setPreferences((current) => {\n      return {\n        ...current,\n        ethereum: {\n          ...current.ethereum,\n          chainId,\n        },\n      };\n    });\n  };\n  const setEthereumFeeData = useSetRecoilState(atoms.ethereumFeeData);\n  // Balance update.\n  const updateAllSplTokenAccounts = useUpdateAllSplTokenAccounts();\n  const updateEthereumBalances = useUpdateEthereumBalances();\n  // URL navigation.\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    ////////////////////////////////////////////////////////////////////////////\n    // Notifications from background script.\n    ////////////////////////////////////////////////////////////////////////////\n\n    //\n    // Notification dispatch.\n    //\n    const notificationsHandler = async (notif: Notification) => {\n      logger.debug(`received notification ${notif.name}`, notif);\n\n      switch (notif.name) {\n        case NOTIFICATION_KEY_IS_COLD_UPDATE:\n          handleKeyIsColdUpdate(notif);\n          break;\n        case NOTIFICATION_KEYRING_SET_MNEMONIC:\n          handleKeyringSetMnemonic();\n          break;\n        case NOTIFICATION_KEYRING_STORE_CREATED:\n          handleKeyringStoreCreated(notif);\n          break;\n        case NOTIFICATION_KEYRING_STORE_LOCKED:\n          handleKeyringStoreLocked();\n          break;\n        case NOTIFICATION_KEYRING_STORE_UNLOCKED:\n          handleKeyringStoreUnlocked(notif);\n          break;\n        case NOTIFICATION_KEYRING_STORE_RESET:\n          handleReset();\n          break;\n        case NOTIFICATION_KEYRING_KEY_DELETE:\n          handleKeyringKeyDelete(notif);\n          break;\n        case NOTIFICATION_KEYNAME_UPDATE:\n          handleKeynameUpdate(notif);\n          break;\n        case NOTIFICATION_KEYRING_IMPORTED_WALLET:\n          handleKeyringImportedWallet(notif);\n          break;\n        case NOTIFICATION_KEYRING_DERIVED_WALLET:\n          handleKeyringDerivedWallet(notif);\n          break;\n        case NOTIFICATION_KEYRING_IMPORTED_SECRET_KEY:\n          handleKeyringImportedSecretKey(notif);\n          break;\n        case NOTIFICATION_APPROVED_ORIGINS_UPDATE:\n          handleApprovedOriginsUpdate(notif);\n          break;\n        case NOTIFICATION_NAVIGATION_URL_DID_CHANGE:\n          handleNavigationUrlDidChange(notif);\n          break;\n        case NOTIFICATION_AUTO_LOCK_SETTINGS_UPDATED:\n          handleAutoLockSettingsUpdated(notif);\n          break;\n        case NOTIFICATION_XNFT_PREFERENCE_UPDATED:\n          handleXnftPreferenceUpdated(notif);\n          break;\n        case NOTIFICATION_DARK_MODE_UPDATED:\n          handleIsDarkModeUpdated(notif);\n          break;\n        case NOTIFICATION_DEVELOPER_MODE_UPDATED:\n          handleIsDeveloperModeUpdated(notif);\n          break;\n        case NOTIFICATION_AGGREGATE_WALLETS_UPDATED:\n          handleAggregateWalletsUpdated(notif);\n          break;\n        case NOTIFICATION_SOLANA_EXPLORER_UPDATED:\n          handleSolanaExplorerUpdated(notif);\n          break;\n        case NOTIFICATION_SOLANA_COMMITMENT_UPDATED:\n          handleSolanaCommitmentUpdated(notif);\n          break;\n        case NOTIFICATION_SOLANA_SPL_TOKENS_DID_UPDATE:\n          await handleSolanaSplTokensDidUpdate(notif);\n          break;\n        case NOTIFICATION_SOLANA_CONNECTION_URL_UPDATED:\n          handleSolanaConnectionUrlUpdated(notif);\n          break;\n        case NOTIFICATION_SOLANA_ACTIVE_WALLET_UPDATED:\n          handleSolanaActiveWalletUpdated(notif);\n          break;\n        case NOTIFICATION_ETHEREUM_ACTIVE_WALLET_UPDATED:\n          handleEthereumActiveWalletUpdated(notif);\n          break;\n        case NOTIFICATION_ETHEREUM_CONNECTION_URL_UPDATED:\n          handleEthereumConnectionUrlUpdated(notif);\n          break;\n        case NOTIFICATION_ETHEREUM_CHAIN_ID_UPDATED:\n          handleEthereumChainIdUpdated(notif);\n          break;\n        case NOTIFICATION_ETHEREUM_TOKENS_DID_UPDATE:\n          await handleEthereumTokensDidUpdate(notif);\n          break;\n        case NOTIFICATION_ETHEREUM_FEE_DATA_DID_UPDATE:\n          handleEthereumFeeDataDidUpdate(notif);\n          break;\n        case NOTIFICATION_BLOCKCHAIN_KEYRING_CREATED:\n          handleBlockchainKeyringCreated(notif);\n          break;\n        case NOTIFICATION_BLOCKCHAIN_KEYRING_DELETED:\n          handleBlockchainKeyringDeleted(notif);\n          break;\n        case NOTIFICATION_FEATURE_GATES_UPDATED:\n          handleSetFeatureGates(notif);\n          break;\n        case NOTIFICATION_KEYRING_STORE_USERNAME_ACCOUNT_CREATED:\n          handleUsernameAccountCreated(notif);\n          break;\n        case NOTIFICATION_KEYRING_STORE_ACTIVE_USER_UPDATED:\n          handleActiveUserUpdated(notif);\n          break;\n        case NOTIFICATION_KEYRING_STORE_REMOVED_USER:\n          handleRemovedUser();\n          break;\n        case NOTIFICATION_ACTIVE_BLOCKCHAIN_UPDATED:\n          handleActiveBlockchainUpdated(notif);\n          break;\n        case NOTIFICATION_USER_ACCOUNT_AUTHENTICATED:\n          handleUserAccountAuthenticated(notif);\n          break;\n        case NOTIFICATION_USER_ACCOUNT_PUBLIC_KEY_CREATED:\n          handleUserAccountPublicKeyCreated(notif);\n          break;\n        case NOTIFICATION_USER_ACCOUNT_PUBLIC_KEY_DELETED:\n          handleUserAccountPublicKeyDeleted(notif);\n          break;\n        case NOTIFICATION_USER_ACCOUNT_PUBLIC_KEYS_UPDATED:\n          handleUserAccountPublicKeysUpdated(notif);\n          break;\n        default:\n          break;\n      }\n    };\n\n    //\n    // Notification handlers.\n    //\n    const handleKeyIsColdUpdate = (notif: Notification) => {\n      setWalletData(notif.data.walletData);\n    };\n\n    const handleKeyringSetMnemonic = () => {\n      setKeyringHasMnemonic(true);\n    };\n\n    const handleKeyringStoreCreated = (notif: Notification) => {\n      setPreferences(notif.data.preferences);\n      setKeyringStoreState(KeyringStoreStateEnum.Unlocked);\n    };\n\n    const handleKeyringStoreLocked = () => {\n      setKeyringStoreState(KeyringStoreStateEnum.Locked);\n      setAuthenticatedUser(null);\n    };\n\n    const handleKeyringStoreUnlocked = (notif: Notification) => {\n      // Set the active user with the active user from the notification. This\n      // is required because the recoil state can be read on the unlock screen\n      // and may be updated by migrations that occur on an unlock attempt. The\n      // recoil state won't be updated by migrations.\n      setActiveUser(notif.data.activeUser);\n      setKeyringStoreState(KeyringStoreStateEnum.Unlocked);\n    };\n\n    const handleKeyringKeyDelete = (notif: Notification) => {\n      const { blockchain, deletedPublicKey } = notif.data;\n      // Remove the deleted key from the key list.\n      setWalletData((current) => {\n        const publicKeys = { ...current.publicKeys };\n\n        publicKeys[blockchain] = {\n          hdPublicKeys: [\n            ...publicKeys[blockchain].hdPublicKeys.filter(\n              (key) => key.publicKey !== deletedPublicKey\n            ),\n          ],\n          importedPublicKeys: [\n            ...publicKeys[blockchain].importedPublicKeys.filter(\n              (key) => key.publicKey !== deletedPublicKey\n            ),\n          ],\n          ledgerPublicKeys: [\n            ...publicKeys[blockchain].ledgerPublicKeys.filter(\n              (key) => key.publicKey !== deletedPublicKey\n            ),\n          ],\n        };\n\n        const activePublicKeys = [...current.activePublicKeys].filter(\n          (key) => key !== deletedPublicKey\n        );\n\n        return {\n          ...current,\n          activePublicKeys,\n          publicKeys,\n        };\n      });\n    };\n\n    const handleKeynameUpdate = (notif: Notification) => {\n      setWalletPublicKeysWithFn((current: any) => {\n        // Using JSON for a deep copy\n        const next: WalletPublicKeys = JSON.parse(JSON.stringify(current));\n        for (const keyring of Object.values(next)) {\n          for (const namedPublicKeys of Object.values(keyring)) {\n            for (const namedPublicKey of namedPublicKeys) {\n              if (namedPublicKey.publicKey === notif.data.publicKey) {\n                namedPublicKey.name = notif.data.name;\n              }\n            }\n          }\n        }\n        return next;\n      });\n    };\n\n    //\n    // TODO: the following three functions are almost the same, refactor into one\n    //\n\n    const handleKeyringImportedWallet = (notif: Notification) => {\n      const { blockchain, publicKey, name } = notif.data;\n      setWalletData((current: any) => {\n        const publicKeys = { ...current.publicKeys };\n\n        // Importing a new wallet can result in the initialisation of this\n        // keyring so no guarantee the keyrings exist\n        publicKeys[blockchain] = {\n          hdPublicKeys: [\n            ...(publicKeys[blockchain]\n              ? publicKeys[blockchain].hdPublicKeys\n              : []),\n            // Add newly derived key\n            {\n              publicKey,\n              name,\n            },\n          ],\n          importedPublicKeys: [\n            ...(publicKeys[blockchain]\n              ? publicKeys[blockchain].importedPublicKeys\n              : []),\n          ],\n          ledgerPublicKeys: [\n            ...(publicKeys[blockchain]\n              ? publicKeys[blockchain].ledgerPublicKeys\n              : []),\n          ],\n        };\n\n        const activePublicKeys = [...current.activePublicKeys, publicKey];\n\n        return {\n          ...current,\n          activePublicKeys,\n          publicKeys,\n        };\n      });\n    };\n\n    const handleKeyringDerivedWallet = (notif: Notification) => {\n      const { blockchain, publicKey, name } = notif.data;\n      setWalletData((current: any) => {\n        const publicKeys = { ...current.publicKeys };\n        // Deriving a new wallet can result in the initialisation of this\n        // keyring so no guarantee the keyrings exist\n        publicKeys[blockchain] = {\n          hdPublicKeys: [\n            ...(publicKeys[blockchain]\n              ? publicKeys[blockchain].hdPublicKeys\n              : []),\n            // Add newly derived key\n            {\n              publicKey,\n              name,\n            },\n          ],\n          importedPublicKeys: [\n            ...(publicKeys[blockchain]\n              ? publicKeys[blockchain].importedPublicKeys\n              : []),\n          ],\n          ledgerPublicKeys: [\n            ...(publicKeys[blockchain]\n              ? publicKeys[blockchain].ledgerPublicKeys\n              : []),\n          ],\n        };\n\n        const activePublicKeys = [...current.activePublicKeys, publicKey];\n\n        return {\n          ...current,\n          activePublicKeys,\n          publicKeys,\n        };\n      });\n    };\n\n    const handleKeyringImportedSecretKey = (notif: Notification) => {\n      const { blockchain, publicKey, name } = notif.data;\n      setWalletData((current: any) => {\n        const publicKeys = { ...current.publicKeys };\n\n        // Although not possible to initialise a new keyring by importing\n        // a secret key, it may be possible in the future so this is handled\n        // the same way as deriving\n        publicKeys[blockchain] = {\n          hdPublicKeys: [\n            ...(publicKeys[blockchain]\n              ? publicKeys[blockchain].hdPublicKeys\n              : []),\n          ],\n          importedPublicKeys: [\n            ...(publicKeys[blockchain]\n              ? publicKeys[blockchain].importedPublicKeys\n              : []),\n            // Add newly imported key\n            {\n              publicKey,\n              name,\n            },\n          ],\n          ledgerPublicKeys: [\n            ...(publicKeys[blockchain]\n              ? publicKeys[blockchain].ledgerPublicKeys\n              : []),\n          ],\n        };\n\n        const activePublicKeys = [...current.activePublicKeys, publicKey];\n\n        return {\n          ...current,\n          activePublicKeys,\n          publicKeys,\n        };\n      });\n    };\n\n    const handleSolanaActiveWalletUpdated = (notif: Notification) => {\n      allPlugins().forEach((p) => {\n        p.pushSolanaPublicKeyChangedNotification(notif.data.activeWallet);\n      });\n      setActivePublicKeys(notif.data.activeWallets);\n    };\n\n    const handleReset = () => {\n      setKeyringStoreState(KeyringStoreStateEnum.NeedsOnboarding);\n    };\n\n    const handleApprovedOriginsUpdate = (notif: Notification) => {\n      setApprovedOrigins(notif.data.approvedOrigins);\n    };\n\n    const handleNavigationUrlDidChange = (notif: Notification) => {\n      navigate(notif.data.url);\n    };\n\n    const handleAutoLockSettingsUpdated = (notif: Notification) => {\n      setAutoLockSettings(notif.data.autoLockSettings);\n    };\n\n    const handleXnftPreferenceUpdated = (notif: Notification) => {\n      setXnftPreferences(notif.data.updatedPreferences);\n    };\n\n    const handleIsDarkModeUpdated = (notif: Notification) => {\n      setIsDarkMode(notif.data.darkMode);\n    };\n\n    const handleIsDeveloperModeUpdated = (notif: Notification) => {\n      setIsDeveloperMode(notif.data.developerMode);\n    };\n\n    const handleAggregateWalletsUpdated = (notif: Notification) => {\n      setIsAggregateWallets(notif.data.aggregateWallets);\n    };\n\n    const handleSolanaExplorerUpdated = (notif: Notification) => {\n      setSolanaExplorer(notif.data.explorer);\n    };\n\n    const handleSolanaCommitmentUpdated = (notif: Notification) => {\n      setSolanaCommitment(notif.data.commitment);\n    };\n\n    const handleSolanaConnectionUrlUpdated = (notif: Notification) => {\n      setSolanaConnectionUrl(notif.data.url);\n      allPlugins().forEach((p) => {\n        p.pushSolanaConnectionChangedNotification(notif.data.url);\n      });\n    };\n\n    const handleSolanaSplTokensDidUpdate = async (notif: Notification) => {\n      await updateAllSplTokenAccounts({\n        ...notif.data,\n        customSplTokenAccounts:\n          BackgroundSolanaConnection.customSplTokenAccountsFromJson(\n            notif.data.customSplTokenAccounts\n          ),\n      });\n    };\n\n    const handleActiveBlockchainUpdated = (notif: Notification) => {\n      setActiveBlockchain(notif.data.newBlockchain);\n    };\n\n    const handleUserAccountAuthenticated = (notif: Notification) => {\n      logger.debug(\"dd handleUserAccountAuthenticated:notf\", notif.data);\n      setAuthenticatedUser({\n        username: notif.data.username,\n        uuid: notif.data.uuid,\n        jwt: notif.data.jwt,\n      });\n    };\n\n    const handleUserAccountPublicKeyCreated = (notif: Notification) => {\n      setServerPublicKeys((current) => [...current, notif.data]);\n    };\n\n    const handleUserAccountPublicKeyDeleted = (notif: Notification) => {\n      setServerPublicKeys((current) =>\n        current.filter(\n          (c) =>\n            !(\n              c.blockchain === notif.data.blockchain &&\n              c.publicKey === notif.data.publicKey\n            )\n        )\n      );\n    };\n\n    const handleUserAccountPublicKeysUpdated = (notif: Notification) => {\n      setServerPublicKeys(notif.data.publicKeys);\n    };\n\n    const handleEthereumActiveWalletUpdated = (notif: Notification) => {\n      allPlugins().forEach((p) => {\n        p.pushEthereumPublicKeyChangedNotification(notif.data.activeWallet);\n      });\n      setActivePublicKeys(notif.data.activeWallets);\n    };\n\n    const handleEthereumTokensDidUpdate = async (notif: Notification) => {\n      const { connectionUrl, activeWallet, balances } = notif.data;\n      await updateEthereumBalances({\n        connectionUrl,\n        publicKey: activeWallet,\n        balances,\n      });\n    };\n\n    const handleEthereumFeeDataDidUpdate = (notif: Notification) => {\n      setEthereumFeeData(notif.data.feeData);\n    };\n\n    const handleEthereumConnectionUrlUpdated = (notif: Notification) => {\n      setEthereumConnectionUrl(notif.data.connectionUrl);\n      allPlugins().forEach((p) => {\n        p.pushEthereumConnectionChangedNotification(notif.data.connectionUrl);\n      });\n    };\n\n    const handleEthereumChainIdUpdated = (notif: Notification) => {\n      setEthereumChainId(notif.data.chainId);\n    };\n\n    const handleBlockchainKeyringCreated = (notif: Notification) => {\n      setWalletData(notif.data.publicKeyData);\n    };\n\n    const handleBlockchainKeyringDeleted = (notif: Notification) => {\n      setWalletData(notif.data.publicKeyData);\n    };\n\n    const handleSetFeatureGates = (notif: Notification) => {\n      setFeatureGates((current) => ({\n        ...current,\n        ...notif.data.gates,\n      }));\n    };\n\n    const handleUsernameAccountCreated = (notif: Notification) => {\n      // Order of each setter matters here.\n      setPreferences(notif.data.preferences);\n      setXnftPreferences(notif.data.xnftPreferences);\n      setWalletData(notif.data.walletData);\n      setActiveUser(notif.data.user);\n      resetAllUsers();\n    };\n\n    const handleActiveUserUpdated = (notif: Notification) => {\n      // Order of each setter matters here.\n      setPreferences(notif.data.preferences);\n      setXnftPreferences(notif.data.xnftPreferences);\n      setWalletData(notif.data.walletData);\n      setActiveUser(notif.data.user);\n      // Clear authenticated user\n      setAuthenticatedUser(null);\n      resetAllUsers();\n      // resetNftCollections();\n    };\n\n    const handleRemovedUser = () => {\n      resetAllUsers();\n    };\n\n    //\n    // Initiate subscription.\n    //\n    ChannelAppUi.notifications(CHANNEL_POPUP_NOTIFICATIONS).onNotification(\n      notificationsHandler\n    );\n  }, []);\n\n  return (\n    <_NotificationsContext.Provider value={{}}>\n      {props.children}\n    </_NotificationsContext.Provider>\n  );\n}\n\ntype NotificationsContext = {};\nconst _NotificationsContext = React.createContext<NotificationsContext | null>(\n  null\n);\n","import {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from \"react\";\nimport type {\n  KeyringType,\n  LedgerKeyringInit,\n  MnemonicKeyringInit,\n  PrivateKeyKeyringInit,\n  PrivateKeyWalletDescriptor,\n  ServerPublicKey,\n  SignedWalletDescriptor,\n} from \"@coral-xyz/common\";\nimport {\n  BACKEND_API_URL,\n  Blockchain,\n  getAuthMessage,\n  getCreateMessage,\n  UI_RPC_METHOD_FIND_WALLET_DESCRIPTOR,\n  UI_RPC_METHOD_KEYRING_STORE_CREATE,\n  UI_RPC_METHOD_USERNAME_ACCOUNT_CREATE,\n} from \"@coral-xyz/common\";\n\nimport { useBackgroundClient } from \"../hooks/client\";\nimport { useAuthentication } from \"../hooks/useAuthentication\";\nimport { useRpcRequests } from \"../hooks/useRpcRequests\";\n\nexport const getWaitlistId = () => {\n  if (window?.localStorage) {\n    const WAITLIST_RES_ID_KEY = \"waitlist-form-res-id\";\n    return window.localStorage.getItem(WAITLIST_RES_ID_KEY) ?? undefined;\n  }\n\n  return undefined;\n};\n\ntype BlockchainSelectOption = {\n  id: string;\n  label: string;\n  enabled: boolean;\n};\n\nconst BLOCKCHAIN_OPTIONS: BlockchainSelectOption[] = [\n  {\n    id: Blockchain.ETHEREUM,\n    label: \"Ethereum\",\n    enabled: true,\n  },\n  {\n    id: Blockchain.SOLANA,\n    label: \"Eclipse\",\n    enabled: true,\n  },\n  {\n    id: \"polygon\",\n    label: \"Polygon\",\n    enabled: false,\n  },\n  {\n    id: \"bsc\",\n    label: \"BSC\",\n    enabled: false,\n  },\n  {\n    id: \"avalanche\",\n    label: \"Avalanche\",\n    enabled: false,\n  },\n  {\n    id: \"cosmos\",\n    label: \"Cosmos\",\n    enabled: false,\n  },\n];\n\nexport type OnboardingData = {\n  userId: string | undefined;\n  complete: boolean;\n  inviteCode: string | undefined;\n  username: string | null;\n  action: string;\n  keyringType: KeyringType | null;\n  blockchain: Blockchain | null;\n  password: string | null;\n  mnemonic: string | undefined;\n  blockchainOptions: BlockchainSelectOption[];\n  waitlistId: string | undefined;\n  // Wallet descriptors are for onboarding with mnemonic or ledger\n  signedWalletDescriptors: SignedWalletDescriptor[];\n  // Private key wallet descriptor is for onboarding with private key\n  privateKeyKeyringInit: PrivateKeyKeyringInit | null;\n  isAddingAccount?: boolean;\n  selectedBlockchains: Blockchain[];\n  serverPublicKeys: ServerPublicKey[];\n};\n\nconst defaultState = {\n  userId: undefined,\n  complete: false,\n  inviteCode: undefined,\n  username: null,\n  action: \"create\",\n  keyringType: null,\n  blockchain: null,\n  password: null,\n  mnemonic: undefined,\n  privateKey: undefined,\n  blockchainOptions: BLOCKCHAIN_OPTIONS,\n  waitlistId: undefined,\n  signedWalletDescriptors: [],\n  privateKeyKeyringInit: null,\n  selectedBlockchains: [],\n  serverPublicKeys: [],\n};\n\ntype SelectBlockchainType = {\n  blockchain: Blockchain;\n  onStatus?: (status: string) => void;\n};\n\ntype IOnboardingContext = {\n  onboardingData: OnboardingData;\n  setOnboardingData: (data: Partial<OnboardingData>) => void;\n  handleSelectBlockchain: (data: SelectBlockchainType) => Promise<void>;\n  maybeCreateUser: (\n    data: Partial<OnboardingData>\n  ) => Promise<{ ok: boolean; jwt: string }>;\n  handlePrivateKeyInput: (data: PrivateKeyWalletDescriptor) => Promise<void>;\n};\n\nconst OnboardingContext = createContext<IOnboardingContext>({\n  onboardingData: defaultState,\n  setOnboardingData: () => {},\n  handleSelectBlockchain: async () => {},\n  maybeCreateUser: async () => ({ ok: true, jwt: \"\" }),\n  handlePrivateKeyInput: async () => {},\n});\n\nexport function OnboardingProvider({\n  children,\n  ...props\n}: {\n  children: JSX.Element;\n}) {\n  const background = useBackgroundClient();\n  const { authenticate } = useAuthentication();\n  const { signMessageForWallet } = useRpcRequests();\n  const [data, setData] = useState<OnboardingData>(defaultState);\n\n  const setOnboardingData = useCallback((data: Partial<OnboardingData>) => {\n    return setData((oldData) => ({\n      ...oldData,\n      ...data,\n      selectedBlockchains: data.signedWalletDescriptors\n        ? [\n            ...new Set(\n              data.signedWalletDescriptors.map(\n                (s: SignedWalletDescriptor) => s.blockchain\n              )\n            ),\n          ]\n        : oldData.selectedBlockchains,\n    }));\n  }, []);\n\n  const handleSelectBlockchain = useCallback(\n    async ({ blockchain, onStatus }: SelectBlockchainType) => {\n      const handleStatus = (status: string) => {\n        if (onStatus) {\n          console.log(\"mobile:status\", status);\n          onStatus(status);\n        }\n      };\n\n      const {\n        selectedBlockchains,\n        signedWalletDescriptors,\n        mnemonic,\n        keyringType,\n        action,\n      } = data;\n\n      if (selectedBlockchains.includes(blockchain)) {\n        handleStatus(\"deselected\");\n        // Blockchain is being deselected\n        setOnboardingData({\n          blockchain: null,\n          signedWalletDescriptors: signedWalletDescriptors.filter(\n            (s) => s.blockchain !== blockchain\n          ),\n        });\n      } else {\n        handleStatus(\"selected\");\n        // Blockchain is being selected\n        if (\n          keyringType === \"ledger\" ||\n          action === \"import\" ||\n          keyringType === \"private-key\"\n        ) {\n          handleStatus(`keyringType:${keyringType}, action:${action}`);\n          setOnboardingData({ blockchain });\n        } else if (action === \"create\") {\n          handleStatus(\"action create\");\n          try {\n            const walletDescriptor = await background.request({\n              method: UI_RPC_METHOD_FIND_WALLET_DESCRIPTOR,\n              params: [blockchain, 0, mnemonic],\n            });\n\n            handleStatus(\"wallet descriptor found\");\n\n            const signature = await signMessageForWallet(\n              blockchain,\n              walletDescriptor.publicKey,\n              getCreateMessage(walletDescriptor.publicKey),\n              {\n                mnemonic,\n                signedWalletDescriptors: [\n                  { ...walletDescriptor, signature: \"\" },\n                ],\n              }\n            );\n\n            handleStatus(\"signature gotten\");\n\n            setOnboardingData({\n              signedWalletDescriptors: [\n                ...signedWalletDescriptors,\n                {\n                  ...walletDescriptor,\n                  signature,\n                },\n              ],\n            });\n          } catch (err) {\n            console.error(err);\n            handleStatus(err);\n          }\n        }\n      }\n    },\n    [data]\n  );\n\n  const handlePrivateKeyInput = useCallback(\n    async ({\n      blockchain,\n      publicKey,\n      privateKey,\n    }: {\n      blockchain: Blockchain;\n      publicKey: string;\n      privateKey: string;\n    }) => {\n      setOnboardingData({ blockchain });\n      const signature = await signMessageForWallet(\n        blockchain,\n        publicKey,\n        // Recover or create\n        data.userId ? getAuthMessage(data.userId) : getCreateMessage(publicKey),\n        { blockchain, publicKey, privateKey, signature: \"\" }\n      );\n\n      setOnboardingData({\n        privateKeyKeyringInit: {\n          blockchain,\n          publicKey,\n          privateKey,\n          signature,\n        },\n      });\n    },\n    [data]\n  );\n\n  const getKeyringInit = useCallback(\n    (\n      data: Partial<OnboardingData>\n    ): MnemonicKeyringInit | LedgerKeyringInit | PrivateKeyKeyringInit => {\n      if (data.keyringType === \"private-key\") {\n        return data.privateKeyKeyringInit!;\n      } else if (data.keyringType === \"ledger\") {\n        return {\n          signedWalletDescriptors: data.signedWalletDescriptors!,\n        };\n      } else {\n        return {\n          signedWalletDescriptors: data.signedWalletDescriptors!,\n          mnemonic: data.mnemonic,\n        };\n      }\n    },\n    [data]\n  );\n\n  //\n  // Create the user in the backend\n  //\n  const createUser = useCallback(\n    async (data: Partial<OnboardingData>) => {\n      const { inviteCode, userId, username, keyringType } = data;\n\n      // If userId is provided, then we are onboarding via the recover flow.\n      if (userId) {\n        // Authenticate the user that the recovery has a JWT.\n        // Take the first keyring init to fetch the JWT, it doesn't matter which\n        // we use if there are multiple.\n        const { blockchain, publicKey, signature } =\n          keyringType === \"private-key\"\n            ? data.privateKeyKeyringInit!\n            : data.signedWalletDescriptors![0];\n\n        const authData = {\n          blockchain: blockchain!,\n          publicKey,\n          signature,\n          message: getAuthMessage(userId),\n        };\n\n        const { jwt } = await authenticate(authData!);\n        return { id: userId, jwt };\n      }\n\n      // Signed blockchain public keys for POST to the server\n      const blockchainPublicKeys =\n        keyringType === \"private-key\"\n          ? [data.privateKeyKeyringInit]\n          : data.signedWalletDescriptors;\n\n      //\n      // If we're down here, then we are creating a user for the first time.\n      //\n      const body = JSON.stringify({\n        username,\n        inviteCode,\n        waitlistId: getWaitlistId?.(),\n        blockchainPublicKeys,\n      });\n\n      try {\n        const res = await fetch(`${BACKEND_API_URL}/users`, {\n          method: \"POST\",\n          body,\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n\n        if (!res.ok) {\n          throw new Error(await res.json());\n        }\n        return await res.json();\n      } catch (err) {\n        console.error(\"OnboardingProvider:createUser::error\", err);\n        throw new Error(`error creating user`);\n      }\n    },\n    [data]\n  );\n\n  //\n  // Create the local store for the wallets\n  //\n  const createStore = useCallback(\n    async (uuid: string, jwt: string, data: Partial<OnboardingData>) => {\n      const { isAddingAccount, username, password } = data;\n\n      const keyringInit = getKeyringInit(data);\n\n      try {\n        if (isAddingAccount) {\n          // Add a new account if needed, this will also create the new keyring\n          // store\n          await background.request({\n            method: UI_RPC_METHOD_USERNAME_ACCOUNT_CREATE,\n            params: [username, keyringInit, uuid, jwt],\n          });\n        } else {\n          // Add a new keyring store under the new account\n          await background.request({\n            method: UI_RPC_METHOD_KEYRING_STORE_CREATE,\n            params: [username, password, keyringInit, uuid, jwt],\n          });\n        }\n      } catch (err) {\n        console.error(\"OnboardingProvider:createStore::error\", err);\n        throw new Error(`error creating account`);\n      }\n    },\n    [data]\n  );\n\n  const maybeCreateUser = useCallback(\n    async (data: Partial<OnboardingData>) => {\n      try {\n        const { id, jwt } = await createUser(data);\n        await createStore(id, jwt, data);\n        return { ok: true, jwt };\n      } catch (err) {\n        console.error(\"OnboardingProvider:maybeCreateUser::error\", err);\n        return { ok: false, jwt: \"\" };\n      }\n    },\n    [data]\n  );\n\n  const contextValue = useMemo(\n    () => ({\n      onboardingData: data,\n      setOnboardingData,\n      handleSelectBlockchain,\n      handlePrivateKeyInput,\n      maybeCreateUser,\n    }),\n    [\n      data,\n      setOnboardingData,\n      handleSelectBlockchain,\n      handlePrivateKeyInput,\n      maybeCreateUser,\n    ]\n  );\n\n  return (\n    <OnboardingContext.Provider {...props} value={contextValue}>\n      {children}\n    </OnboardingContext.Provider>\n  );\n}\n\nexport function useOnboarding() {\n  const context = useContext(OnboardingContext);\n\n  if (context === undefined) {\n    throw new Error(`useOnboardingData must be used within OnboardingProvider`);\n  }\n\n  return context;\n}\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport {\n  Blockchain,\n  confirmTransaction,\n  generateUnwrapSolTx,\n  generateWrapSolTx,\n  NATIVE_ACCOUNT_RENT_EXEMPTION_LAMPORTS,\n  SOL_NATIVE_MINT,\n  TOKEN_ACCOUNT_RENT_EXEMPTION_LAMPORTS,\n  UI_RPC_METHOD_SOLANA_SIGN_AND_SEND_TRANSACTION,\n  USDC_MINT,\n  WSOL_MINT,\n} from \"@coral-xyz/common\";\nimport { getAssociatedTokenAddress } from \"@solana/spl-token\";\nimport type { TokenInfo } from \"@solana/spl-token-registry\";\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\nimport * as bs58 from \"bs58\";\nimport { BigNumber, ethers, FixedNumber } from \"ethers\";\n\nimport { blockchainTokenData } from \"../atoms/balance\";\nimport { jupiterInputTokens } from \"../atoms/solana/jupiter\";\nimport {\n  useFeatureGates,\n  useJupiterOutputTokens,\n  useJupiterTokenList,\n  useLoader,\n  useSolanaCtx,\n} from \"../hooks\";\nimport type { TokenData, TokenDataWithBalance } from \"../types\";\n\nconst { Zero } = ethers.constants;\nconst DEFAULT_DEBOUNCE_DELAY = 400;\nconst DEFAULT_SLIPPAGE_PERCENT = 1;\n// Poll for new routes every 30 seconds in case of changing market conditions\nconst ROUTE_POLL_INTERVAL = 30000;\n\ntype JupiterRoute = {\n  inAmount: string;\n  outAmount: string;\n  priceImpactPct: number;\n  marketInfos: Array<{\n    id: string;\n    label: string;\n    inputMint: string;\n    outputMint: string;\n    notEnoughLiquidity: boolean;\n    inAmount: string;\n    outAmount: string;\n    priceImpactPct: number;\n    lpFee: {\n      amount: string;\n      mint: string;\n      pct: number;\n    };\n    platformFee: {\n      amount: string;\n      mint: string;\n      pct: number;\n    };\n  }>;\n  amount: string;\n  slippageBps: number;\n  otherAmountThreshold: string;\n  swapMode: string;\n};\n\nexport type SwapContext = {\n  // Mint settings\n  fromMint: string;\n  setFromMint: (mint: string) => void;\n  toMint: string;\n  setToMint: (mint: string) => void;\n  // Swap to <-> from tokens\n  swapToFromMints: () => void;\n  // Token metadata\n  fromTokens: Array<TokenDataWithBalance>;\n  fromToken: TokenData | TokenDataWithBalance | undefined;\n  toTokens: Array<TokenData>;\n  toToken: TokenData | undefined;\n  // Amounts\n  fromAmount: BigNumber | undefined;\n  setFromAmount: (a: BigNumber | undefined) => void;\n  toAmount: BigNumber | undefined;\n  // Slippage\n  slippage: number;\n  setSlippage: (s: number) => void;\n  priceImpactPct: number;\n  // Execute the function\n  executeSwap: () => Promise<boolean>;\n  // Fees\n  transactionFees:\n    | { fees: Record<string, BigNumber>; total: BigNumber }\n    | undefined;\n  swapFee: JupiterRoute[\"marketInfos\"][number][\"platformFee\"];\n  availableForSwap: BigNumber;\n  exceedsBalance: boolean | undefined;\n  feeExceedsBalance: boolean | undefined;\n  // Loading flags\n  isLoadingRoutes: boolean;\n  isLoadingTransactions: boolean;\n  isJupiterError: boolean;\n  canSwap: boolean;\n  canSwitch: boolean;\n};\n\nconst _SwapContext = React.createContext<SwapContext | null>(null);\n\nfunction useDebounce(value: any, wait = DEFAULT_DEBOUNCE_DELAY) {\n  const [debounceValue, setDebounceValue] = useState(value);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebounceValue(value);\n    }, wait);\n    return () => clearTimeout(timer); // cleanup when unmounted\n  }, [value, wait]);\n\n  return debounceValue;\n}\n\nexport function SwapProvider({\n  tokenAddress,\n  children,\n}: {\n  tokenAddress?: string;\n  children: React.ReactNode;\n}) {\n  const blockchain = Blockchain.SOLANA; // Solana only at the moment.\n  const solanaCtx = useSolanaCtx();\n  const { backgroundClient, connection, walletPublicKey } = solanaCtx;\n  const jupiterTokenList = useJupiterTokenList();\n  const { SWAP_FEES_ENABLED } = useFeatureGates();\n  const JUPITER_BASE_URL = SWAP_FEES_ENABLED\n    ? \"https://jupiter.xnfts.dev/v4/\"\n    : \"https://quote-api.jup.ag/v4/\";\n  const [fromTokens] = useLoader(\n    jupiterInputTokens({ publicKey: walletPublicKey.toString() }),\n    []\n  );\n  const [token] = tokenAddress\n    ? // TODO: refactor so this hook isn't behind a conditional\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useLoader(\n        blockchainTokenData({\n          publicKey: walletPublicKey.toString(),\n          blockchain,\n          tokenAddress,\n        }),\n        undefined\n      )\n    : [undefined];\n\n  // Swap setttings\n  const [[fromMint, toMint], setFromMintToMint] = useState([\n    SOL_NATIVE_MINT,\n    USDC_MINT,\n  ]);\n  const [fromAmount, _setFromAmount] = useState<BigNumber | undefined>(\n    undefined\n  );\n  const [slippage, setSlippage] = useState(DEFAULT_SLIPPAGE_PERCENT);\n\n  // Jupiter data\n  const [routes, setRoutes] = useState<JupiterRoute[]>([]);\n  const [transaction, setTransaction] = useState<string | undefined>(undefined);\n  const [transactionFees, setTransactionFees] =\n    useState<SwapContext[\"transactionFees\"]>(undefined);\n  const [isLoadingRoutes, setIsLoadingRoutes] = useState(false);\n  const [isLoadingTransactions, setIsLoadingTransactions] = useState(false);\n\n  // Error states\n  const [isJupiterError, setIsJupiterError] = useState(false);\n\n  // Is just a wrap and not a Jupiter swap\n  const isWrap = fromMint === SOL_NATIVE_MINT && toMint === WSOL_MINT;\n  // Is just an unwrap and not a Jupiter swap\n  const isUnwrap = fromMint === WSOL_MINT && toMint === SOL_NATIVE_MINT;\n  // Is a real Jupiter swap instead of just a SOL wrap/unwrap\n  const isJupiterSwap = !isWrap && !isUnwrap;\n\n  const route = routes && routes[0];\n\n  const swapFee = route?.marketInfos[route.marketInfos.length - 1].platformFee;\n\n  const toAmount = (() => {\n    if (isJupiterSwap) {\n      if (route) {\n        if (swapFee.pct > 0) {\n          // It's a Jupiter swap with fees, the output amount is\n          // swapFeeTotal * (100 / swapFeePercentage)\n          return BigNumber.from(\n            FixedNumber.from(BigNumber.from(swapFee.amount))\n              .mulUnsafe(\n                FixedNumber.from(100).divUnsafe(\n                  FixedNumber.fromString(swapFee.pct.toString())\n                )\n              )\n              .ceiling()\n              .toString()\n              .split(\".\")[0]\n          );\n        } else {\n          // It's a Jupiter swap with no fees\n          return BigNumber.from(route.outAmount);\n        }\n      } else {\n        // Error case\n        return undefined;\n      }\n    } else {\n      // If not a Jupiter swap then 1:1\n      return fromAmount;\n    }\n  })();\n\n  // If not a Jupiter swap then no price impact\n  const priceImpactPct = isJupiterSwap ? route && route.priceImpactPct : 0;\n\n  // On changes to the swap parameters, fetch the swap routes from Jupiter.\n  const pollIdRef: { current: NodeJS.Timeout | null } = useRef(null);\n\n  let fromToken = fromTokens.find((t) => t.mint === fromMint);\n  if (!fromToken) {\n    // This can occur when the users swaps the to/from mints and the token is\n    // not one that the user has a token account for\n    const token = jupiterTokenList.find(\n      (f: TokenInfo) => f.address === fromMint\n    );\n    if (token) {\n      fromToken = {\n        name: token.name,\n        ticker: token.symbol,\n        decimals: token.decimals,\n        logo: token.logoURI || \"\",\n        nativeBalance: ethers.constants.Zero,\n        displayBalance: \"0\",\n        address: token.address,\n      };\n    }\n  }\n\n  const toTokens = useJupiterOutputTokens(fromMint);\n  const toToken = toTokens.find((t) => t.mint === toMint);\n\n  let availableForSwap = fromToken\n    ? BigNumber.from(fromToken.nativeBalance)\n    : Zero;\n\n  // If from mint is native SOL, remove the transaction fee and rent exemption\n  // from from the max swap amount\n  if (fromMint === SOL_NATIVE_MINT && transactionFees) {\n    availableForSwap = availableForSwap\n      .sub(transactionFees.total)\n      .sub(BigNumber.from(NATIVE_ACCOUNT_RENT_EXEMPTION_LAMPORTS));\n    if (availableForSwap.lt(Zero)) {\n      availableForSwap = Zero;\n    }\n  }\n\n  const exceedsBalance = fromAmount\n    ? fromAmount.gt(availableForSwap)\n    : undefined;\n\n  const solanaToken = fromTokens.find((t) => t.mint === SOL_NATIVE_MINT);\n  const feeExceedsBalance =\n    transactionFees && solanaToken\n      ? transactionFees.total.gt(solanaToken.nativeBalance)\n      : undefined;\n\n  const stopRoutePolling = () => {\n    if (pollIdRef.current) {\n      clearInterval(pollIdRef.current);\n    }\n  };\n\n  // Debounce fromAmount to avoid excessive Jupiter API requests\n  const debouncedFromAmount = useDebounce(fromAmount);\n\n  useEffect(() => {\n    const defaultFromMint = token ? token.mint! : SOL_NATIVE_MINT;\n    const defaultToMint = token\n      ? token.mint! === USDC_MINT.toString()\n        ? // wSOL for output not native SOL because the Jupiter output mint will\n          // be wSOL, note this is unwrapped anyway because the `wrapUnwrapSOL`\n          // parameter is set in the API call\n          WSOL_MINT\n        : USDC_MINT\n      : USDC_MINT;\n\n    setFromMintToMint([defaultFromMint, defaultToMint]);\n  }, [token]);\n\n  useEffect(() => {\n    (async () => {\n      const loadRoutes = async () => {\n        if (\n          fromAmount &&\n          fromAmount.gt(Zero) &&\n          isJupiterSwap &&\n          fromMint !== toMint\n        ) {\n          setRoutes(await fetchRoutes());\n          // Success, clear existing polling and setup next\n          stopRoutePolling();\n          const pollId = setTimeout(loadRoutes, ROUTE_POLL_INTERVAL);\n          pollIdRef.current = pollId;\n        } else {\n          setRoutes([]);\n        }\n        setIsLoadingRoutes(false);\n      };\n      setIsLoadingRoutes(true);\n      setIsLoadingTransactions(true);\n      await loadRoutes();\n    })();\n    // Cleanup\n    return stopRoutePolling;\n  }, [fromMint, debouncedFromAmount, toMint, isJupiterSwap]);\n\n  //\n  // On changes to the swap routes, fetch the transactions required to execute.\n  //\n  useEffect(() => {\n    (async () => {\n      const transaction = await fetchTransaction();\n      setTransaction(transaction);\n      setTransactionFees(await estimateFees(transaction));\n      setIsLoadingTransactions(false);\n    })();\n  }, [routes]);\n\n  //\n  // Estimate the network fees the transactions will incur.\n  //\n  const estimateFees = async (transaction: string) => {\n    const [solanaNetworkFee, tokenAccountCreationFee] = await Promise.all([\n      (async () => {\n        if (!isJupiterSwap) {\n          // Simple wrap or unwrap, assume 5000\n          return 5000;\n        } else if (\n          !routes ||\n          routes.length === 0 ||\n          transaction === undefined\n        ) {\n          // Haven't got routes yet, assume 5000 for swap\n          return 5000;\n        } else {\n          // Estimate fees for the existing transactions by querying\n          try {\n            const tx = Transaction.from(Buffer.from(transaction, \"base64\"));\n            // Under the hood this just calls connection.getFeeForMessage with\n            // the message, it's a convenience method\n            return await tx.getEstimatedFee(connection);\n          } catch (e) {\n            // Couldn't load fees, assume 5000, not worth failing over\n            return 5000;\n          }\n        }\n      })(),\n      (async () => {\n        try {\n          if (!toMint || [SOL_NATIVE_MINT, WSOL_MINT].includes(toMint)) {\n            return 0;\n          }\n          // if the output mint token account contains no lamports then we must create it\n          else if (\n            !(await connection.getBalance(\n              await getAssociatedTokenAddress(\n                new PublicKey(toMint),\n                walletPublicKey\n              )\n            ))\n          ) {\n            return TOKEN_ACCOUNT_RENT_EXEMPTION_LAMPORTS;\n          }\n        } catch (err) {\n          // don't throw on this until it's undergone further testing\n          console.error(err);\n        }\n        return 0;\n      })(),\n    ]);\n\n    return {\n      fees: {\n        \"Solana network\": BigNumber.from(solanaNetworkFee),\n        ...(tokenAccountCreationFee > 0 && {\n          \"One-time token account\": BigNumber.from(tokenAccountCreationFee),\n        }),\n      },\n      total: BigNumber.from(solanaNetworkFee + tokenAccountCreationFee),\n    };\n  };\n\n  //\n  // Fetch the Jupiter routes that can be used to execute the swap.\n  //\n  const fetchRoutes = async () => {\n    if (!fromAmount) return [];\n    const params = {\n      // If the swap is to or from native SOL we want Jupiter to return wSOL\n      // routes because it does not support native SOL routes.\n      inputMint: fromMint === SOL_NATIVE_MINT ? WSOL_MINT : fromMint,\n      outputMint: toMint === SOL_NATIVE_MINT ? WSOL_MINT : toMint,\n      amount: fromAmount.toString(),\n      slippageBps: (slippage * 100).toString(),\n      // As ledger wallet does not support v0 yet and we don't want to handle the fallback we request a v0 tx\n      asLegacyTransaction: \"true\",\n    };\n    const queryString = new URLSearchParams(params).toString();\n    try {\n      const response = await fetch(`${JUPITER_BASE_URL}quote?${queryString}`);\n      if (!response.ok) {\n        // fetch throws for network errors but http status code errors so throw\n        // manually if status code is outside of 200-299 range\n        throw new Error(response.status.toString());\n      }\n      const { data } = await response.json();\n      setIsJupiterError(false);\n      return data;\n    } catch (e) {\n      console.error(\"error fetching swap routes\", e);\n      setIsJupiterError(true);\n      return [];\n    }\n  };\n\n  //\n  // Load the transactions required to execute the swap.\n  //\n  const fetchTransaction = async () => {\n    if (!fromAmount) return {};\n    if (isWrap) {\n      // Just a wrapping of SOL\n      return (\n        await generateWrapSolTx(\n          solanaCtx,\n          walletPublicKey,\n          fromAmount!.toNumber()\n        )\n      ).toString(\"base64\");\n    } else if (isUnwrap) {\n      // Just an unwrapping of SOL\n      return (\n        await generateUnwrapSolTx(\n          solanaCtx,\n          walletPublicKey,\n          fromAmount!.toNumber()\n        )\n      ).toString(\"base64\");\n    } else if (isJupiterSwap && routes && routes.length > 0) {\n      // Jupiter swap. Although Jupiter can return between 1 and 3 transactions\n      // to perform a swap, we should only ever get one as we are using the\n      // onlyDirectRoutes parameter.\n      const response = await fetch(`${JUPITER_BASE_URL}swap`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          route,\n          wrapUnwrapSOL: true,\n          userPublicKey: walletPublicKey,\n          asLegacyTransaction: true,\n        }),\n      });\n      const swapResult = await response.json();\n      return swapResult[\"swapTransaction\"];\n    }\n  };\n\n  //\n  // Switch the trade direction.\n  //\n  const swapToFromMints = () => {\n    if (fromMint === SOL_NATIVE_MINT) {\n      setFromMintToMint([toMint, WSOL_MINT]);\n    } else if (toMint === WSOL_MINT) {\n      setFromMintToMint([SOL_NATIVE_MINT, fromMint]);\n    } else {\n      setFromMintToMint([toMint, fromMint]);\n    }\n    setFromAmount(toAmount ?? Zero);\n  };\n\n  const setFromMint = (mint: string) => {\n    setFromMintToMint([mint, toMint]);\n  };\n\n  const setToMint = (mint: string) => {\n    setFromMintToMint([fromMint, mint]);\n  };\n\n  const setFromAmount = (amount: BigNumber) => {\n    // Restrict the input to the number of decimals of the from token\n    _setFromAmount(amount);\n  };\n\n  //\n  // Execute the transactions to perform the swap.\n  //\n  const executeSwap = async () => {\n    if (!toAmount || !transaction) return false;\n\n    // Stop polling for route updates when swap is finalised\n    stopRoutePolling();\n    try {\n      const signature = await sendAndConfirmTransaction(transaction);\n\n      if (SWAP_FEES_ENABLED) {\n        try {\n          await fetch(\"https://jupiter.xnfts.dev/swap\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              signature,\n            }),\n          });\n        } catch (e) {\n          //  do nothing as we don't want to block the UI if it fails\n        }\n      }\n    } catch (e) {\n      console.log(\"swap error\", e);\n      return false;\n    }\n\n    return true;\n  };\n\n  const sendAndConfirmTransaction = async (serializedTransaction: string) => {\n    const signature = await backgroundClient.request({\n      method: UI_RPC_METHOD_SOLANA_SIGN_AND_SEND_TRANSACTION,\n      params: [\n        bs58.encode(Buffer.from(serializedTransaction, \"base64\")),\n        walletPublicKey,\n      ],\n    });\n    await confirmTransaction(connection, signature, \"confirmed\");\n    return signature;\n  };\n\n  // Only allow users to switch input and output tokens if they currently\n  // have a balance of the output token\n  const canSwitch =\n    toToken?.mint === WSOL_MINT || fromTokens.some((t) => t.mint === toMint);\n\n  return (\n    <_SwapContext.Provider\n      value={{\n        toMint,\n        setToMint,\n        fromMint,\n        fromTokens,\n        fromToken,\n        toTokens,\n        toToken,\n        setFromMint,\n        fromAmount,\n        setFromAmount,\n        toAmount,\n        swapToFromMints,\n        slippage,\n        setSlippage,\n        executeSwap,\n        priceImpactPct,\n        isLoadingRoutes,\n        isLoadingTransactions,\n        transactionFees,\n        swapFee,\n        isJupiterError,\n        availableForSwap,\n        exceedsBalance,\n        feeExceedsBalance,\n        canSwap: !availableForSwap.isZero(),\n        canSwitch,\n      }}\n    >\n      {children}\n    </_SwapContext.Provider>\n  );\n}\n\nexport function useSwapContext(): SwapContext {\n  const ctx = useContext(_SwapContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n","import { useEffect, useState } from \"react\";\nimport type { Blockchain, ServerPublicKey } from \"@coral-xyz/common\";\nimport {\n  BACKEND_API_URL,\n  getAuthMessage,\n  UI_RPC_METHOD_KEYRING_KEY_DELETE,\n  UI_RPC_METHOD_KEYRING_STORE_MNEMONIC_SYNC,\n  UI_RPC_METHOD_USER_ACCOUNT_PUBLIC_KEY_CREATE,\n  UI_RPC_METHOD_USER_JWT_UPDATE,\n} from \"@coral-xyz/common\";\n\nimport {\n  useAuthentication,\n  useBackgroundClient,\n  useDehydratedWallets,\n  useKeyringHasMnemonic,\n  useRpcRequests,\n  useUser,\n} from \"../hooks\";\n\n// Shared between mobile/extension\nexport function WithAuth({ children }: { children: React.ReactElement }) {\n  const { authenticate, checkAuthentication, getAuthSigner, getSigners } =\n    useAuthentication();\n  const background = useBackgroundClient();\n  const user = useUser();\n  const dehydratedWallets = useDehydratedWallets();\n  const { signMessageForWallet } = useRpcRequests();\n\n  const [authData, setAuthData] = useState<{\n    publicKey: string;\n    blockchain: Blockchain;\n    hardware: boolean;\n    message: string;\n    userId: string;\n  } | null>(null);\n  const [authSignature, setAuthSignature] = useState<string | null>(null);\n  // const [openDrawer, setOpenDrawer] = useState(false);\n  const [serverPublicKeys, setServerPublicKeys] = useState<\n    | {\n        blockchain: Blockchain;\n        publicKey: string;\n      }[]\n    | null\n  >(null);\n  const [clientPublicKeys, setClientPublicKeys] = useState<\n    { blockchain: Blockchain; publicKey: string; hardware: boolean }[]\n  >([]);\n  const hasMnemonic = useKeyringHasMnemonic();\n  const [syncAttempted, setSyncAttempted] = useState(false);\n\n  /**\n   * Check authentication status and take required actions to authenticate if\n   * not authenticated.\n   */\n  useEffect(() => {\n    setAuthSignature(null);\n    setServerPublicKeys(null);\n    (async () => {\n      setClientPublicKeys(await getSigners());\n      const result = user.jwt ? await checkAuthentication(user.jwt) : null;\n      // These set state calls should be batched\n      if (result) {\n        const { publicKeys } = result;\n        setServerPublicKeys(publicKeys);\n      } else {\n        // Not authenticated so couldn't get public keys, get the primary\n        // public keys from a public endpoint and use one of those to auth\n        const response = await fetch(\n          `${BACKEND_API_URL}/users/${user.username}`\n        );\n        const serverPublicKeys = (await response.json()).publicKeys;\n        setServerPublicKeys(serverPublicKeys);\n        // Find a local signer that exists on the client and server and\n        // set the auth data\n        const signer = await getAuthSigner(\n          serverPublicKeys.map((p: ServerPublicKey) => p.publicKey)\n        );\n        if (authData) {\n          setAuthData({\n            ...signer,\n            message: getAuthMessage(user.uuid),\n            userId: user.uuid,\n          });\n        }\n      }\n    })();\n    // Rerun authentication on user changes\n  }, [user]);\n\n  /**\n   * When data for authentication is set, take the required action to get a signature.\n   */\n  useEffect(() => {\n    (async () => {\n      if (authData) {\n        if (!authData.hardware) {\n          // Auth signer is not a hardware wallet, sign transparent\n          const signature = await signMessageForWallet(\n            authData.blockchain,\n            authData.publicKey,\n            authData.message\n          );\n          setAuthSignature(signature);\n        } else {\n          // Auth signer is a hardware wallet, pop up a drawer to guide through\n          // flow\n          // setOpenDrawer(true);\n        }\n      }\n    })();\n  }, [authData]);\n\n  /**\n   * When an auth signature is created, authenticate with it.\n   */\n  useEffect(() => {\n    (async () => {\n      if (authData && authSignature) {\n        const { id, jwt, publicKeys } = await authenticate({\n          ...authData,\n          signature: authSignature,\n        });\n        // Update server public keys so we attempt to sync the non primary\n        // public keys (i.e. those that require authentication to see)\n        setServerPublicKeys(publicKeys);\n        // Store the JWT from the authentication forl ater\n        await background.request({\n          method: UI_RPC_METHOD_USER_JWT_UPDATE,\n          params: [id, jwt],\n        });\n        // Close the hardware sign drawer (if open)\n        // setOpenDrawer(false);\n      }\n    })();\n  }, [authData, authSignature]);\n\n  /**\n   * Remove any hardware wallets that are on the client but not the server\n   * because we can't transparently sign. For mnemmonic based wallets\n   * transparently sign and add them to the server.\n   */\n  useEffect(() => {\n    (async () => {\n      if (!serverPublicKeys) {\n        return;\n      }\n      // Public key/signature pairs that are required to sync the state of the\n      // server public key data with the client data.\n      const danglingPublicKeys = clientPublicKeys.filter((c) => {\n        // Filter to client public keys that don't exist on the server\n        const existsServer = serverPublicKeys.find(\n          (s) => s.blockchain === c.blockchain && s.publicKey === c.publicKey\n        );\n        return !existsServer;\n      });\n      for (const danglingPublicKey of danglingPublicKeys) {\n        if (danglingPublicKey.hardware) {\n          // Remove hardware public keys if they are not on the server\n          // They can be added again through settings to capture the\n          // signature\n          try {\n            await background.request({\n              method: UI_RPC_METHOD_KEYRING_KEY_DELETE,\n              params: [\n                danglingPublicKey.blockchain,\n                danglingPublicKey.publicKey,\n              ],\n            });\n          } catch {\n            // If the delete fails for some reason, don't error out because\n            // the wallet will not be accessible\n          }\n        } else {\n          // Sync all transparently signable public keys by adding them\n          // to the server\n          await background.request({\n            method: UI_RPC_METHOD_USER_ACCOUNT_PUBLIC_KEY_CREATE,\n            params: [danglingPublicKey.blockchain, danglingPublicKey.publicKey],\n          });\n        }\n      }\n    })();\n  }, [background, clientPublicKeys, serverPublicKeys]);\n\n  //\n  // Attempt to find any dehydrated wallets on the mnemonic if a mnemonic is in use.\n  //\n  useEffect(() => {\n    (async () => {\n      try {\n        if (hasMnemonic) {\n          if (dehydratedWallets.length > 0 && !syncAttempted) {\n            // We need to only do this once, the dehydrated wallets array will change\n            // if we find wallets and successfully load them and we don't want to\n            // trigger this function for smaller and smaller dehydratedWallets arrays\n            setSyncAttempted(true);\n            // Do the sync\n            await background.request({\n              method: UI_RPC_METHOD_KEYRING_STORE_MNEMONIC_SYNC,\n              params: [dehydratedWallets],\n            });\n          }\n        } else {\n          // If no mnemonic, don't try and sync again. When adding a mnemonic to a\n          // keyring there is a small period where the notifications\n          // haven't been processed which can trigger this again resulting in two\n          // of the same wallet appearing in the wallet list.\n          setSyncAttempted(true);\n        }\n      } catch (error) {\n        console.log(\"sync error\", error);\n      }\n    })();\n  }, [background, hasMnemonic, dehydratedWallets, syncAttempted]);\n\n  return children;\n}\n","export * from \"./NavEphemeral\";\nexport * from \"./Notifications\";\nexport * from \"./OnboardingProvider\";\nexport * from \"./Swap\";\nexport * from \"./WithAuth\";\n","export { useNavigate } from \"react-router-dom\";\n","//\n// Atom and selector that support custom equality checks rather than reference\n// equality only.\n// See https://github.com/facebookexperimental/Recoil/issues/1416 for discussion.\n//\n\nimport type {\n  AtomFamilyOptions,\n  AtomOptions,\n  ReadOnlySelectorFamilyOptions,\n  ReadOnlySelectorOptions,\n  RecoilState,\n  RecoilValueReadOnly,\n  SerializableParam,\n} from \"recoil\";\nimport { atom, atomFamily, selector, selectorFamily } from \"recoil\";\n\ntype EqualAtomOptions<T> = AtomOptions<T> & {\n  equals: (a: T, b: T) => boolean;\n};\n\n/**\n * Use a writable selector to prevent excess renders.\n * If the setting value is equal to the current value, don't change anything.\n */\nexport function equalAtom<T>(options: EqualAtomOptions<T>): RecoilState<T> {\n  const { key, equals, ...innerOptions } = options;\n  const inner = atom({\n    key: `${key}_inner`,\n    ...innerOptions,\n  });\n\n  return selector({\n    key,\n    get: ({ get }) => get(inner),\n    set: ({ get, set }, newValue) => {\n      const current = get(inner);\n      if (!equals(newValue as T, current)) {\n        set(inner, newValue);\n      }\n    },\n  });\n}\n\ninterface EqualSelectorOptions<T>\n  extends Pick<ReadOnlySelectorOptions<T>, \"key\" | \"get\"> {\n  equals: (a: T, b: T) => boolean;\n}\n\n/**\n * Use a wrapper selector to prevent excess renders.\n * If the latest selection is value-equal to prior ref, return the prior ref.\n */\nexport function equalSelector<T>(\n  options: EqualSelectorOptions<T>\n): RecoilValueReadOnly<T> {\n  const inner = selector({\n    key: `${options.key}_inner`,\n    get: options.get,\n  });\n\n  let prior: T | undefined;\n\n  return selector({\n    key: options.key,\n    get: ({ get }) => {\n      const latest = get(inner);\n      if (prior != null && options.equals(latest, prior)) {\n        return prior;\n      }\n      prior = latest;\n      return latest as T;\n    },\n  });\n}\n\ntype EqualAtomFamilyOptions<T, K extends SerializableParam> = AtomFamilyOptions<\n  T,\n  K\n> & {\n  equals: (a: T, b: T) => boolean;\n};\n\n/**\n * Use a writable selector to prevent excess renders.\n * If the setting value is equal to the current value, don't change anything.\n */\nexport function equalAtomFamily<T, K extends SerializableParam>(\n  options: EqualAtomFamilyOptions<T, K>\n): (key: K) => RecoilState<T> {\n  const { key, equals, ...innerOptions } = options;\n  const inner = atomFamily({\n    key: `${key}_inner`,\n    ...innerOptions,\n  });\n\n  return selectorFamily({\n    key,\n    get:\n      (key) =>\n      ({ get }) =>\n        get(inner(key)),\n    set:\n      (key) =>\n      ({ get, set }, newValue) => {\n        const current = get(inner(key));\n        if (!equals(newValue as T, current)) {\n          set(inner(key), newValue);\n        }\n      },\n  });\n}\n\ninterface EqualSelectorFamilyOptions<T, K extends SerializableParam>\n  extends Pick<ReadOnlySelectorFamilyOptions<T, K>, \"key\" | \"get\"> {\n  equals: (a: T, b: T) => boolean;\n}\n\n/**\n * Use a wrapper selector to prevent excess renders.\n * If the latest selection is value-equal to prior ref, return the prior ref.\n */\nexport function equalSelectorFamily<T, K extends SerializableParam>(\n  options: EqualSelectorFamilyOptions<T, K>\n): (key: K) => RecoilValueReadOnly<T> {\n  const inner = selectorFamily({\n    key: `${options.key}_inner`,\n    get: options.get,\n  });\n\n  let prior: T | undefined;\n\n  return selectorFamily({\n    key: options.key,\n    get:\n      (key) =>\n      ({ get }) => {\n        const latest = get(inner(key));\n        if (prior != null && options.equals(latest, prior)) {\n          return prior;\n        }\n        prior = latest;\n        return latest as T;\n      },\n  });\n}\n","import { AVATAR_BASE_URL } from \"@coral-xyz/common\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { newAvatarAtom } from \"../atoms\";\n\nimport { useUser } from \"./preferences\";\n\nconst sessionCacheBuster = Date.now();\n\nexport function useAvatarUrl(size?: number, givenUsername?: string): string {\n  const user = useUser();\n  const username = givenUsername ?? user.username;\n  const newAvatar = useRecoilValue(newAvatarAtom(username)); // reload images when avatar changed.\n  const _username = username === \"\" || username === null ? \"dev\" : username;\n  return newAvatar?.url\n    ? newAvatar.url\n    : AVATAR_BASE_URL + \"/\" + _username + \"/\" + sessionCacheBuster;\n}\n","import { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../atoms\";\n\nimport { useKeyringStoreState } from \"./keyring\";\nimport { useNavigation, useTab } from \"./navigation\";\nimport { useAllUsers } from \"./preferences\";\nimport { useSolanaCommitment } from \"./solana\";\n\nexport function useBootstrapFast() {\n  useRecoilValue(atoms.bootstrapFast);\n\n  // Hack: load all the navigation atoms to prevent UI flickering.\n  //       TODO: can batch these into a single request to the background script.\n  useTab();\n  useNavigation();\n  useKeyringStoreState();\n  useSolanaCommitment();\n  useAllUsers();\n}\n\nexport function useRedirectUrl(): string {\n  return useRecoilValue(atoms.navCurrentUrl);\n}\n","import { useEffect } from \"react\";\nimport type {\n  ChannelAppUiClient,\n  ChannelAppUiResponder,\n} from \"@coral-xyz/common\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { backgroundClient, backgroundResponder } from \"../atoms\";\n\nexport function useBackgroundClient(): ChannelAppUiClient {\n  return useRecoilValue(backgroundClient);\n}\n\nexport function useBackgroundResponder(): ChannelAppUiResponder {\n  return useRecoilValue(backgroundResponder);\n}\n","export * from \"./useEthereumConnectionUrl\";\nexport * from \"./useEthereumCtx\";\nexport * from \"./useEthereumExplorer\";\nexport * from \"./useUpdateEthereumBalances\";\n","import { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../../atoms\";\n\nexport function useEthereumConnectionUrl(): string {\n  return useRecoilValue(atoms.ethereumConnectionUrl)!;\n}\n","import type { EthereumContext } from \"@coral-xyz/common\";\nimport type { FeeData } from \"@ethersproject/abstract-provider\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../../atoms\";\nimport { useBackgroundClient } from \"../client\";\nimport { useActiveEthereumWallet } from \"../wallet\";\n\nconst { AddressZero } = ethers.constants;\n\nexport function useEthersContext(): any {\n  return useRecoilValue(atoms.ethersContext);\n}\n\nexport function useEthereumFeeData(): any {\n  const feeData = useRecoilValue(atoms.ethereumFeeData);\n  return {\n    gasPrice: BigNumber.from(feeData.gasPrice),\n    maxFeePerGas: BigNumber.from(feeData.maxFeePerGas),\n    maxPriorityFeePerGas: BigNumber.from(feeData.maxPriorityFeePerGas),\n  } as FeeData;\n}\n\nexport function useEthereumCtx(): EthereumContext {\n  const wallet = useActiveEthereumWallet();\n  const { provider, chainId } = useEthersContext();\n  const backgroundClient = useBackgroundClient();\n  const feeData = useEthereumFeeData();\n\n  return {\n    walletPublicKey: wallet ? wallet.publicKey : AddressZero,\n    provider,\n    chainId,\n    feeData,\n    backgroundClient,\n  };\n}\n","import { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../../atoms\";\n\nexport function useEthereumExplorer(): string {\n  return useRecoilValue(atoms.ethereumExplorer)!;\n}\n","import { useRecoilCallback } from \"recoil\";\n\nimport * as atoms from \"../../atoms\";\n\nexport const useUpdateEthereumBalances = () =>\n  useRecoilCallback(\n    ({ set }: any) =>\n      async ({\n        connectionUrl,\n        publicKey,\n        balances,\n      }: {\n        connectionUrl: string;\n        publicKey: string;\n        balances: any;\n      }) => {\n        set(\n          atoms.ethereumBalances({\n            connectionUrl,\n            publicKey,\n          }),\n          new Map(Object.entries(balances))\n        );\n      }\n  );\n","export * from \"./avatar\";\nexport * from \"./bootstrap\";\nexport * from \"./client\";\nexport * from \"./ethereum\";\nexport * from \"./keyring\";\nexport * from \"./navigation\";\nexport * from \"./notifications\";\nexport * from \"./preferences\";\nexport * from \"./solana\";\nexport * from \"./transaction-request\";\nexport * from \"./useAuthentication\";\nexport * from \"./useBlockchain\";\nexport * from \"./useBreakpoints\";\nexport * from \"./useFeatureGates\";\nexport * from \"./useFriendship\";\nexport * from \"./useIsValidAddress\";\nexport * from \"./useLoader\";\nexport * from \"./usePriceData\";\nexport * from \"./usePrimaryWallets\";\nexport * from \"./useRecentNotifications\";\nexport * from \"./useRpcRequests\";\nexport * from \"./useTokenMetadata\";\nexport * from \"./useTotalBalance\";\nexport * from \"./useTransactionData\";\nexport * from \"./useUnreadCount\";\nexport * from \"./useUpdateFriendship\";\nexport * from \"./useUpdateUsers\";\nexport * from \"./useUserMetadataMap\";\nexport * from \"./useXnftPreferences\";\nexport * from \"./wallet\";\n","import { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../atoms\";\nimport type { KeyringStoreState } from \"../atoms/keyring\";\n\nexport function useKeyringStoreState(): KeyringStoreState {\n  return useRecoilValue(atoms.keyringStoreState)!;\n}\n\nexport function useKeyringHasMnemonic(): boolean {\n  return useRecoilValue(atoms.keyringHasMnemonic);\n}\n","import { useCallback } from \"react\";\nimport { useLocation, useSearchParams } from \"react-router-dom\";\nimport type { Blockchain, ExtensionSearchParams } from \"@coral-xyz/common\";\nimport {\n  makeUrl,\n  TAB_SET,\n  UI_RPC_METHOD_NAVIGATION_CURRENT_URL_UPDATE,\n  UI_RPC_METHOD_NAVIGATION_POP,\n  UI_RPC_METHOD_NAVIGATION_PUSH,\n  UI_RPC_METHOD_NAVIGATION_TO_ROOT,\n} from \"@coral-xyz/common\";\nimport { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../atoms\";\n\nimport { useBreakpoints } from \"./useBreakpoints\";\n\ntype NavigationContext = {\n  isRoot: boolean;\n  title: string;\n  push: ReturnType<typeof useNavigationSegue>[\"push\"];\n  pop: ReturnType<typeof useNavigationSegue>[\"pop\"];\n  toRoot: ReturnType<typeof useNavigationSegue>[\"toRoot\"];\n};\n\nexport function useNavigation(): NavigationContext {\n  const location = useLocation();\n\n  const { push, pop, toRoot } = useNavigationSegue();\n\n  const pathname = location.pathname;\n  const isRoot = TAB_SET.has(pathname.slice(1));\n  const params = new URLSearchParams(location.search);\n  const paramsTitle =\n    useDecodedSearchParams<ExtensionSearchParams>(params).title || \"\";\n  const title = isRoot ? \"\" : paramsTitle;\n\n  return {\n    isRoot,\n    title,\n    push,\n    pop,\n    toRoot,\n  };\n}\n\n// Assumes all urls are of the form `/<tab>/<component-id>/.../`.\nexport function useTab(): string {\n  const location = useLocation();\n  const pathname = location.pathname;\n  const tab = pathname.split(\"/\")[1];\n  return tab;\n}\n\nexport function useUpdateSearchParams(): (params: URLSearchParams) => void {\n  const background = useRecoilValue(atoms.backgroundClient);\n  const location = useLocation();\n  const activeTab = TAB_SET.has(location.pathname)\n    ? location.pathname.slice(1)\n    : null;\n\n  return useCallback(\n    (params) => {\n      const url = `${location.pathname}?${params.toString()}`;\n      background\n        .request({\n          method: UI_RPC_METHOD_NAVIGATION_CURRENT_URL_UPDATE,\n          params: [url, activeTab],\n        })\n        .catch(console.error);\n    },\n    [location.pathname, background]\n  );\n}\n\nexport function useNavigationSegue() {\n  const background = useRecoilValue(atoms.backgroundClient);\n  const { isXs } = useBreakpoints();\n\n  const push = async (\n    {\n      title,\n      componentId,\n      componentProps,\n      pushAboveRoot,\n    }: {\n      title: string;\n      componentId: string;\n      componentProps: any;\n      pushAboveRoot?: boolean;\n    },\n    tab?: string\n  ) => {\n    const url = makeUrl(componentId, {\n      props: componentProps,\n      title,\n    });\n    return await background.request({\n      method: UI_RPC_METHOD_NAVIGATION_PUSH,\n      params: [url, tab, !isXs && pushAboveRoot ? true : false],\n    });\n  };\n  const pop = async (tab?: string) => {\n    return await background.request({\n      method: UI_RPC_METHOD_NAVIGATION_POP,\n      params: [tab],\n    });\n  };\n  const toRoot = async () => {\n    return await background.request({\n      method: UI_RPC_METHOD_NAVIGATION_TO_ROOT,\n      params: [],\n    });\n  };\n\n  return {\n    push,\n    pop,\n    toRoot,\n  };\n}\n\n/**\n * @param urlSearchParams optional URLSearchParams object\n * @returns a key/value object of search params that have been\n * correctly URL decoded and JSON.parsed\n */\nexport function useDecodedSearchParams<\n  SearchParamsType extends ExtensionSearchParams\n>(urlSearchParams?: URLSearchParams) {\n  const _searchParams = useSearchParams();\n  const [searchParams] = urlSearchParams ? [urlSearchParams] : _searchParams;\n  const ob = {};\n  searchParams.forEach((v, k) => {\n    if (k !== \"nav\") {\n      try {\n        ob[k as keyof ExtensionSearchParams] = JSON.parse(\n          decodeURIComponent(v)\n        );\n      } catch {\n        // Pass\n      }\n    }\n  });\n  return ob as SearchParamsType;\n}\n","// Note(peter): copied from extension\nimport { useEffect } from \"react\";\nimport type { EnrichedNotification } from \"@coral-xyz/common\";\nimport { BACKEND_API_URL } from \"@coral-xyz/common\";\nimport { useRecoilState } from \"recoil\";\n\nimport { unreadCount } from \"../atoms/unreadCount\";\n\nimport { useAuthenticatedUser, useRecentNotifications } from \"./\";\n\nconst formatDate = (date: Date) => {\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"Aug\",\n    \"Sept\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n  const mm = months[date.getMonth()];\n  const dd = date.getDate();\n  const yyyy = date.getFullYear();\n  return `${dd} ${mm} ${yyyy}`;\n};\n\nconst getGroupedNotifications = (notifications: EnrichedNotification[]) => {\n  const groupedNotifications: {\n    date: string;\n    notifications: EnrichedNotification[];\n  }[] = [];\n\n  const uniqueNotifications = notifications\n    .slice()\n    .sort((a, b) =>\n      new Date(a.timestamp).getTime() < new Date(b.timestamp).getTime() ? 1 : -1\n    )\n    .filter(\n      (x, index) =>\n        x.xnft_id !== \"friend_requests\" ||\n        notifications.map((y) => y.body).indexOf(x.body) === index\n    );\n  const sortedNotifications = uniqueNotifications.sort((a, b) =>\n    new Date(a.timestamp).getTime() < new Date(b.timestamp).getTime() ? 1 : -1\n  );\n\n  for (let i = 0; i < sortedNotifications.length; i++) {\n    const date = formatDate(new Date(sortedNotifications[i].timestamp));\n    if (\n      groupedNotifications.length === 0 ||\n      groupedNotifications[groupedNotifications.length - 1].date !== date\n    ) {\n      groupedNotifications.push({\n        date,\n        notifications: [sortedNotifications[i]],\n      });\n    } else {\n      groupedNotifications[groupedNotifications.length - 1].notifications.push(\n        sortedNotifications[i]\n      );\n    }\n  }\n\n  return groupedNotifications;\n};\n\nexport function NotificationsData({ children }) {\n  const authenticatedUser = useAuthenticatedUser();\n  const [, setUnreadCount] = useRecoilState(unreadCount);\n  const notifications: EnrichedNotification[] = useRecentNotifications({\n    limit: 50,\n    offset: 0,\n    uuid: authenticatedUser?.uuid ?? \"\",\n  });\n\n  useEffect(() => {\n    (async function f() {\n      const allNotifications = notifications.slice();\n      const uniqueNotifications = allNotifications\n        .sort((a, b) =>\n          new Date(a.timestamp).getTime() < new Date(b.timestamp).getTime()\n            ? 1\n            : -1\n        )\n        .filter(\n          (x, index) =>\n            x.xnft_id !== \"friend_requests\" ||\n            allNotifications.map((y) => y.body).indexOf(x.body) === index\n        );\n\n      const sortedNotifications = uniqueNotifications.sort((a, b) =>\n        new Date(a.timestamp).getTime() < new Date(b.timestamp).getTime()\n          ? 1\n          : -1\n      );\n\n      const latestNotification = sortedNotifications[0];\n      if (latestNotification && latestNotification.id) {\n        await fetch(`${BACKEND_API_URL}/notifications/cursor`, {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            lastNotificationId: latestNotification.id,\n          }),\n        });\n      }\n\n      await fetch(`${BACKEND_API_URL}/notifications/seen`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          notificationIds: notifications\n            .filter((x) => !x.viewed)\n            .map(({ id }) => id),\n        }),\n      });\n\n      setUnreadCount(0);\n    })();\n  }, [notifications, setUnreadCount]);\n\n  const groupedNotifications: {\n    date: string;\n    notifications: EnrichedNotification[];\n  }[] = getGroupedNotifications(notifications);\n\n  return children({ groupedNotifications });\n}\n","import { UI_RPC_METHOD_APPROVED_ORIGINS_UPDATE } from \"@coral-xyz/common\";\nimport { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../../atoms\";\nimport { xnftJwt } from \"../../atoms\";\nimport { useBackgroundClient } from \"../client\";\n\nexport function useApprovedOrigins(): Array<string> {\n  return useRecoilValue(atoms.approvedOrigins)!;\n}\n\nexport function useApproveOrigin(): (origin: string) => Promise<void> {\n  const approvedOrigins = useRecoilValue(atoms.approvedOrigins);\n  const background = useBackgroundClient();\n  return async (origin: string) => {\n    const o = approvedOrigins!.find((o) => o === origin);\n    if (o) {\n      throw new Error(\"origin already approved\");\n    }\n    await background.request({\n      method: UI_RPC_METHOD_APPROVED_ORIGINS_UPDATE,\n      params: [[...approvedOrigins!, origin]],\n    });\n  };\n}\n\nexport function useAutoLockSettings() {\n  return useRecoilValue(atoms.autoLockSettings);\n}\n\nexport function useDarkMode(): boolean {\n  return useRecoilValue(atoms.isDarkMode)!;\n}\n\nexport function useDeveloperMode(): boolean {\n  return useRecoilValue(atoms.isDeveloperMode)!;\n}\n\nexport function useIsAggregateWallets(): boolean {\n  return useRecoilValue(atoms.isAggregateWallets);\n}\n\nexport function useConnectionUrls() {\n  return useRecoilValue(atoms.connectionUrls);\n}\n\nexport function useUser(): { username: string; uuid: string; jwt: string } {\n  return useRecoilValue(atoms.user);\n}\n\nexport function useAuthenticatedUser() {\n  return useRecoilValue(atoms.authenticatedUser);\n}\n\nexport function useXnftJwt(xnftAddress: string) {\n  return useRecoilValue(xnftJwt({ xnftAddress }));\n}\n\nexport function useAllUsers() {\n  return useRecoilValue(atoms.allUsers);\n}\n","import type { RawMintString } from \"@coral-xyz/common\";\nimport { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../../atoms\";\n\nexport * from \"./recentTransactionHelpers\";\nexport * from \"./useJupiter\";\nexport * from \"./useLoadSplTokens\";\nexport * from \"./usePlugins\";\nexport * from \"./useRecentTransactions\";\nexport * from \"./useSolanaCommitment\";\nexport * from \"./useSolanaConnection\";\nexport * from \"./useSolanaExplorer\";\nexport * from \"./useSolanaTransaction\";\nexport * from \"./useSplTokenRegistry\";\n\nexport function useSolanaTokenMint({\n  publicKey,\n  tokenAddress,\n}: {\n  publicKey: string;\n  tokenAddress: string;\n}): RawMintString {\n  return useRecoilValue(atoms.solanaTokenMint({ tokenAddress, publicKey }));\n}\n","// Note(peter): copied from extension\nimport {\n  SOL_NATIVE_MINT,\n  walletAddressDisplay,\n  WSOL_MINT,\n} from \"@coral-xyz/common\";\nimport type { TokenInfo } from \"@solana/spl-token-registry\";\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { NftEventTypes, Source, TransactionType } from \"helius-sdk/dist/types\";\n\nimport { SOL_LOGO_URI } from \"../../atoms\";\n\nexport const UNKNOWN_ICON_SRC =\n  \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM10.9645 15.3015C10.9645 15.7984 11.3677 16.2015 11.8645 16.2015C12.3612 16.2015 12.7645 15.7984 12.7645 15.3015C12.7645 14.8047 12.3612 14.4015 11.8645 14.4015C11.3677 14.4015 10.9645 14.8047 10.9645 15.3015ZM13.3939 11.8791C13.9135 11.5085 14.2656 11.1748 14.4511 10.8777C14.8776 10.1948 14.8728 9.02088 14.0532 8.35291C12.9367 7.44383 10.8943 7.77224 9.6001 8.49763L10.2067 9.7155C10.9189 9.35193 11.553 9.17 12.1092 9.17C12.6546 9.17 13.1214 9.36453 13.1214 9.91004C13.1214 10.4891 12.6543 10.8231 12.1713 11.1684L12.171 11.1686L12.1645 11.173C11.9915 11.2996 11.8416 11.4235 11.7147 11.5442C11.5451 11.7059 11.4168 11.8621 11.3298 12.013C11.1013 12.4085 11.1014 12.736 11.1019 13.152V13.2015H12.5761L12.576 13.158C12.5755 12.6312 12.5753 12.4844 13.3939 11.8791ZM20.5 12C20.5 16.6944 16.6944 20.5 12 20.5C7.30558 20.5 3.5 16.6944 3.5 12C3.5 7.30558 7.30558 3.5 12 3.5C16.6944 3.5 20.5 7.30558 20.5 12ZM22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z' fill='%238F929E'/%3E%3C/svg%3E\";\n\nexport type Instruction = {\n  accounts: Array<any>;\n  data: string;\n  programId: string;\n  innerInstructions: Array<any>;\n};\n\nexport type TokenTransfer = {\n  fromTokenAccount: string;\n  fromUserAccount: string;\n  mint: string;\n  toTokenAccount: string;\n  toUserAccount: string;\n  tokenAmount: number;\n  tokenStandard: string;\n};\n\nexport type AccountData = {\n  accounts: string;\n  nativeBalanceChange: number;\n  tokenBalanceChanges: Array<any>;\n  innerInstructions: Array<any>;\n};\n\nexport type HeliusParsedTransaction = {\n  accountData: Array<AccountData>;\n  blockchain: string;\n  description: string;\n  events: any;\n  fee: number;\n  feePayer: string;\n  instructions: Array<Instruction>;\n  nativeTransfers: Array<any>;\n  signature: string;\n  slot: number;\n  source: string;\n  timestamp: number;\n  tokenTransfers: Array<TokenTransfer>;\n  transactionError: string | null;\n  type: string;\n};\n\nconst unknownTokenInfo = (mint: string): TokenInfo => ({\n  address: mint,\n  chainId: 0,\n  decimals: 0,\n  logoURI: UNKNOWN_ICON_SRC,\n  name: \"Unknown\",\n  symbol: \"UNK\",\n});\n\nexport const isNFTTransaction = (\n  transaction: HeliusParsedTransaction\n): boolean => {\n  return (\n    NftEventTypes.includes(transaction?.type as TransactionType) ||\n    transaction?.tokenTransfers[0]?.tokenStandard === \"NonFungible\"\n  );\n};\n\nexport const formatTimestamp = (timestamp: number): string => {\n  const date = new Date(timestamp * 1000);\n  let hours = date.getHours();\n  let minutes: string | number = date.getMinutes();\n  let ampm = hours >= 12 ? \"pm\" : \"am\";\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? \"0\" + minutes : minutes;\n  return (\n    date.getDate() +\n    \" \" +\n    new Intl.DateTimeFormat(\"en-US\", { month: \"long\" }).format(date) +\n    \", at \" +\n    hours +\n    \":\" +\n    minutes +\n    \" \" +\n    ampm\n  );\n};\n\nexport const formatTimestampListView = (timestamp: number): string => {\n  const date = new Date(timestamp * 1000);\n  return (\n    date.getDate() +\n    \" \" +\n    new Intl.DateTimeFormat(\"en-US\", { month: \"long\" }).format(date) +\n    \", \" +\n    date.getFullYear()\n  );\n};\n\nexport const groupTxnsByDate = (\n  arr: HeliusParsedTransaction[]\n): HeliusParsedTransaction[][] => {\n  const result: HeliusParsedTransaction[][] = [];\n  let currentDate = \"\";\n\n  for (const item of arr) {\n    const date = new Date(item?.timestamp * 1000).toDateString();\n    if (date !== currentDate) {\n      currentDate = date;\n      result.push([]);\n    }\n    result[result.length - 1].push(item);\n  }\n  return result;\n};\n\nexport const getSourceOrTypeFormatted = (sourceOrType: string): string => {\n  return (\n    sourceOrType\n      // @ts-expect-error this does exist in the browser context\n      .replaceAll(\"_\", \" \")\n      .split(\" \")\n      .map((word: string) => word.charAt(0) + word.slice(1).toLowerCase())\n      .join(\" \")\n  );\n};\n\nexport const isUserTxnSender = (\n  transaction: HeliusParsedTransaction,\n  activeWallet: any\n) => {\n  if (\n    transaction?.tokenTransfers[0]?.fromUserAccount ===\n      activeWallet.publicKey ||\n    transaction?.nativeTransfers[0]?.fromUserAccount === activeWallet.publicKey\n  )\n    return true;\n\n  if (\n    transaction?.tokenTransfers[0]?.toUserAccount === activeWallet.publicKey ||\n    transaction?.nativeTransfers[0]?.toUserAccount === activeWallet.publicKey\n  )\n    return false;\n\n  return null;\n};\n\nexport function getTransactionTitle(\n  activeWallet: any,\n  transaction: HeliusParsedTransaction,\n  metadata?: any\n): string {\n  switch (transaction.type) {\n    case TransactionType.BURN:\n    case TransactionType.BURN_NFT:\n      return \"Burned\";\n    case TransactionType.TRANSFER:\n      // send/receive NFT's are returned as TransactionType.TRANSFER\n      const nftName = metadata?.onChainMetadata?.metadata?.data?.name;\n      if (isNFTTransaction(transaction) && nftName) {\n        return nftName;\n      } else if (isUserTxnSender(transaction, activeWallet)) {\n        return \"Sent\";\n      } else if (isUserTxnSender(transaction, activeWallet) === false) {\n        return \"Received\";\n      } else {\n        return \"App Interaction\";\n      }\n    case TransactionType.SWAP:\n      return \"Token Swap\";\n    case TransactionType.NFT_MINT: {\n      const nftName = metadata?.onChainMetadata?.metadata?.data?.name;\n      return `Minted: ${nftName}`;\n    }\n    default:\n      let title = \"App Interaction\";\n\n      // if (transaction?.source) title = \"App Interaction\";\n      // if transaction is of type NFT and was not caught above under 'TRANSFER' case\n      // TODO: test this case to see if it is necessary\n      const nonTransferNftName =\n        metadata?.onChainMetadata?.metadata?.data?.name;\n\n      if (isNFTTransaction(transaction) && nonTransferNftName) {\n        return nonTransferNftName;\n      }\n\n      // txn has a transactionError\n      if (transaction?.transactionError) {\n        title = \"Failed\";\n      }\n\n      // if we have a type, format it and set it as the title\n      // if (transaction?.type && transaction?.type !== TransactionType.UNKNOWN) {\n      //   title = getSourceOrTypeFormatted(transaction.type);\n      //   return title;\n      // }\n\n      return title;\n  }\n}\n\nexport const getTransactionDetailTitle = (\n  activeWallet: any,\n  transaction: HeliusParsedTransaction,\n  publicKey: string\n) => {\n  switch (transaction.type) {\n    case TransactionType.BURN:\n    case TransactionType.BURN_NFT:\n      return \"Burned\";\n\n    case TransactionType.TRANSFER:\n      if (isUserTxnSender(transaction, activeWallet)) return \"Sent\";\n      else if (isUserTxnSender(transaction, activeWallet) === false)\n        return \"Received\";\n      return \"App Interaction\";\n\n    case TransactionType.SWAP:\n      return \"Swap\";\n\n    case TransactionType.NFT_SALE:\n      return transaction?.events?.nft?.seller === publicKey ? \"Sold\" : \"Bought\";\n\n    case TransactionType.NFT_LISTING:\n      return \"Listed\";\n\n    case TransactionType.NFT_CANCEL_LISTING:\n      return \"Listed Canceled\";\n\n    case TransactionType.NFT_MINT:\n      return \"Minted NFT\";\n\n    default:\n      let title = \"App Interaction\";\n\n      if (transaction?.transactionError) {\n        title = \"Failed\";\n      }\n\n      return title;\n  }\n};\n\n// used to display txn caption in list view\nexport const getTransactionCaption = (\n  activeWallet: any,\n  transaction: HeliusParsedTransaction,\n  tokenData: (TokenInfo | undefined)[],\n  metadata?: any\n): string => {\n  switch (transaction.type) {\n    // case TransactionType.UNKNOWN:\n    case TransactionType.TRANSFER:\n      if (isUserTxnSender(transaction, activeWallet)) {\n        return `To: ${walletAddressDisplay(\n          transaction?.tokenTransfers[0]?.toUserAccount ||\n            transaction?.nativeTransfers[0]?.toUserAccount\n        )}`;\n      } else if (isUserTxnSender(transaction, activeWallet) === false) {\n        return `From: ${walletAddressDisplay(\n          transaction?.tokenTransfers[0]?.fromUserAccount ||\n            transaction?.nativeTransfers[0]?.fromUserAccount\n        )}`;\n      }\n      // if (TransactionType.TRANSFER) return \"Transferred\";\n      return transaction?.source &&\n        transaction?.source !== TransactionType.UNKNOWN\n        ? getSourceOrTypeFormatted(transaction?.source)\n        : \"\";\n\n    case TransactionType.SWAP:\n      const [input, output] = parseSwapTransaction(transaction, tokenData);\n      return input.symbolOrAddress && output.symbolOrAddress\n        ? [input.symbolOrAddress, output.symbolOrAddress].join(\" -> \")\n        : \"\";\n\n    case TransactionType.NFT_LISTING:\n      return `Listed on ${getSourceOrTypeFormatted(transaction.source)}`;\n\n    case TransactionType.NFT_SALE:\n      return `${\n        transaction?.events?.nft?.buyer === activeWallet.publicKey\n          ? \"Bought\"\n          : \"Sold\"\n      } on ${getSourceOrTypeFormatted(transaction.source)}`;\n\n    case TransactionType.NFT_CANCEL_LISTING:\n      return `Canceled listing on ${getSourceOrTypeFormatted(\n        transaction.source\n      )}`;\n\n    // case TransactionType.BURN:\n    //   return transaction?.\n    case TransactionType.NFT_MINT:\n      return walletAddressDisplay(\n        metadata?.onChainMetadata?.metadata?.collection?.key\n      );\n\n    default:\n      if (transaction?.source === Source.CARDINAL_RENT) return \"Rent Paid\";\n\n      // disable additional cases for now. Can uncomment/extend when needed\n      // if (transaction?.description)\n      //   return transaction?.description.split(\" \")?.slice(1).join(\" \");\n\n      // if (\n      //   transaction?.source &&\n      //   transaction?.source !== TransactionType.UNKNOWN\n      // )\n      //   return getSourceOrTypeFormatted(transaction.source);\n      return walletAddressDisplay(transaction?.instructions[0].programId);\n  }\n};\n\nexport const getTokenData = (\n  registry: Map<string, TokenInfo>,\n  transaction: HeliusParsedTransaction\n): (TokenInfo | undefined)[] => {\n  let tokenData: (TokenInfo | undefined)[] = [];\n\n  if (transaction.type === TransactionType.SWAP) {\n    // if token is isNativeInput/isNativeOutput, token swap is to/from SOL\n    const isNativeInput = transaction.events?.swap?.nativeInput;\n    const isNativeOutput = transaction.events?.swap?.nativeOutput;\n\n    const tokenInput = isNativeInput\n      ? WSOL_MINT\n      : transaction.events?.swap?.tokenInputs?.[0]?.mint ||\n        transaction.tokenTransfers?.[0]?.mint;\n\n    const tokenOutput = isNativeOutput\n      ? WSOL_MINT\n      : transaction.events?.swap?.tokenOutputs?.[0]?.mint ||\n        transaction.tokenTransfers?.[1]?.mint;\n\n    if (tokenInput && registry.get(tokenInput)) {\n      tokenData.push(registry.get(tokenInput) ?? unknownTokenInfo(tokenInput));\n    }\n\n    if (tokenOutput && registry.get(tokenOutput)) {\n      tokenData.push(\n        registry.get(tokenOutput) ?? unknownTokenInfo(tokenOutput)\n      );\n    }\n  } else if (transaction.type === TransactionType.TRANSFER) {\n    const transferredToken = transaction.tokenTransfers?.[0]?.mint;\n    if (transferredToken && registry.get(transferredToken)) {\n      tokenData.push(registry.get(transferredToken));\n    }\n  }\n\n  return tokenData;\n};\n\n// NOTE: this function is also in RecentSolanaActivity\nexport const parseSwapTransaction = (\n  transaction: HeliusParsedTransaction,\n  tokenData: ReturnType<typeof getTokenData>\n) => {\n  // should only be returned if parsing fails\n  const fallbackObject = {\n    tokenIcon: UNKNOWN_ICON_SRC,\n    amountWithSymbol: \"\",\n    symbolOrAddress: \"\",\n  };\n\n  try {\n    const {\n      nativeInput,\n      nativeOutput,\n      tokenInputs: [tokenInput],\n      tokenOutputs: [tokenOutput],\n    } = transaction.events.swap;\n\n    return [\n      [nativeInput, tokenInput],\n      [nativeOutput, tokenOutput],\n    ].map(([n, t]) => {\n      try {\n        const { mint, amount } = n\n          ? {\n              mint: SOL_NATIVE_MINT,\n              amount: (Number(n.amount) / LAMPORTS_PER_SOL).toFixed(5),\n            }\n          : {\n              mint: t.mint,\n              amount: (\n                Number(t.rawTokenAmount.tokenAmount) /\n                10 ** t.rawTokenAmount.decimals\n              ).toFixed(5),\n            };\n\n        const token = tokenData\n          .concat({\n            address: SOL_NATIVE_MINT,\n            symbol: \"SOL\",\n            logoURI: SOL_LOGO_URI,\n          } as any)\n          .find((t) => t?.address === mint);\n\n        const symbolOrAddress = token?.symbol || walletAddressDisplay(mint);\n\n        return {\n          tokenIcon: token?.logoURI || UNKNOWN_ICON_SRC,\n          symbolOrAddress,\n          amountWithSymbol: [amount, symbolOrAddress].join(\" \"),\n        };\n      } catch (err) {\n        console.error(err);\n        return fallbackObject;\n      }\n    });\n  } catch (err) {\n    console.error(err);\n    return [fallbackObject, fallbackObject];\n  }\n};\n","import type { TokenInfo } from \"@solana/spl-token-registry\";\nimport { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../../atoms\";\nimport type { TokenData } from \"../../types\";\n\nexport function useJupiterTokenList(): Array<TokenInfo> {\n  return useRecoilValue(atoms.jupiterTokenList);\n}\n\nexport function useJupiterTokenMap(): Map<string, TokenInfo> {\n  return useRecoilValue(atoms.jupiterTokenMap);\n}\n\nexport function useJupiterOutputTokens(inputMint: string): Array<TokenData> {\n  return useRecoilValue(atoms.jupiterOutputTokens({ inputMint }));\n}\n","import type { CustomSplTokenAccountsResponseString } from \"@coral-xyz/common\";\nimport { useRecoilCallback } from \"recoil\";\n\nimport * as atoms from \"../../atoms\";\n\nexport const useUpdateAllSplTokenAccounts = () =>\n  useRecoilCallback(\n    ({ set }: any) =>\n      async ({\n        connectionUrl,\n        publicKey,\n        customSplTokenAccounts,\n      }: {\n        connectionUrl: string;\n        publicKey: string;\n        customSplTokenAccounts: CustomSplTokenAccountsResponseString;\n      }) => {\n        // TODO: Do we want to check if the atoms have changed before setting\n        //       them? Probably since we don't have a recoil transaction and\n        //       so this hook may cause unnecessary rerenders.\n        set(atoms.customSplTokenAccounts({ connectionUrl, publicKey }), {\n          ...customSplTokenAccounts,\n          splTokenMints: new Map(customSplTokenAccounts.mintsMap),\n        });\n      }\n  );\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useLocation, useSearchParams } from \"react-router-dom\";\nimport {\n  externalResourceUri,\n  fetchXnft,\n  TAB_SET,\n  TAB_XNFT,\n  UI_RPC_METHOD_NAVIGATION_POP,\n  UI_RPC_METHOD_NAVIGATION_PUSH,\n} from \"@coral-xyz/common\";\n// XXX: this full path is currently necessary as it avoids loading the jsx in\n//      react-xnft-renderer/src/Component.tsx in the background service worker\nimport { Plugin } from \"@coral-xyz/common\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  useRecoilValue,\n  useRecoilValueLoadable,\n  useSetRecoilState,\n} from \"recoil\";\n\nimport * as atoms from \"../../atoms\";\nimport { useConnectionUrls } from \"../preferences\";\nimport {\n  useActivePublicKeys,\n  useBackgroundClient,\n  useConnectionBackgroundClient,\n  useNavigationSegue,\n} from \"../\";\n\nimport {\n  useAnchorContext,\n  useSolanaConnectionUrl,\n} from \"./useSolanaConnection\";\n\nexport function useAppIcons(publicKey: string) {\n  const connectionUrl = useSolanaConnectionUrl();\n  const xnftLoadable = useRecoilValueLoadable(\n    atoms.filteredPlugins({ publicKey, connectionUrl })\n  );\n  const xnftData =\n    xnftLoadable.state === \"hasValue\"\n      ? (xnftLoadable.contents as Array<any>)\n      : [];\n  return xnftData;\n}\n\nexport function usePlugins(publicKey: string): Array<Plugin> | null {\n  const connectionUrl = useSolanaConnectionUrl();\n  const xnftLoadable = useRecoilValueLoadable(\n    atoms.plugins({ publicKey, connectionUrl })\n  );\n\n  if (xnftLoadable.state === \"hasValue\") {\n    return xnftLoadable.contents.map((p) => getPlugin(p));\n  }\n  return null;\n}\n\nexport function useClosePlugin(): () => void {\n  const background = useRecoilValue(atoms.backgroundClient);\n  return () => {\n    background\n      .request({\n        method: UI_RPC_METHOD_NAVIGATION_POP,\n        params: [TAB_XNFT],\n      })\n      .catch(console.error);\n  };\n}\n\nexport function useOpenPlugin(): (xnftAddress: string) => void {\n  const background = useRecoilValue(atoms.backgroundClient);\n\n  return (xnftAddress) => {\n    const normalizedXnftAddress = xnftAddress.replace(/\\.+\\//g, \"\"); // simple normalize to prevent: \"goodxnft/../badxnft\"\n    const url = `xnft/${normalizedXnftAddress}`;\n    background\n      .request({\n        method: UI_RPC_METHOD_NAVIGATION_PUSH,\n        params: [url, TAB_XNFT],\n      })\n      .catch(console.error);\n  };\n}\n\nexport function usePluginUrl(address?: string) {\n  const [url, setUrl] = useState<string | null>(null);\n  const [cached] = useState<Plugin | undefined>(\n    PLUGIN_CACHE.get(address ?? \"\")\n  );\n  useEffect(() => {\n    (async () => {\n      if (address?.toString() === \"11111111111111111111111111111111\") {\n        setUrl(\"Simulator\");\n      } else if (cached) {\n        setUrl(cached.iframeRootUrl);\n      } else if (address) {\n        try {\n          const xnft = await fetchXnft(new PublicKey(address));\n          setUrl(xnft!.xnft.manifest.entrypoints.default.web);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    })();\n  }, [cached]);\n\n  return url;\n}\n\nexport function useFreshPlugin(address?: string): {\n  state: \"loading\" | \"done\" | \"error\";\n  result: Plugin | undefined;\n} {\n  const { provider } = useAnchorContext();\n  const connectionUrls = useConnectionUrls();\n  const activePublicKeys = useActivePublicKeys();\n  const [result, setResult] = useState<Plugin | undefined>(\n    PLUGIN_CACHE.get(address ?? \"\")\n  );\n  const [state, setState] = useState<\"loading\" | \"done\" | \"error\">(\"loading\");\n\n  //\n  // Host APIs to hook into the plugin.\n  //\n  const segue = useNavigationSegue();\n  const setTransactionRequest = useSetRecoilState(atoms.transactionRequest);\n  const backgroundClient = useBackgroundClient();\n  const connectionBackgroundClient = useConnectionBackgroundClient();\n  const openPlugin = useOpenPlugin();\n\n  useEffect(() => {\n    if (!address || result) {\n      return;\n    }\n    (async () => {\n      try {\n        const xnft = await fetchXnft(new PublicKey(address));\n        const plugin = new Plugin(\n          new PublicKey(address),\n          xnft!.xnftAccount.masterMetadata,\n          xnft!.xnft.xnft.manifest.entrypoints.default.web,\n          xnft!.metadata.image,\n          xnft!.xnft.xnft.manifest.splash ?? {},\n          xnft!.metadata.name,\n          activePublicKeys,\n          connectionUrls\n        );\n        plugin.setHostApi({\n          push: segue.push,\n          pop: segue.pop,\n          request: setTransactionRequest,\n          backgroundClient,\n          connectionBackgroundClient,\n          openPlugin,\n        });\n        PLUGIN_CACHE.set(address, plugin);\n        setResult(plugin);\n        setState(\"done\");\n      } catch (err) {\n        console.error(err);\n        setState(\"error\");\n      }\n    })();\n  }, [provider, address]);\n\n  return {\n    state,\n    result,\n  };\n}\n\nexport function getPlugin(p: any): Plugin {\n  let plug = PLUGIN_CACHE.get(p.install.account.xnft.toString());\n  if (!plug) {\n    plug = new Plugin(\n      p.install.account.xnft,\n      p.install.publicKey,\n      p.url,\n      p.iconUrl,\n      p.splashUrls ?? {},\n      p.title,\n      p.activeWallets,\n      p.connectionUrls\n    );\n    PLUGIN_CACHE.set(p.install.account.xnft.toString(), plug);\n  }\n  return plug;\n}\n\nexport function allPlugins(): Array<Plugin> {\n  return Array.from(PLUGIN_CACHE.values());\n}\n\nconst PLUGIN_CACHE = new Map<string, Plugin>();\n","// Note(peter): copied from extension\nimport type { RecentTransaction } from \"@coral-xyz/common\";\nimport { Blockchain } from \"@coral-xyz/common\";\nimport { useRecoilValue, useRecoilValueLoadable } from \"recoil\";\n\nimport * as atoms from \"../../atoms\";\nimport { metadataForRecentSolanaTransaction } from \"../../atoms/recent-transactions\";\nimport { useActiveWallet } from \"../wallet\";\n\nimport type { HeliusParsedTransaction } from \"./recentTransactionHelpers\";\nimport {\n  formatTimestampListView,\n  getTokenData,\n  getTransactionCaption,\n  getTransactionTitle,\n  groupTxnsByDate,\n  // isNFTTransaction,\n  // isUserTxnSender,\n  // parseSwapTransaction,\n} from \"./recentTransactionHelpers\";\nimport { useJupiterTokenMap } from \"./useJupiter\";\n\nexport function useRecentTransactions({\n  blockchain,\n  address,\n  contractAddresses,\n  transactions,\n}: {\n  blockchain: Blockchain;\n  address: string;\n  contractAddresses: string[];\n  transactions?: RecentTransaction[];\n}) {\n  const _recentSolTransactions = useRecoilValue(\n    atoms.recentSolanaTransactions({ address })\n  );\n\n  const _recentEthTransactions = useRecoilValue(\n    atoms.recentEthereumTransactions({ address, contractAddresses })\n  );\n\n  if (transactions) {\n    return transactions;\n  }\n\n  if (blockchain === Blockchain.SOLANA) {\n    return _recentSolTransactions;\n  } else if (blockchain === Blockchain.ETHEREUM) {\n    return _recentEthTransactions;\n  }\n\n  throw new Error(\"invalid blockchain\");\n}\n\nexport function useRecentTransactionData(transaction: HeliusParsedTransaction) {\n  const registry = useJupiterTokenMap();\n  const { contents, state } = useRecoilValueLoadable(\n    metadataForRecentSolanaTransaction({ transaction })\n  );\n  const activeWallet = useActiveWallet();\n  const tokenData = getTokenData(registry, transaction);\n  const metadata = (state === \"hasValue\" && contents) || undefined;\n\n  const transactionTitle = getTransactionTitle(\n    activeWallet,\n    transaction,\n    metadata\n  );\n\n  const transactionCaption = getTransactionCaption(\n    activeWallet,\n    transaction,\n    tokenData,\n    metadata\n  );\n\n  return {\n    title: transactionTitle,\n    caption: transactionCaption,\n    timestamp: formatTimestampListView(transaction.timestamp),\n    tokenData,\n    metadata,\n  };\n}\n\nexport function useRecentTransactionsGroupedByDate({\n  blockchain,\n  address,\n  contractAddresses,\n  transactions: _transactions,\n}) {\n  const transactions = useRecentTransactions({\n    blockchain: blockchain,\n    address: address,\n    contractAddresses: contractAddresses,\n    transactions: _transactions,\n  });\n\n  const sections = groupTxnsByDate(transactions).map((group) => ({\n    title: formatTimestampListView(group[0].timestamp),\n    data: group,\n  }));\n\n  return sections;\n}\n\nexport function useRecentSolanaTransactions({ address }: { address: string }) {\n  return useRecoilValue(atoms.recentSolanaTransactions({ address }));\n}\n\nexport function useRecentEthereumTransactions({\n  address,\n  contractAddresses,\n}: {\n  address: string;\n  contractAddresses?: Array<string>;\n}) {\n  return useRecoilValue(\n    atoms.recentEthereumTransactions({ address, contractAddresses })\n  );\n}\n","import type { Commitment } from \"@solana/web3.js\";\nimport { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../../atoms\";\n\nexport function useSolanaCommitment(): Commitment {\n  return useRecoilValue(atoms.solanaCommitment)!;\n}\n","import type { BackgroundClient, SolanaContext } from \"@coral-xyz/common\";\nimport type { Connection } from \"@solana/web3.js\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport type { Loadable } from \"recoil\";\nimport { useRecoilValue, useRecoilValueLoadable } from \"recoil\";\n\nimport * as atoms from \"../../atoms\";\nimport { useBackgroundClient } from \"../client\";\nimport { useActiveSolanaWallet } from \"../wallet\";\n\nimport { useSplTokenRegistry } from \"./useSplTokenRegistry\";\nimport { useSolanaCommitment } from \"./\";\n\nexport function useSolanaConnectionUrl(): string {\n  return useRecoilValue(atoms.solanaConnectionUrl)!;\n}\n\nexport function useAnchorContext(): any {\n  return useRecoilValue(atoms.anchorContext);\n}\n\nexport function useAnchorContextLoadable(): Loadable<any> {\n  return useRecoilValueLoadable(atoms.anchorContext);\n}\n\nexport function useSolanaCtx(): SolanaContext {\n  const { publicKey } = useActiveSolanaWallet();\n  const { tokenClient, provider } = useAnchorContext();\n  const registry = useSplTokenRegistry();\n  const commitment = useSolanaCommitment();\n  const backgroundClient = useBackgroundClient();\n  return {\n    walletPublicKey: new PublicKey(publicKey),\n    tokenClient,\n    registry,\n    commitment,\n    backgroundClient,\n    connection: provider.connection,\n  };\n}\n\nexport function useConnectionBackgroundClient(): BackgroundClient {\n  return useRecoilValue(atoms.connectionBackgroundClient);\n}\n\nexport type SolanaConnectionContext = {\n  connection: Connection;\n  connectionUrl: string;\n  setConnectionUrl: (url: string) => void;\n};\n","import { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../../atoms\";\n\nexport function useSolanaExplorer(): string {\n  return useRecoilValue(atoms.solanaExplorer)!;\n}\n","import { useState } from \"react\";\nimport {\n  confirmTransaction,\n  getLogger,\n  isCardinalWrappedToken,\n  isCreatorStandardToken,\n  isOpenCreatorProtocol,\n  isProgrammableNftToken,\n  SOL_NATIVE_MINT,\n  Solana,\n} from \"@coral-xyz/common\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport type { BigNumber } from \"ethers\";\n\nimport { useSolanaTokenMint } from \"./index\";\nimport { useSolanaCtx } from \"./useSolanaConnection\";\n\ntype Token = any; // TODO;\nexport type SolTransactionStep = \"confirm\" | \"sending\" | \"complete\" | \"error\";\n\nconst logger = getLogger(\"send-solana-transaction\");\n\nexport function useSolanaTransaction({\n  token,\n  destinationAddress,\n  amount,\n  onComplete,\n}: {\n  token: Token;\n  destinationAddress: string;\n  amount: BigNumber;\n  onComplete: (txId: string) => void;\n}): {\n  txSignature: string | null;\n  onConfirm: () => Promise<void>;\n  cardType: SolTransactionStep;\n  error: string;\n} {\n  const [txSignature, setTxSignature] = useState<string | null>(null);\n  const solanaCtx = useSolanaCtx();\n  const [error, setError] = useState(\n    \"Error 422. Transaction time out. Runtime error. Reticulating splines.\"\n  );\n  const [cardType, setCardType] = useState<SolTransactionStep>(\"confirm\");\n  const mintInfo = useSolanaTokenMint({\n    publicKey: solanaCtx.walletPublicKey.toString(),\n    tokenAddress: token.address,\n  });\n\n  const onConfirm = async () => {\n    setCardType(\"sending\");\n    //\n    // Send the tx.\n    //\n    let txSig;\n\n    try {\n      const mintId = new PublicKey(token.mint?.toString() as string);\n      if (token.mint === SOL_NATIVE_MINT.toString()) {\n        txSig = await Solana.transferSol(solanaCtx, {\n          source: solanaCtx.walletPublicKey,\n          destination: new PublicKey(destinationAddress),\n          amount: amount.toNumber(),\n        });\n      } else if (\n        await isProgrammableNftToken(\n          solanaCtx.connection,\n          token.mint?.toString() as string\n        )\n      ) {\n        txSig = await Solana.transferProgrammableNft(solanaCtx, {\n          destination: new PublicKey(destinationAddress),\n          mint: new PublicKey(token.mint!),\n          amount: amount.toNumber(),\n          decimals: token.decimals,\n          source: new PublicKey(token.address),\n        });\n      }\n      // Use an else here to avoid an extra request if we are transferring sol native mints.\n      else {\n        const ocpMintState = await isOpenCreatorProtocol(\n          solanaCtx.connection,\n          mintId,\n          mintInfo\n        );\n        if (ocpMintState !== null) {\n          txSig = await Solana.transferOpenCreatorProtocol(\n            solanaCtx,\n            {\n              destination: new PublicKey(destinationAddress),\n              amount: amount.toNumber(),\n              mint: new PublicKey(token.mint!),\n            },\n            ocpMintState\n          );\n        } else if (isCreatorStandardToken(mintId, mintInfo)) {\n          txSig = await Solana.transferCreatorStandardToken(solanaCtx, {\n            destination: new PublicKey(destinationAddress),\n            mint: new PublicKey(token.mint!),\n            amount: amount.toNumber(),\n            decimals: token.decimals,\n          });\n        } else if (\n          await isCardinalWrappedToken(solanaCtx.connection, mintId, mintInfo)\n        ) {\n          txSig = await Solana.transferCardinalManagedToken(solanaCtx, {\n            destination: new PublicKey(destinationAddress),\n            mint: new PublicKey(token.mint!),\n            amount: amount.toNumber(),\n            decimals: token.decimals,\n          });\n        } else {\n          txSig = await Solana.transferToken(solanaCtx, {\n            destination: new PublicKey(destinationAddress),\n            mint: new PublicKey(token.mint!),\n            amount: amount.toNumber(),\n            decimals: token.decimals,\n          });\n        }\n      }\n    } catch (err: any) {\n      logger.error(\"solana transaction failed\", err);\n      setError(err.toString());\n      setCardType(\"error\");\n      return;\n    }\n\n    setTxSignature(txSig);\n\n    //\n    // Confirm the tx.\n    //\n    try {\n      await confirmTransaction(\n        solanaCtx.connection,\n        txSig,\n        solanaCtx.commitment !== \"confirmed\" &&\n          solanaCtx.commitment !== \"finalized\"\n          ? \"confirmed\"\n          : solanaCtx.commitment\n      );\n      setCardType(\"complete\");\n      if (onComplete) onComplete(txSig);\n    } catch (err: any) {\n      logger.error(\"unable to confirm\", err);\n      setError(err.toString());\n      setCardType(\"error\");\n    }\n  };\n\n  return { txSignature, onConfirm, cardType, error };\n}\n","import type { TokenInfo } from \"@solana/spl-token-registry\";\nimport { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../../atoms\";\n\nexport function useSplTokenRegistry(): Map<string, TokenInfo> {\n  return useRecoilValue(atoms.splTokenRegistry)!;\n}\n\nexport function useSolanaTokenInfo(address: string): TokenInfo | undefined {\n  const registry = useSplTokenRegistry();\n  return registry.get(address);\n}\n","import { useRecoilState } from \"recoil\";\n\nimport * as atoms from \"../atoms\";\nimport type { TransactionRequest } from \"../atoms/transaction-request\";\n\nexport function useTransactionRequest(): [\n  TransactionRequest | undefined,\n  (tx: TransactionRequest | undefined) => void\n] {\n  return useRecoilState(atoms.transactionRequest);\n}\n","import type { Blockchain } from \"@coral-xyz/common\";\nimport {\n  UI_RPC_METHOD_KEYRING_STORE_LOCK,\n  UI_RPC_METHOD_KEYRING_STORE_READ_ALL_PUBKEYS,\n  UI_RPC_METHOD_USER_ACCOUNT_AUTH,\n  UI_RPC_METHOD_USER_ACCOUNT_READ,\n} from \"@coral-xyz/common\";\n\nimport { useBackgroundClient } from \"./client\";\n\nexport const useAuthentication = () => {\n  const background = useBackgroundClient();\n\n  /**\n   * Login the user.\n   */\n  const authenticate = async ({\n    blockchain,\n    publicKey,\n    message,\n    signature,\n  }: {\n    blockchain: Blockchain;\n    publicKey: string;\n    signature: string;\n    message: string;\n  }) => {\n    try {\n      return await background.request({\n        method: UI_RPC_METHOD_USER_ACCOUNT_AUTH,\n        params: [blockchain, publicKey, message, signature],\n      });\n    } catch (error) {\n      console.error(\"useAuthentication:authenticate::error\", error);\n      // Relock if authentication failed\n      await background.request({\n        method: UI_RPC_METHOD_KEYRING_STORE_LOCK,\n        params: [],\n      });\n    }\n  };\n\n  /**\n   * Query the server and see if the user has a valid JWT..\n   */\n  const checkAuthentication = async (\n    jwt?: string\n  ): Promise<{\n    id: string;\n    publicKeys: Array<{ blockchain: Blockchain; publicKey: string }>;\n  } | null> => {\n    try {\n      return await background.request({\n        method: UI_RPC_METHOD_USER_ACCOUNT_READ,\n        params: [jwt],\n      });\n    } catch (error: any) {\n      // Relock if authentication failed\n      if (error.toString().includes(\"user not authenticated\")) {\n        // 403\n        return null;\n      } else {\n        console.error(\"useAuthentication:checkAuthentication::error\", error);\n        await background.request({\n          method: UI_RPC_METHOD_KEYRING_STORE_LOCK,\n          params: [],\n        });\n        return null;\n      }\n    }\n  };\n\n  /**\n   * Return all the public keys in Backpack and some useful information\n   * (blockchain, hardware) for use in authentication flows.\n   */\n  const getSigners = async () => {\n    type NamedPublicKeys = Array<{ name: string; publicKey: string }>;\n    // TODO refactor the RPC call to return this data structure and delete\n    // this\n    const clientPublicKeys = (await background.request({\n      method: UI_RPC_METHOD_KEYRING_STORE_READ_ALL_PUBKEYS,\n      params: [],\n    })) as Record<\n      Blockchain,\n      {\n        hdPublicKeys: NamedPublicKeys;\n        importedPublicKeys: NamedPublicKeys;\n        ledgerPublicKeys: NamedPublicKeys;\n      }\n    >;\n\n    let signers: Array<{\n      publicKey: string;\n      blockchain: Blockchain;\n      hardware: boolean;\n    }> = [];\n    for (const [blockchain, data] of Object.entries(clientPublicKeys)) {\n      signers = signers.concat([\n        ...data.hdPublicKeys.map((n) => ({\n          ...n,\n          blockchain: blockchain as Blockchain,\n          hardware: false,\n        })),\n        ...data.importedPublicKeys.map((n) => ({\n          ...n,\n          blockchain: blockchain as Blockchain,\n          hardware: false,\n        })),\n        ...data.ledgerPublicKeys.map((n) => ({\n          ...n,\n          blockchain: blockchain as Blockchain,\n          hardware: true,\n        })),\n      ]);\n    }\n    return signers;\n  };\n\n  /**\n   * Find the most suitable signer for signing an authentication message. The\n   * most suitable signer is one that Backpack can sign with transparently\n   * that has a matching public key on the server, or fall back to hardware\n   * signers.\n   */\n  const getAuthSigner = async (serverPublicKeys: Array<String>) => {\n    // Intersection of local signers with public keys stored on the server\n    const signers = (await getSigners()).filter((k) =>\n      serverPublicKeys.includes(k.publicKey)\n    );\n\n    if (signers.length === 0) {\n      // This should never happen\n      console.error(\"useAuthentication:getAuthSigner::no signers\");\n      await background.request({\n        method: UI_RPC_METHOD_KEYRING_STORE_LOCK,\n        params: [],\n      });\n    }\n    // Try and find a transparent server (i.e. not hardware based) as the first\n    // choice\n    const transparentSigner = signers.find((s) => !s.hardware);\n    // If no transparent signer, just return the first (hardware) signer\n    return transparentSigner ? transparentSigner : signers[0];\n  };\n\n  return {\n    authenticate,\n    checkAuthentication,\n    getSigners,\n    getAuthSigner,\n  };\n};\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { Blockchain } from \"@coral-xyz/common\";\nimport { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../atoms\";\nimport type { TokenDataWithPrice } from \"../types\";\n\nexport function useEnabledBlockchains() {\n  return useRecoilValue(atoms.enabledBlockchains);\n}\n\nexport function useAvailableBlockchains() {\n  return useRecoilValue(atoms.availableBlockchains);\n}\n\nexport function useBlockchainExplorer(blockchain: Blockchain) {\n  switch (blockchain) {\n    case Blockchain.ETHEREUM:\n      return useRecoilValue(atoms.ethereumExplorer);\n    case Blockchain.SOLANA:\n      return useRecoilValue(atoms.solanaExplorer);\n    default:\n      throw new Error(`invalid blockchain ${blockchain}`);\n  }\n}\n\nexport function useBlockchainConnectionUrl(blockchain: Blockchain) {\n  switch (blockchain) {\n    case Blockchain.ETHEREUM:\n      return useRecoilValue(atoms.ethereumConnectionUrl);\n    case Blockchain.SOLANA:\n      return useRecoilValue(atoms.solanaConnectionUrl);\n    default:\n      throw new Error(`invalid blockchain ${blockchain}`);\n  }\n}\n\n// TODO(peter) consolidate between extension/mobile-app or just live on S3\nexport function getBlockchainLogo(blockchain: Blockchain): string {\n  switch (blockchain) {\n    case Blockchain.ETHEREUM:\n      return \"./ethereum.png\";\n    case Blockchain.SOLANA:\n      return \"https://pbs.twimg.com/profile_images/1626643141519642625/WLqoO9pu_400x400.jpg\";\n    default:\n      throw new Error(`invalid blockchain ${blockchain}`);\n  }\n}\n\nexport function useBlockchainTokens({\n  publicKey,\n  blockchain,\n}: {\n  publicKey: string;\n  blockchain: Blockchain;\n}) {\n  return useRecoilValue(\n    atoms.blockchainTokenAddresses({\n      publicKey,\n      blockchain,\n    })\n  );\n}\n\nexport function useBlockchainTokensSorted({\n  publicKey,\n  blockchain,\n}: {\n  publicKey: string;\n  blockchain: Blockchain;\n}) {\n  return useRecoilValue(\n    atoms.blockchainBalancesSorted({\n      publicKey,\n      blockchain,\n    })\n  );\n}\n\nexport function useBlockchainNativeTokens({\n  publicKey,\n  blockchain,\n}: {\n  publicKey: string;\n  blockchain: Blockchain;\n}) {\n  return useRecoilValue(\n    atoms.blockchainNativeBalances({ publicKey, blockchain })\n  );\n}\n\nexport function useBlockchainTokenAccount({\n  publicKey,\n  blockchain,\n  tokenAddress,\n}: {\n  publicKey: string;\n  blockchain: Blockchain;\n  tokenAddress: string;\n}): TokenDataWithPrice | null {\n  return useRecoilValue(\n    atoms.blockchainTokenData({ publicKey, blockchain, tokenAddress })\n  );\n}\n\nexport function useBlockchainActiveWallet(blockchain: Blockchain) {\n  switch (blockchain) {\n    case Blockchain.ETHEREUM:\n      return useRecoilValue(atoms.activeEthereumWallet)!;\n    case Blockchain.SOLANA:\n      return useRecoilValue(atoms.activeSolanaWallet)!;\n    default:\n      throw new Error(`invalid blockchain ${blockchain}`);\n  }\n}\n","import { useEffect, useState } from \"react\";\n\nexport function useBreakpoints(): { isXs: boolean; active: string } {\n  const breakpoints = {\n    isXs: useMediaQuery(\"(max-width: 650px)\") ?? window.innerWidth < 650,\n    //    isMd: useMediaQuery(\"(min-width: 769px) and (max-width: 1024px)\"),\n    //    isLg: useMediaQuery(\"(min-width: 1025px)\"),\n    active: \"xs\",\n  };\n  if (breakpoints.isXs) breakpoints.active = \"xs\";\n  //  if (breakpoints.isSm) breakpoints.active = \"sm\";\n  //  if (breakpoints.isMd) breakpoints.active = \"md\";\n  //  if (breakpoints.isLg) breakpoints.active = \"lg\";\n  return breakpoints;\n}\n\nfunction useMediaQuery(query: string) {\n  const [matches, setMatches] = useState<boolean | null>(null);\n  useEffect(\n    () => {\n      const mediaQuery = window.matchMedia(query);\n      setMatches(mediaQuery.matches);\n      const handler = (event: any) => setMatches(event.matches);\n      mediaQuery.addEventListener(\"change\", handler);\n      return () => mediaQuery.removeEventListener(\"change\", handler);\n    },\n    [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  return matches;\n}\n","import { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../atoms\";\n\nexport const useFeatureGates = () => {\n  return useRecoilValue(atoms.featureGates);\n};\n","import type { CollectionChatData, SubscriptionType } from \"@coral-xyz/common\";\nimport { useRecoilValue } from \"recoil\";\n\nimport {\n  friendship,\n  friendships,\n  groupCollections,\n  messageUnreadCount,\n  requestCount,\n  roomChats,\n} from \"../\";\n\nexport function useFriendship({ userId }: { userId: string }): any {\n  return useRecoilValue(friendship({ userId }));\n}\n\nexport function useFriendships({ uuid }: { uuid: string }): any {\n  return useRecoilValue(friendships({ uuid }));\n}\n\nexport function useRequestsCount({ uuid }: { uuid: string }): any {\n  return useRecoilValue(requestCount({ uuid }));\n}\n\nexport function useGroupCollections({\n  uuid,\n}: {\n  uuid: string;\n}): CollectionChatData[] {\n  return useRecoilValue(groupCollections({ uuid }));\n}\n\nexport function useMessageUnreadCount({ uuid }: { uuid: string }): number {\n  return useRecoilValue(messageUnreadCount({ uuid }));\n}\n\nexport function useChats({\n  uuid,\n  room,\n  type,\n}: {\n  uuid: string;\n  room: string;\n  type: SubscriptionType;\n}): any {\n  return useRecoilValue(roomChats({ uuid, room, type }));\n}\n","import { useEffect, useState } from \"react\";\nimport {\n  getHashedName,\n  getNameAccountKey,\n  NameRegistryState,\n} from \"@bonfida/spl-name-service\";\nimport { Blockchain } from \"@coral-xyz/common\";\nimport type { Connection } from \"@solana/web3.js\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport { ethers } from \"ethers\";\n\nexport function useIsValidAddress(\n  blockchain: Blockchain,\n  address: string,\n  solanaConnection?: Connection,\n  ethereumProvider?: ethers.providers.Provider\n) {\n  const [addressError, setAddressError] = useState<boolean>(false);\n  const [isFreshAccount, setIsFreshAccount] = useState<boolean>(false); // Not used for now.\n  const [accountValidated, setAccountValidated] = useState<boolean>(false);\n  const [normalizedAddress, setNormalizedAddress] = useState<string>(address);\n\n  // This effect validates the account address given.\n  useEffect(() => {\n    if (accountValidated) {\n      setAccountValidated(false);\n    }\n    if (address === \"\") {\n      setAccountValidated(false);\n      setAddressError(false);\n      return;\n    }\n    (async () => {\n      if (blockchain === Blockchain.SOLANA) {\n        let pubkey;\n\n        if (!solanaConnection) {\n          return;\n        }\n\n        // SNS Domain\n        if (address.endsWith(\".sol\")) {\n          try {\n            const hashedName = await getHashedName(address.replace(\".sol\", \"\"));\n            const nameAccountKey = await getNameAccountKey(\n              hashedName,\n              undefined,\n              new PublicKey(\"58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx\") // SOL TLD Authority\n            );\n\n            const owner = await NameRegistryState.retrieve(\n              solanaConnection,\n              nameAccountKey\n            );\n\n            pubkey = owner.registry.owner;\n          } catch (e) {\n            setAddressError(true);\n            return;\n          }\n        }\n\n        // If it's not .SOL throw an error\n        if (\n          !pubkey &&\n          address.split(\".\").length === 2 &&\n          !address.endsWith(\".sol\")\n        ) {\n          setAddressError(true);\n          return;\n        }\n\n        if (!pubkey) {\n          // Solana address validation\n          try {\n            pubkey = new PublicKey(address);\n          } catch (err) {\n            setAddressError(true);\n            // Not valid address so don't bother validating it.\n            return;\n          }\n        }\n\n        const account = await solanaConnection?.getAccountInfo(pubkey);\n\n        // Null data means the account has no lamports. This is valid.\n        if (!account) {\n          setIsFreshAccount(true);\n          setAccountValidated(true);\n          setNormalizedAddress(pubkey.toString());\n          return;\n        }\n\n        // Only allow system program accounts to be given. ATAs only!\n        if (!account.owner.equals(SystemProgram.programId)) {\n          setAddressError(true);\n          return;\n        }\n\n        // The account data has been successfully validated.\n        setAddressError(false);\n        setAccountValidated(true);\n        setNormalizedAddress(pubkey.toString());\n      } else if (blockchain === Blockchain.ETHEREUM) {\n        // Ethereum address validation\n        let checksumAddress;\n\n        if (!ethereumProvider) {\n          return;\n        }\n\n        if (address.includes(\".eth\")) {\n          try {\n            checksumAddress = await ethereumProvider?.resolveName(address);\n          } catch (e) {\n            setAddressError(true);\n            return;\n          }\n        }\n\n        if (!checksumAddress) {\n          try {\n            checksumAddress = ethers.utils.getAddress(address);\n          } catch (e) {\n            setAddressError(true);\n            return;\n          }\n        }\n\n        setAddressError(false);\n        setAccountValidated(true);\n        setNormalizedAddress(checksumAddress);\n      }\n    })();\n  }, [address]);\n\n  return {\n    isValidAddress: accountValidated,\n    isFreshAddress: isFreshAccount,\n    isErrorAddress: addressError,\n    normalizedAddress: normalizedAddress,\n  };\n}\n","import { useEffect, useState } from \"react\";\nimport type { RecoilValue } from \"recoil\";\nimport { useRecoilValueLoadable } from \"recoil\";\n\n/**\n * This is a hook to maintain state while recoil is updating.\n * See https://github.com/facebookexperimental/Recoil/issues/290\n * It may be possible to replace this with React 18 useTransition.\n */\nexport function useLoader<T>(\n  loadable: RecoilValue<T>,\n  defaultValue: T,\n  dependencies: any[] = []\n): [T, \"loading\" | \"hasValue\" | \"hasError\", boolean] {\n  const [value, setValue] = useState<T>(defaultValue);\n  const recoilValue = useRecoilValueLoadable(loadable);\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\n\n  useEffect(() => {\n    setValue(defaultValue);\n    setIsInitialLoad(true);\n  }, dependencies);\n\n  useEffect(() => {\n    if (recoilValue.state === \"hasValue\" && recoilValue.contents !== value) {\n      setValue(recoilValue.contents);\n      setIsInitialLoad(false);\n    }\n  }, [recoilValue.contents, recoilValue.state, value]);\n\n  return [value, recoilValue.state, isInitialLoad];\n}\n","import { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../atoms\";\n\nexport function useEthereumPrice() {\n  return useRecoilValue(atoms.ethereumPrice);\n}\n","import { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../atoms\";\n\nexport const usePrimaryWallets = () => {\n  return useRecoilValue(atoms.primaryWallets);\n};\n","import { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../atoms\";\n\nexport const useRecentNotifications = ({\n  limit,\n  offset,\n  uuid,\n}: {\n  limit: number;\n  offset: number;\n  uuid: string;\n}) => {\n  return useRecoilValue(atoms.recentNotifications({ limit, offset, uuid }));\n};\n","import type {\n  Blockchain,\n  LedgerKeyringInit,\n  MnemonicKeyringInit,\n  PrivateKeyKeyringInit,\n} from \"@coral-xyz/common\";\nimport { UI_RPC_METHOD_SIGN_MESSAGE_FOR_PUBLIC_KEY } from \"@coral-xyz/common\";\nimport { ethers } from \"ethers\";\n\nimport { useBackgroundClient } from \"./\";\n\nexport const useRpcRequests = () => {\n  const background = useBackgroundClient();\n\n  const signMessageForWallet = async (\n    blockchain: Blockchain,\n    publicKey: string,\n    message: string,\n    keyringInit?:\n      | LedgerKeyringInit\n      | MnemonicKeyringInit\n      | PrivateKeyKeyringInit\n  ) => {\n    return await background.request({\n      method: UI_RPC_METHOD_SIGN_MESSAGE_FOR_PUBLIC_KEY,\n      params: [\n        blockchain,\n        publicKey,\n        ethers.utils.base58.encode(Buffer.from(message, \"utf-8\")),\n        keyringInit,\n      ],\n    });\n  };\n\n  return {\n    signMessageForWallet,\n  };\n};\n","import type { Blockchain } from \"@coral-xyz/common\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { tokenMetadata } from \"../atoms/tokenMetadata\";\n\nexport const useTokenMetadata = ({\n  mintAddress,\n  blockchain,\n}: {\n  mintAddress: string;\n  blockchain: Blockchain;\n}) => {\n  return useRecoilValue(tokenMetadata({ mintAddress, blockchain }));\n};\n","import { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../atoms\";\n\nexport function useTotalBalance(): any {\n  return useRecoilValue(atoms.totalBalance);\n}\n","import type { Dispatch, SetStateAction } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport type { SolanaFeeConfig } from \"@coral-xyz/common\";\nimport {\n  Blockchain,\n  deserializeLegacyTransaction,\n  deserializeTransaction,\n  SOL_NATIVE_MINT,\n  UI_RPC_METHOD_SOLANA_SIMULATE,\n} from \"@coral-xyz/common\";\nimport type { TransactionRequest } from \"@ethersproject/abstract-provider\";\nimport type { UnsignedTransaction } from \"@ethersproject/transactions\";\nimport { AccountLayout, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type { AddressLookupTableAccount, Message } from \"@solana/web3.js\";\nimport {\n  ComputeBudgetInstruction,\n  ComputeBudgetProgram,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport { BigNumber, ethers } from \"ethers\";\n\nimport {\n  useBackgroundClient,\n  useBlockchainNativeTokens,\n  useEthereumCtx,\n  useEthereumPrice,\n  useSolanaCtx,\n  useSplTokenRegistry,\n} from \"./\";\n\nconst { base58: bs58 } = ethers.utils;\nconst DEFAULT_GAS_LIMIT = BigNumber.from(\"150000\");\n\nexport type TransactionData = {\n  loading: boolean;\n  transaction: string;\n  solanaFeeConfig?: { config: SolanaFeeConfig; disabled: boolean };\n  setSolanaFeeConfig?: Dispatch<\n    SetStateAction<{ config: SolanaFeeConfig; disabled: boolean } | null>\n  >;\n  transactionOverrides?: TransactionOverrides;\n  setTransactionOverrides?: (overrides: object) => void;\n  from: string;\n  simulationError: boolean;\n  balanceChanges: {\n    [symbol: string]: { nativeChange: BigNumber; decimals: Number };\n  } | null;\n  network: string;\n  networkFee: string;\n  networkFeeUsd?: string;\n};\n\ntype TransactionOverrides = {\n  type: number;\n  nonce: number | undefined;\n  gasLimit: BigNumber;\n  maxFeePerGas: BigNumber | undefined;\n  maxPriorityFeePerGas: BigNumber | undefined;\n};\n\nexport function useTransactionData(\n  blockchain: Blockchain,\n  transaction: any\n): TransactionData {\n  // FIXME: remove lint blocker\n  return blockchain === Blockchain.ETHEREUM\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useEthereumTxData(transaction)\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useSolanaTxData(transaction);\n}\n\nexport function useMultipleTransactionsData(\n  blockchain: Blockchain,\n  transactions: string[]\n): TransactionData[] {\n  // FIXME: remove lint blocker\n  return blockchain === Blockchain.ETHEREUM\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      transactions.map((tx) => useEthereumTxData(tx))\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      transactions.map((tx) => useSolanaTxData(tx));\n}\n\n//\n// Transaction data for Ethereum\n//\nexport function useEthereumTxData(serializedTx: any): TransactionData {\n  const ethereumCtx = useEthereumCtx();\n  const ethPrice = useEthereumPrice();\n  const [loading, setLoading] = useState(true);\n  const [simulationError, setSimulationError] = useState(false);\n  const [estimatedGas, setEstimatedGas] = useState(BigNumber.from(0));\n  const [estimatedTxFee, setEstimatedTxFee] = useState(BigNumber.from(0));\n  const [transaction, setTransaction] = useState<TransactionRequest | null>(\n    null\n  );\n  const [transactionOverrides, setTransactionOverrides] =\n    useState<TransactionOverrides>({\n      type: 2,\n      nonce: undefined,\n      gasLimit: estimatedGas,\n      maxFeePerGas: ethereumCtx.feeData.maxFeePerGas || undefined,\n      maxPriorityFeePerGas:\n        ethereumCtx.feeData.maxPriorityFeePerGas || undefined,\n    });\n\n  //\n  // Parse the serialized transaction and remove defaults ethers adds, then\n  // repopulate with our own data.\n  //\n  useEffect(() => {\n    (async () => {\n      const parsed = ethers.utils.parseTransaction(bs58.decode(serializedTx));\n\n      if (!parsed.chainId || parsed.chainId === 0) {\n        // chainId not passed in serialized transaction, use provider\n        parsed.chainId = parseInt(ethereumCtx.chainId);\n      }\n\n      // Use a void signer to populate transaction with data we need, e.g. from\n      // field and nonce\n      const voidSigner = new ethers.VoidSigner(\n        ethereumCtx.walletPublicKey,\n        ethereumCtx.provider\n      );\n\n      // Set any transaction override values that were passed in the serialized\n      // transaction\n      const overridesToUpdate: Partial<TransactionOverrides> = {};\n      if (parsed.nonce != 0) {\n        overridesToUpdate.nonce = parsed.nonce;\n      } else {\n        overridesToUpdate.nonce = await voidSigner.getTransactionCount();\n      }\n      if (!parsed.gasLimit.isZero()) {\n        overridesToUpdate.gasLimit = parsed.gasLimit;\n      }\n      if (parsed.maxFeePerGas && !parsed.maxFeePerGas.isZero()) {\n        overridesToUpdate.maxFeePerGas = parsed.maxFeePerGas;\n      }\n      if (\n        parsed.maxPriorityFeePerGas &&\n        !parsed.maxPriorityFeePerGas.isZero()\n      ) {\n        overridesToUpdate.maxPriorityFeePerGas = parsed.maxPriorityFeePerGas;\n      }\n\n      const newTransactionOverrides = {\n        ...transactionOverrides,\n        ...overridesToUpdate,\n      };\n\n      setTransactionOverrides(newTransactionOverrides);\n\n      // Populate any missing fields in resulting transaction, resolve ENS, etc\n      const populatedTx = await voidSigner.populateTransaction({\n        // Pick only the fields we want from the parsed transaction\n        to: parsed.to,\n        from: parsed.from,\n        data: parsed.data,\n        value: parsed.value,\n        // Apply the overrides\n        ...newTransactionOverrides,\n      });\n\n      setTransaction(populatedTx);\n    })();\n  }, [serializedTx]);\n\n  //\n  // Estimate gas for the transaction\n  //\n  useEffect(() => {\n    (async () => {\n      if (transaction) {\n        setLoading(true);\n        // Estimate gas for the transaction\n        let estimatedGas: BigNumber;\n        try {\n          estimatedGas = BigNumber.from(\n            await ethereumCtx.provider.estimateGas(\n              transaction as TransactionRequest\n            )\n          );\n        } catch (error) {\n          // Fee estimate failed, transaction is unlikely to succeed\n          console.error(\"could not estimate gas\", error);\n          // Use a fallback value for estimate gas, but this is not likely to be\n          // accurate given the gas estimate call failed. 150k is a good value\n          // for all ERC20 methods.\n          estimatedGas = DEFAULT_GAS_LIMIT;\n          setSimulationError(true);\n        }\n        setEstimatedGas(estimatedGas);\n        // populateTransaction should have added a nonce, add it to overrides\n        setTransactionOverrides({\n          ...transactionOverrides,\n          gasLimit: estimatedGas,\n        });\n        setLoading(false);\n      }\n    })();\n  }, [transaction]);\n\n  //\n  // Updated the estimated transaction fee on changes to the gas estimate.\n  //\n  useEffect(() => {\n    (async () => {\n      if (estimatedGas) {\n        setEstimatedTxFee(\n          estimatedGas\n            .mul(transactionOverrides.maxFeePerGas!)\n            .add(estimatedGas.mul(transactionOverrides.maxPriorityFeePerGas!))\n        );\n      }\n    })();\n  }, [\n    estimatedGas,\n    transactionOverrides.maxFeePerGas,\n    transactionOverrides.maxPriorityFeePerGas,\n  ]);\n\n  const networkFeeUsd = (\n    Number(ethers.utils.formatEther(estimatedTxFee)) * ethPrice.usd\n  )?.toFixed(2);\n\n  return {\n    loading,\n    transaction: transaction\n      ? bs58.encode(\n          ethers.utils.serializeTransaction({\n            ...transaction,\n            ...transactionOverrides,\n          } as UnsignedTransaction)\n        )\n      : serializedTx,\n    transactionOverrides,\n    setTransactionOverrides,\n    from: ethereumCtx.walletPublicKey,\n    balanceChanges: null,\n    simulationError,\n    network: \"Ethereum\",\n    networkFee: ethers.utils.formatUnits(estimatedTxFee, 18),\n    networkFeeUsd: networkFeeUsd,\n  };\n}\n\n//\n// Transaction data for Solana.\n//\nexport function useSolanaTxData(serializedTx: any): TransactionData {\n  const background = useBackgroundClient();\n  const tokenRegistry = useSplTokenRegistry();\n  const { connection, walletPublicKey } = useSolanaCtx();\n  const tokenAccountsSorted = useBlockchainNativeTokens({\n    publicKey: walletPublicKey.toString(),\n    blockchain: Blockchain.SOLANA,\n  });\n\n  const [solanaFeeConfig, setSolanaFeeConfig] = useState<{\n    config: SolanaFeeConfig;\n    disabled: boolean;\n  }>({\n    config: {\n      priorityFee: BigInt(0),\n      computeUnits: 100000,\n    },\n    disabled: false,\n  });\n  const [loading, setLoading] = useState(true);\n  const [simulationError, setSimulationError] = useState(false);\n  const [estimatedTxFee, setEstimatedTxFee] = useState(5000);\n  const [balanceChanges, setBalanceChanges] = useState({});\n  const [simulationAccounts, setSimulationAccounts] = useState<Array<string>>(\n    []\n  );\n\n  useEffect(() => {\n    const estimateTxFee = async () => {\n      const transaction = deserializeTransaction(serializedTx);\n      try {\n        // TODO: Remove type inference after the API for `getFeeForMessage` changes\n        const response = await connection.getFeeForMessage(\n          transaction.message as Message\n        );\n        setEstimatedTxFee(response.value ?? 0);\n      } catch (e) {\n        // ignore\n      }\n    };\n\n    const refreshSolanaConfig = async () => {\n      const transaction = deserializeTransaction(serializedTx);\n\n      if (transaction.version === \"legacy\") {\n        const transaction = deserializeLegacyTransaction(serializedTx);\n        setSimulationAccounts(\n          transaction\n            .compileMessage()\n            .nonProgramIds()\n            .map((k) => k.toString())\n        );\n        transaction.instructions.forEach((ix) => {\n          if (ix.programId.equals(ComputeBudgetProgram.programId)) {\n            try {\n              const decodedUnits =\n                ComputeBudgetInstruction.decodeSetComputeUnitLimit(ix);\n              setSolanaFeeConfig((x) => ({\n                ...x,\n                config: {\n                  ...x.config,\n                  computeUnits: decodedUnits.units,\n                },\n                disabled: true,\n              }));\n            } catch (e) {\n              console.warn(`ix is not of type compute unit`);\n            }\n            try {\n              const decodedParams =\n                ComputeBudgetInstruction.decodeSetComputeUnitPrice(ix);\n              setSolanaFeeConfig((x) => ({\n                ...x,\n                config: {\n                  ...x.config,\n                  priorityFee: BigInt(decodedParams.microLamports),\n                },\n                disabled: true,\n              }));\n            } catch (e) {\n              console.warn(`ix is not of type priority fee`);\n            }\n          }\n        });\n      } else if (transaction.version === 0) {\n        // Resolve accounts for versioned transactions\n        const addressLookupTableAccounts: Array<AddressLookupTableAccount> = [];\n        const { addressTableLookups } = transaction.message;\n        if (addressTableLookups.length > 0) {\n          for (const addressTableLookup of addressTableLookups) {\n            const result = await connection.getAddressLookupTable(\n              addressTableLookup.accountKey\n            );\n            if (result.value) {\n              addressLookupTableAccounts.push(result.value);\n            }\n          }\n        }\n        const accountKeys = transaction.message.getAccountKeys({\n          addressLookupTableAccounts,\n        });\n        setSimulationAccounts([\n          ...new Set(\n            accountKeys.staticAccountKeys\n              .map((k) => k.toString())\n              .concat(\n                accountKeys.accountKeysFromLookups\n                  ? // Only writable accounts will contribute to balance changes\n                    accountKeys.accountKeysFromLookups.writable.map((k) =>\n                      k.toString()\n                    )\n                  : []\n              )\n          ),\n        ]);\n      }\n    };\n    estimateTxFee();\n    refreshSolanaConfig();\n  }, [serializedTx]);\n\n  useEffect(() => {\n    const estimateBalanceChanges = async () => {\n      if (walletPublicKey && serializedTx && simulationAccounts.length > 0) {\n        const result = await background.request({\n          method: UI_RPC_METHOD_SOLANA_SIMULATE,\n          params: [serializedTx, simulationAccounts],\n        });\n        if (result.value.err) {\n          console.warn(\"failed to simulate\", result.value.err);\n          // TODO handle InsufficientFundsForRent\n          setSimulationError(true);\n        } else {\n          const balanceChanges = result.value.accounts.reduce(\n            (\n              result: { symbol: { nativeChange: BigNumber; decimals: number } },\n              account: any,\n              index: number\n            ) => {\n              // Token changes\n              const isToken = account.owner === TOKEN_PROGRAM_ID.toString();\n              const isNativeSol = account.owner === SOL_NATIVE_MINT;\n\n              if (isToken || isNativeSol) {\n                try {\n                  let accountNativeBalance: BigNumber;\n                  let tokenMint: PublicKey;\n\n                  // Parse token accounts for change in balances\n                  if (isToken) {\n                    try {\n                      const tokenAccount = AccountLayout.decode(\n                        Buffer.from(account.data[0], account.data[1])\n                      );\n                      if (\n                        !new PublicKey(tokenAccount.owner).equals(\n                          new PublicKey(walletPublicKey)\n                        )\n                      ) {\n                        // Return the reducer state umodified if token account is not owned\n                        return result;\n                      }\n                      accountNativeBalance = BigNumber.from(\n                        tokenAccount.amount.toString()\n                      );\n                      // Standard token mint\n                      tokenMint = new PublicKey(tokenAccount.mint);\n                    } catch (error) {\n                      // Decoding of token account failed, not a token account\n                      return result;\n                    }\n                    // Parse changes in native SOL balances\n                  } else {\n                    // Not interested in SOL balance changes for accounts that\n                    // are not the current address\n                    if (\n                      simulationAccounts[index] !== walletPublicKey.toString()\n                    ) {\n                      return result;\n                    }\n                    accountNativeBalance = BigNumber.from(\n                      account.lamports.toString()\n                    );\n                    // Faux mint for native SOL\n                    tokenMint = new PublicKey(SOL_NATIVE_MINT);\n                  }\n\n                  // Find the existing token account\n                  const existingTokenAccount = tokenAccountsSorted.find((t) =>\n                    new PublicKey(t.mint!).equals(tokenMint)\n                  );\n\n                  // Find the token in the registry to get the symbol for return\n                  const token = tokenRegistry.get(tokenMint.toString());\n                  if (!token) {\n                    return result;\n                  }\n\n                  const existingNativeBalance = existingTokenAccount\n                    ? existingTokenAccount.nativeBalance\n                    : ethers.constants.Zero;\n\n                  // Calculate the native balance change\n                  const nativeChange = accountNativeBalance.sub(\n                    existingNativeBalance\n                  );\n\n                  // Filter out zero change\n                  if (!nativeChange.eq(ethers.constants.Zero)) {\n                    result[token.symbol] = {\n                      nativeChange,\n                      decimals: token.decimals,\n                    };\n                  }\n                } catch (err) {\n                  // ignore, probably not a token account or some other\n                  // failure, we don't want to fail displaying the popup\n                  console.warn(\"failed to get balance changes\", err);\n                  return result;\n                }\n              }\n              return result;\n            },\n            {}\n          );\n          setBalanceChanges(balanceChanges);\n        }\n        setLoading(false);\n      }\n    };\n    estimateBalanceChanges();\n  }, [serializedTx, simulationAccounts]);\n\n  return {\n    loading,\n    transaction: serializedTx,\n    from: walletPublicKey.toString(),\n    simulationError,\n    balanceChanges,\n    network: \"Eclipse\",\n    networkFee: ethers.utils.formatUnits(estimatedTxFee, 9),\n    solanaFeeConfig,\n    setSolanaFeeConfig,\n  };\n}\n","import { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../atoms\";\n\nexport const useUnreadCount = () => {\n  return useRecoilValue(atoms.unreadCount);\n};\n","import { fetchFriendship } from \"@coral-xyz/common\";\nimport { useRecoilCallback } from \"recoil\";\n\nimport { friendship } from \"../atoms\";\n\nexport const useUpdateFriendships = () =>\n  useRecoilCallback(\n    ({ set, snapshot }: any) =>\n      async ({\n        friendshipValue,\n        userId,\n      }: {\n        friendshipValue: any;\n        userId: string;\n      }) => {\n        const currentFriendship = snapshot.getLoadable(friendship({ userId }));\n        let existingFriendship = currentFriendship.valueMaybe();\n        if (!existingFriendship || !existingFriendship.id) {\n          const json = await fetchFriendship({ userId });\n          existingFriendship = {\n            id: json.friendshipId,\n            areFriends: json.areFriends,\n            blocked: json.blocked,\n            requested: json.requested,\n            spam: json.spam,\n            remoteRequested: json.remoteRequested,\n          };\n        }\n        set(friendship({ userId }), {\n          ...(existingFriendship || {}),\n          ...friendshipValue,\n        });\n      }\n  );\n","import type { UserMetadata } from \"@coral-xyz/common\";\nimport { useRecoilCallback } from \"recoil\";\n\nimport { remoteUsersMetadataMap } from \"../atoms\";\n\nexport const useUpdateUsers = () =>\n  useRecoilCallback(\n    ({ set, snapshot }: any) =>\n      async ({\n        uuid,\n        users,\n      }: {\n        uuid: string;\n        users: { [key: string]: UserMetadata };\n      }) => {\n        const currentChats = snapshot.getLoadable(\n          remoteUsersMetadataMap({ uuid })\n        );\n        const updatedData = {\n          ...currentChats.valueMaybe(),\n          ...users,\n        };\n        set(remoteUsersMetadataMap({ uuid }), updatedData);\n      }\n  );\n","import { useRecoilValue } from \"recoil\";\n\nimport { remoteUsersMetadataSelector } from \"../atoms\";\n\nexport function useUserMetadataMap({\n  remoteUserIds,\n  uuid,\n}: {\n  remoteUserIds: string[];\n  uuid: string;\n}) {\n  return useRecoilValue(remoteUsersMetadataSelector({ remoteUserIds, uuid }));\n}\n","import { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../atoms\";\n\nexport const useXnftPreferences = () => {\n  return useRecoilValue(atoms.xnftPreferences);\n};\n\nexport function useXnftPreference(xnftId?: string) {\n  if (!xnftId) {\n    return null;\n  }\n  return useRecoilValue(atoms.xnftPreference(xnftId));\n}\n","import type { Blockchain } from \"@coral-xyz/common\";\nimport { useRecoilValue } from \"recoil\";\n\nimport * as atoms from \"../atoms\";\nimport type { WalletPublicKeys } from \"../types\";\n\nexport function useActiveEthereumWallet(): {\n  publicKey: string;\n  name: string;\n} {\n  return useRecoilValue(atoms.activeEthereumWallet)!;\n}\n\nexport function useActiveSolanaWallet(): {\n  publicKey: string;\n  name: string;\n} {\n  return useRecoilValue(atoms.activeSolanaWallet)!;\n}\n\nexport function useActiveWallet(): {\n  publicKey: string;\n  name: string;\n  blockchain: Blockchain;\n} {\n  return useRecoilValue(atoms.activeWallet);\n}\n\nexport function useActiveWallets(): Array<{\n  publicKey: string;\n  name: string;\n  blockchain: Blockchain;\n}> {\n  return useRecoilValue(atoms.activeWalletsWithData!);\n}\n\nexport function useActivePublicKeys() {\n  return useRecoilValue(atoms.activePublicKeys)!;\n}\n\nexport function useWalletPublicKeys(): WalletPublicKeys {\n  return useRecoilValue(atoms.walletPublicKeys);\n}\n\nexport function useWalletName(address: string): string {\n  const wallets = useWalletPublicKeys();\n  for (const keyring of Object.values(wallets)) {\n    for (const namedPublicKeys of Object.values(keyring)) {\n      for (const namedPublicKey of namedPublicKeys) {\n        if (namedPublicKey.publicKey === address) {\n          return namedPublicKey.name;\n        }\n      }\n    }\n  }\n  return \"\";\n}\n\nexport function useWalletBlockchain(address: string): string {\n  const wallets = useWalletPublicKeys();\n  for (const [blockchain, keyring] of Object.entries(wallets)) {\n    for (const namedPublicKeys of Object.values(keyring)) {\n      for (const namedPublicKey of namedPublicKeys) {\n        if (namedPublicKey.publicKey === address) {\n          return blockchain;\n        }\n      }\n    }\n  }\n  throw new Error(\"key not found\");\n}\n\nexport function useAllWalletsPerBlockchain(blockchain: Blockchain): Array<{\n  name: string;\n  type: string;\n  publicKey: string;\n  blockchain: Blockchain;\n}> {\n  return useRecoilValue(atoms.allWalletsPerBlockchain(blockchain));\n}\n\nexport function useAllWallets(): Array<{\n  name: string;\n  type: string;\n  publicKey: string;\n  blockchain: Blockchain;\n  isCold?: boolean;\n}> {\n  return useRecoilValue(atoms.allWallets);\n}\n\nexport function useAllWalletsDisplayed(): Array<{\n  name: string;\n  type: string;\n  publicKey: string;\n  blockchain: Blockchain;\n  isCold?: boolean;\n}> {\n  return useRecoilValue(atoms.allWalletsDisplayed);\n}\n\nexport function useDehydratedWallets(): Array<{\n  blockchain: Blockchain;\n  publicKey: string;\n}> {\n  return useRecoilValue(atoms.dehydratedWallets);\n}\n","export * from \"./atoms\";\nexport * from \"./context\";\nexport * from \"./hooks\";\nexport * from \"./types\";\n","import {\n  makeUrl,\n  TAB_APPS,\n  TAB_BALANCES,\n  TAB_MESSAGES,\n  TAB_NFTS,\n  TAB_NOTIFICATIONS,\n  TAB_RECENT_ACTIVITY,\n  TAB_SWAP,\n} from \"@coral-xyz/common\";\nimport type { BigNumber } from \"ethers\";\nimport type { RecoilValueReadOnly } from \"recoil\";\n\n//\n// Client side public keys\n//\n\nexport type NamedPublicKey = {\n  name: string;\n  publicKey: string;\n};\n\nexport type PublicKeyMetadata = NamedPublicKey & {\n  isCold: boolean;\n};\n\nexport type WalletPublicKeys = {\n  [key: string]: {\n    hdPublicKeys: Array<PublicKeyMetadata>;\n    importedPublicKeys: Array<PublicKeyMetadata>;\n    ledgerPublicKeys: Array<PublicKeyMetadata>;\n  };\n};\n\n//\n// Tokens\n//\n\nexport interface TokenData {\n  name: string;\n  decimals: number;\n  ticker: string;\n  logo: string;\n  address: string;\n  // Mint is Solana only so is optional\n  mint?: string;\n}\n\nexport interface TokenDataWithBalance extends TokenData {\n  nativeBalance: BigNumber;\n  displayBalance: string;\n}\n\nexport interface TokenDataWithPrice extends TokenDataWithBalance {\n  usdBalance: number;\n  recentPercentChange: number | undefined;\n  recentUsdBalanceChange: number;\n  priceData: any;\n}\n\nexport type TokenDisplay = Pick<\n  TokenDataWithPrice,\n  | \"name\"\n  | \"ticker\"\n  | \"logo\"\n  | \"displayBalance\"\n  | \"nativeBalance\"\n  | \"usdBalance\"\n  | \"recentUsdBalanceChange\"\n  | \"priceData\"\n>;\n\nexport interface TokenMetadata {\n  name: string;\n  image: string;\n  symbol: string;\n}\n\nexport const TABS = [\n  [TAB_BALANCES, \"Balances\"],\n  [TAB_NFTS, \"Nfts\"],\n  [TAB_SWAP, \"Swap\"],\n  [TAB_APPS, \"Apps\"],\n  [TAB_MESSAGES, \"Messages\"],\n  [TAB_RECENT_ACTIVITY, \"Recent Activity\"],\n  [TAB_NOTIFICATIONS, \"Notifications\"],\n];\n\nexport function makeDefaultNav() {\n  const defaultNav: any = {\n    activeTab: TAB_BALANCES,\n    data: {},\n  };\n  TABS.forEach(([tabName, tabTitle]) => {\n    defaultNav.data[tabName] = {\n      id: tabName,\n      urls: [makeUrl(tabName, { title: tabTitle, props: {} })],\n    };\n  });\n  return defaultNav;\n}\n\nexport type ExtractRecoilType<P> = P extends RecoilValueReadOnly<infer T>\n  ? T\n  : never;\n","export function isPromise(p: any): p is Promise<any> {\n  return !!p && typeof p.then === \"function\";\n}\n","import { createFont, isWeb } from \"@tamagui/core\";\nconst fontSizes = {\n  xs: 12,\n  sm: 14,\n  base: 16,\n  true: 16,\n  lg: 18,\n  xl: 20,\n  \"2xl\": 24,\n  \"3xl\": 30,\n  \"4xl\": 36,\n  \"5xl\": 48,\n  \"6xl\": 60\n};\nconst lineHeights = {\n  xs: 16,\n  sm: 20,\n  base: 24,\n  lg: 28,\n  xl: 28,\n  \"2xl\": 32,\n  \"3xl\": 36,\n  \"4xl\": 40,\n  \"5xl\": 48,\n  \"6xl\": 60\n};\nconst weights = {\n  1: \"500\",\n  7: \"600\"\n};\nconst nativeFaces = {\n  400: { normal: \"Inter\" },\n  500: { normal: \"InterMedium\" },\n  600: { normal: \"InterSemiBold\" },\n  700: { normal: \"InterBold\" }\n  // 800: { normal: \"InterExtraBold\" },\n  // 900: { normal: \"InterBlack\" },\n};\nconst letterSpacings = {};\nconst bodyFont = createFont({\n  family: isWeb ? 'Inter, -apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif' : \"Inter\",\n  size: fontSizes,\n  lineHeight: lineHeights,\n  weight: weights,\n  letterSpacing: letterSpacings,\n  face: nativeFaces\n});\nexport {\n  bodyFont\n};\n//# sourceMappingURL=fonts.js.map\n","import {\n  baseTheme,\n  DARK_COLORS,\n  LIGHT_COLORS,\n  MOBILE_DARK_OVERRIDES,\n  MOBILE_LIGHT_OVERRIDES\n} from \"@coral-xyz/themes\";\nimport { config } from \"@tamagui/config\";\nimport { themes as _themes, tokens as _tokens } from \"@tamagui/themes\";\nimport { createTamagui, createTheme, createTokens } from \"tamagui\";\nimport { bodyFont } from \"./fonts\";\nconst tokens = createTokens({\n  ..._tokens,\n  size: {\n    ..._tokens.size,\n    container: 48,\n    borderWidth: 2,\n    xs: 12,\n    sm: 14,\n    base: 16,\n    lg: 18,\n    xl: 20,\n    \"2xl\": 24,\n    \"3xl\": 28,\n    \"4xl\": 32,\n    \"5xl\": 36,\n    \"6xl\": 40\n  },\n  radius: {\n    ..._tokens.radius,\n    ...baseTheme.custom.borderRadius\n  }\n});\nconst darkTheme = createTheme({\n  ...DARK_COLORS,\n  ...MOBILE_DARK_OVERRIDES\n});\nconst lightTheme = createTheme({\n  ...LIGHT_COLORS,\n  ...MOBILE_LIGHT_OVERRIDES\n});\nconst appConfig = createTamagui({\n  ...config,\n  tokens,\n  fonts: {\n    ...config.fonts,\n    body: bodyFont\n  },\n  themes: {\n    dark: {\n      ..._themes.dark,\n      ...darkTheme\n    },\n    light: {\n      ..._themes.light,\n      ...lightTheme\n    }\n  }\n});\nexport {\n  appConfig\n};\n//# sourceMappingURL=tamagui.config.js.map\n","export const baseTheme = {\n  custom: {\n    borderRadius: {\n      container: 16,\n      large: 12,\n      medium: 8,\n      small: 4,\n    },\n  },\n};\n","export const HOVER_OPACITY = 0.8;\n\nexport const TEXT_COLOR = \"#fff\";\nexport const BACKGROUND_COLOR_0 = \"#18181b\";\nexport const BACKGROUND_BACKDROP_COLOR = BACKGROUND_COLOR_0;\nexport const BACKGROUND_COLOR_1 = \"#27272a\";\nexport const BACKGROUND_COLOR_2 = \"#3F3F46\";\nexport const FONT_COLOR = \"#FFFFFF\";\nexport const FONT_COLOR_1 = \"#71717A\";\nexport const FONT_COLOR_2 = \"#D4D4D8\";\nexport const FONT_COLOR_3 = \"#A1A1AA\";\nexport const BRAND_COLOR = \"#FFFFFF\";\nexport const BUTTON_FONT_COLOR = FONT_COLOR;\nexport const BORDER_COLOR = \"#393C43\";\nexport const POSITIVE_COLOR = \"#35A63A\";\nexport const NEGATIVE_COLOR = \"#E95050\";\nexport const SCROLLBAR_THUMB_COLOR = \"rgb(153 164 180)\";\nexport const LIGHT_TEXT_SMALL_COLOR = \"#4E5768\";\nexport const DARK_TEXT_SMALL_COLOR = \"#8F929E\";\n\nexport const NEGATIVE_LIGHT = \"#FFF4F3\";\nexport const NEGATIVE_DARK = \"#FFF4F3\";\n\nexport const LIGHT_TEXT_COLOR = FONT_COLOR_1;\nexport const LIGHT_BACKGROUND_BACKDROP_COLOR =\n  \"linear-gradient(180deg, #F8F8F9 0%, #F0F0F2 100%), #FFFFFF\";\nexport const LIGHT_BACKGROUND_COLOR_0 = \"#F0F0F2\";\nexport const LIGHT_BACKGROUND_COLOR_1 = \"#ffffff\";\nexport const LIGHT_BACKGROUND_COLOR_2 = LIGHT_BACKGROUND_COLOR_0;\nexport const LIGHT_FONT_COLOR = \"#030A19\";\nexport const LIGHT_FONT_COLOR_1 = \"#4E5768\";\nexport const LIGHT_FONT_COLOR_2 = LIGHT_FONT_COLOR;\nexport const LIGHT_FONT_COLOR_3 = LIGHT_FONT_COLOR_1;\nexport const LIGHT_BRAND_COLOR = LIGHT_FONT_COLOR;\nexport const LIGHT_BUTTON_FONT_COLOR = FONT_COLOR;\nexport const LIGHT_BORDER_COLOR = \"#DFE0E6\";\nexport const LIGHT_BORDER_COLOR_1 = \"#F0F0F2\";\nexport const LIGHT_POSITIVE_COLOR = POSITIVE_COLOR;\nexport const LIGHT_NEGATIVE_COLOR = NEGATIVE_COLOR;\nexport const LIGHT_SCROLLBAR_THUMB_COLOR = SCROLLBAR_THUMB_COLOR;\nexport const LIGHT_ICON_HOVER_COLOR = \"#787C89\";\nexport const LIGHT_UNREAD_BACKGROUND = \"rgba(99, 96, 255, 0.1)\";\nexport const DARK_UNREAD_BACKGROUND = \"rgba(99, 96, 255, 0.1)\";\n\nexport const DANGER_COLOR = \"#DC2626\";\nexport const DANGER_DARK_COLOR = \"#DC2626\";\n\n// Migration to colours from Figma design system\nexport const LIGHT_RED_BORDER_LIGHT = \"#FFEDEB\";\nexport const LIGHT_RED_BORDER_MED = \"#FFDCD9\";\nexport const DARK_RED_BORDER_LIGHT = \"rgba(241,50,54,0.4)\";\nexport const DARK_RED_BORDER_MED = \"rgba(241,50,54,0.4)\";\n\n// NOTE: Do not include anything but colors in here. No box shadows, borders, etc.\nexport const DARK_COLORS: CustomColors = {\n  blue: \"#3498db\",\n  smallTextColor: DARK_TEXT_SMALL_COLOR,\n  brandColor: BRAND_COLOR,\n  background: BACKGROUND_COLOR_0,\n  backgroundBackdrop: BACKGROUND_BACKDROP_COLOR,\n  banner: BACKGROUND_COLOR_1,\n  bg2: BACKGROUND_COLOR_2,\n  bg3: BACKGROUND_COLOR_0,\n  bg4: \"rgba(255, 255, 255, 0.2)\",\n  invertedBg4: LIGHT_BACKGROUND_COLOR_0,\n  nav: BACKGROUND_COLOR_1,\n  fontColor: FONT_COLOR,\n  fontColor2: FONT_COLOR_2,\n  fontColor3: FONT_COLOR_3,\n  fontColor4: LIGHT_BACKGROUND_COLOR_1,\n  subtext: FONT_COLOR_3,\n  secondary: FONT_COLOR_1,\n  primaryButton: BRAND_COLOR,\n  primaryButtonTextColor: BACKGROUND_COLOR_1,\n  secondaryButton: BACKGROUND_COLOR_2,\n  secondaryButtonTextColor: FONT_COLOR,\n  buttonFontColor: BUTTON_FONT_COLOR,\n  border1: BACKGROUND_COLOR_2,\n  border: BACKGROUND_COLOR_1, // Don't use this.\n  borderColor: BORDER_COLOR,\n  borderRedLight: DARK_RED_BORDER_LIGHT,\n  borderRedMed: DARK_RED_BORDER_MED,\n  textInputBackground: BACKGROUND_COLOR_1,\n  textFieldTextColor: FONT_COLOR_2,\n  copyTooltipColor: BRAND_COLOR,\n  copyTooltipTextColor: BACKGROUND_COLOR_1,\n  tableBorder: BACKGROUND_COLOR_0,\n  tableCellBorder: \"1px solid rgba(255,255,255,0.1)\",\n  balanceSkeleton: BACKGROUND_COLOR_1,\n  balanceChangeNegative: \"rgb(233, 80, 80, .1)\",\n  balanceChangePositive: \"rgb(53, 166, 58, .1)\",\n  balanceChangeNeutral: \"rgb(78, 87, 104, .1)\",\n  textBackground: BACKGROUND_COLOR_1,\n  textPlaceholder: FONT_COLOR_1,\n  textBorder: BACKGROUND_COLOR_1,\n  switchTokensButton: BACKGROUND_COLOR_0,\n  icon: \"#787C89\",\n  approveTransactionTableBackground: BACKGROUND_COLOR_2,\n  approveTransactionCloseBackground: BACKGROUND_COLOR_0,\n  hoverIconBackground: `rgb(39, 39, 42, ${HOVER_OPACITY})`,\n  avatarIconBackground: \"#DFE0E5\",\n  text: TEXT_COLOR,\n  dangerButton: DANGER_DARK_COLOR,\n  successButton: \"#2ecc71\",\n  alpha: \"#8F929E\",\n  scrollbarTrack: BACKGROUND_COLOR_0,\n  scrollbarThumb: SCROLLBAR_THUMB_COLOR,\n  positive: POSITIVE_COLOR,\n  negative: NEGATIVE_COLOR,\n  negativeBackground: NEGATIVE_DARK,\n  neutral: \"rgb(78, 87, 104)\",\n  negativeButtonTextColor: \"#fff\",\n  unreadBackground: LIGHT_UNREAD_BACKGROUND,\n  invertedPrimary: \"#FFFFFF\",\n  invertedSecondary: LIGHT_BACKGROUND_COLOR_0,\n  invertedTertiary: \"white\",\n  avatarPopoverMenuBackground: BACKGROUND_COLOR_0,\n  listItemHover: `rgba(39, 39, 42, ${HOVER_OPACITY})`,\n  miniDrawerBackdrop: \"#000000\",\n  walletCopyButtonHover: \"#18181c\",\n  verified: \"#DFE0E5\",\n  linkColor: \"#4C94FF\",\n  chatFadeGradientStart: \"rgba(255, 255, 255, 0.04)\",\n};\n\n// NOTE: Do not include anything but colors in here. No box shadows, borders, etc.\nexport const LIGHT_COLORS: CustomColors = {\n  blue: \"blue\",\n  smallTextColor: LIGHT_TEXT_SMALL_COLOR,\n  brandColor: LIGHT_BRAND_COLOR,\n  backgroundBackdrop: LIGHT_BACKGROUND_BACKDROP_COLOR,\n  banner: LIGHT_BACKGROUND_BACKDROP_COLOR,\n  background: LIGHT_BACKGROUND_COLOR_0,\n  nav: LIGHT_BACKGROUND_COLOR_1,\n  bg2: LIGHT_BACKGROUND_COLOR_2,\n  bg3: LIGHT_BACKGROUND_COLOR_1,\n  bg4: LIGHT_BACKGROUND_COLOR_0,\n  invertedBg4: \"rgba(255, 255, 255, 0.2)\",\n  fontColor: LIGHT_FONT_COLOR,\n  successButton: \"#2ecc71\",\n  fontColor2: LIGHT_FONT_COLOR_2,\n  fontColor3: LIGHT_FONT_COLOR_3,\n  fontColor4: LIGHT_FONT_COLOR_2,\n  subtext: LIGHT_FONT_COLOR_3,\n  secondary: LIGHT_FONT_COLOR_1,\n  textInputBackground: LIGHT_BACKGROUND_COLOR_0,\n  primaryButton: LIGHT_BRAND_COLOR,\n  primaryButtonTextColor: LIGHT_BACKGROUND_COLOR_1,\n  secondaryButton: LIGHT_BACKGROUND_COLOR_1,\n  secondaryButtonTextColor: LIGHT_FONT_COLOR,\n  buttonFontColor: LIGHT_BUTTON_FONT_COLOR,\n  border: LIGHT_BACKGROUND_COLOR_1,\n  border1: LIGHT_BORDER_COLOR_1,\n  borderColor: LIGHT_BORDER_COLOR_1,\n  borderRedLight: LIGHT_RED_BORDER_LIGHT,\n  borderRedMed: LIGHT_RED_BORDER_MED,\n  copyTooltipColor: LIGHT_BRAND_COLOR,\n  copyTooltipTextColor: LIGHT_BACKGROUND_COLOR_1,\n  tableBorder: LIGHT_BORDER_COLOR,\n  tableCellBorder: \"1px solid #F0F0F2\",\n  balanceSkeleton: \"rgba(0,0,0,0.15)\",\n  balanceChangeNegative: \"rgb(233, 80, 80, .1)\",\n  balanceChangePositive: \"rgb(53, 166, 58, .1)\",\n  balanceChangeNeutral: \"rgb(78, 87, 104, .1)\",\n  textBackground: LIGHT_BACKGROUND_COLOR_1,\n  textBorder: LIGHT_BORDER_COLOR,\n  textPlaceholder: \"#4E5768\",\n  textFieldTextColor: LIGHT_FONT_COLOR_2,\n  switchTokensButton: \"#FFFFFF\",\n  icon: \"#8F929E\",\n  approveTransactionTableBackground: LIGHT_BACKGROUND_COLOR_1,\n  approveTransactionCloseBackground: \"#C2C4CC\",\n  hoverIconBackground: \"#DFE0E5\",\n  avatarIconBackground: \"#DFE0E5\",\n  text: LIGHT_TEXT_COLOR,\n  dangerButton: DANGER_COLOR,\n  alpha: \"#8F929E\",\n  scrollbarTrack: LIGHT_BACKGROUND_COLOR_0,\n  scrollbarThumb: LIGHT_SCROLLBAR_THUMB_COLOR,\n  positive: LIGHT_POSITIVE_COLOR,\n  negative: LIGHT_NEGATIVE_COLOR,\n  negativeBackground: NEGATIVE_LIGHT,\n  neutral: \"rgb(78, 87, 104)\",\n  negativeButtonTextColor: \"#fff\",\n  miniDrawerBackdrop: \"#18181b\",\n  unreadBackground: DARK_UNREAD_BACKGROUND,\n  invertedPrimary: \"#212121\",\n  invertedSecondary: \"rgba(255, 255, 255, 0.1)\",\n  invertedTertiary: LIGHT_FONT_COLOR,\n  avatarPopoverMenuBackground: LIGHT_BACKGROUND_COLOR_1,\n  listItemHover: \"#F8F8F9\",\n  walletCopyButtonHover: \"#d6d6d6\",\n  verified: \"#212938\",\n  chatFadeGradientStart: \"rgba(248,248,248,255)\",\n  linkColor: \"#0057EB\",\n};\n\nconst LIGHT_WEB_ONLY_NON_COLORS: WebOnlyNonColors = {\n  // NON-COLORS BREAK NON-WEB ENVIRONMENTS AKA MOBILE\n  // TODO { borderColor: \"color\", borderWidth: 2, borderStyle: \"solid\"}\n  borderFull: `solid 2px ${LIGHT_BORDER_COLOR_1}`,\n  borderButton: `solid 2px ${LIGHT_BORDER_COLOR_1}`,\n  textInputBorderFull: `solid 2px ${LIGHT_BACKGROUND_COLOR_0}`,\n  textInputBorderFocussed: `solid 2px ${LIGHT_BACKGROUND_COLOR_0}`,\n  textInputBorderHovered: `solid 2px ${LIGHT_BACKGROUND_COLOR_0}`,\n\n  drawerGradient: `linear-gradient(180deg, ${LIGHT_BACKGROUND_COLOR_1} 0%, rgba(41, 44, 51, 0) 100%)`,\n  boxShadow: \"0px 0px 4px rgba(0, 0, 0, 0.15)\",\n  tabBarBoxShadow: \"0px -4px 4px rgba(3, 10, 25, 0.02)\",\n  coralGradient:\n    \"linear-gradient(113.94deg, #3EECB8 15.93%, #A372FE 58.23%, #FE7D4A 98.98%)\",\n  chatFadeGradient:\n    \"linear-gradient(360deg, rgb(255, 255, 255) 20%, rgba(240, 240, 242, 0.5) 100%), #FFFFFF\",\n};\n\nconst DARK_WEB_ONLY_NON_COLORS: WebOnlyNonColors = {\n  // NON-COLORS BREAK NON-WEB ENVIRONMENTS AKA MOBILE\n  // TODO { borderColor: \"color\", borderWidth: 2, borderStyle: \"solid\"}\n  textInputBorderFull: `solid 2pt ${BACKGROUND_COLOR_1}`,\n  textInputBorderFocussed: `solid 2pt ${BACKGROUND_COLOR_1}`,\n  textInputBorderHovered: `solid 2pt ${BACKGROUND_COLOR_1}`,\n  borderFull: `solid 2px ${BACKGROUND_COLOR_1}`,\n  borderButton: `solid 2px ${BACKGROUND_COLOR_1}`,\n\n  drawerGradient: `linear-gradient(180deg, ${BACKGROUND_COLOR_1} 0%, rgba(41, 44, 51, 0) 100%)`,\n  boxShadow: \"0px 0px 4px rgba(0, 0, 0, 0.15)\",\n  tabBarBoxShadow: \"0px -4px 4px rgba(3, 10, 25, 0.02)\",\n  coralGradient:\n    \"linear-gradient(113.94deg, #3EECB8 15.93%, #A372FE 58.23%, #FE7D4A 98.98%)\",\n  chatFadeGradient:\n    \"linear-gradient(180deg, rgba(255, 255, 255, 0.04) 20%, rgba(0, 0, 0, 0) 100%), #18181B\",\n};\n\nexport const MOBILE_DARK_OVERRIDES: NativeOverrides = {\n  borderFull: BACKGROUND_COLOR_1,\n  textInputBorderFull: `rgba(255, 255, 255, 0.1)`,\n  textInputBorderFocussed: `rgba(255, 255, 255, 0.1)`,\n  textInputBorderHovered: `rgba(255, 255, 255, 0.2)`,\n};\n\nexport const MOBILE_LIGHT_OVERRIDES: NativeOverrides = {\n  borderFull: LIGHT_BORDER_COLOR_1,\n  textInputBorderFull: LIGHT_BACKGROUND_COLOR_0,\n  textInputBorderFocussed: LIGHT_BACKGROUND_COLOR_0,\n  textInputBorderHovered: LIGHT_BORDER_COLOR,\n};\n\nexport const MUI_DARK_THEME: MuiCustomTheme = {\n  ...DARK_COLORS,\n  ...DARK_WEB_ONLY_NON_COLORS,\n};\n\nexport const MUI_LIGHT_THEME: MuiCustomTheme = {\n  ...LIGHT_COLORS,\n  ...LIGHT_WEB_ONLY_NON_COLORS,\n};\n\n// Include box shadows, borders, etc in here.\n// Eventually \"2px solid black\" should be split into borderColor, borderStyle, borderWidth\ntype WebOnlyNonColors = {\n  borderButton: string;\n  borderFull: string;\n  boxShadow: string;\n  chatFadeGradient: string;\n  coralGradient: string;\n  drawerGradient: string;\n  tabBarBoxShadow: string;\n  textInputBorderFocussed: string;\n  textInputBorderFull: string;\n  textInputBorderHovered: string;\n};\n\ntype NativeOverrides = {\n  borderFull: string;\n  textInputBorderFull: string;\n  textInputBorderFocussed: string;\n  textInputBorderHovered: string;\n};\n\n// NOTE: Do not include anything but colors in here. No box shadows, borders, etc.\nexport type CustomColors = {\n  alpha: string;\n  approveTransactionCloseBackground: string;\n  approveTransactionTableBackground: string;\n  avatarIconBackground: string;\n  avatarPopoverMenuBackground: string;\n  background: string;\n  backgroundBackdrop: string;\n  balanceChangeNegative: string;\n  balanceChangeNeutral: string;\n  balanceChangePositive: string;\n  balanceSkeleton: string;\n  banner: string;\n  bg2: string;\n  bg3: string;\n  bg4: string;\n  blue: string;\n  border1: string;\n  border: string;\n  borderColor: string;\n  borderRedLight: string;\n  borderRedMed: string;\n  brandColor: string;\n  buttonFontColor: string;\n  chatFadeGradientStart: string;\n  copyTooltipColor: string;\n  copyTooltipTextColor: string;\n  dangerButton: string;\n  fontColor2: string;\n  fontColor3: string;\n  fontColor4: string;\n  fontColor: string;\n  hoverIconBackground: string;\n  icon: string;\n  invertedBg4: string;\n  invertedPrimary: string;\n  invertedSecondary: string;\n  invertedTertiary: string;\n  linkColor: string;\n  listItemHover: string;\n  miniDrawerBackdrop: string;\n  nav: string;\n  negative: string;\n  negativeBackground: string;\n  negativeButtonTextColor: string;\n  neutral: string;\n  positive: string;\n  primaryButton: string;\n  primaryButtonTextColor: string;\n  scrollbarThumb: string;\n  scrollbarTrack: string;\n  secondary: string;\n  secondaryButton: string;\n  secondaryButtonTextColor: string;\n  smallTextColor: string;\n  subtext: string;\n  successButton: string;\n  switchTokensButton: string;\n  tableBorder: string;\n  tableCellBorder: string;\n  text: string;\n  textBackground: string;\n  textBorder: string;\n  textFieldTextColor: string;\n  textInputBackground: string;\n  textPlaceholder: string;\n  unreadBackground: string;\n  verified: string;\n  walletCopyButtonHover: string;\n};\n\nexport type MuiCustomTheme = CustomColors & WebOnlyNonColors;\nexport type NativeCustomTheme = CustomColors & NativeOverrides;\n","import color from \"color\";\n// Opacities without color values ///////////////////////////////////////////////\n// Disabled elements should be 0.5 opacity\n// Hover can be 0.8 opacity if complex component\n\n// Brand Colors\nexport const baseWhite = \"#ffffff\";\nexport const brandBackpackLogoRed = \"#e33e3f\";\nexport const brandPixelBlurple = \"#6360ff\";\nexport const brandPixelLavender = \"#c061f7\";\nexport const brandPixelOcean = \"#28dbd1\";\nexport const brandPixelCoral = \"#fe6f5c\";\nexport const brandPixelLemon = \"#feed5c\";\n\n// Accent Colors\nexport const lightAccentBlue = \"#0057eb\";\nexport const lightAccentPurple = \"#9b34ef\";\nexport const darkAccentBlue = \"#4c94ff\";\nexport const darkAccentPurple = \"#e17aff\";\n\n// Neutral Colors\nexport const base50 = \"rgba(244, 244, 246, 1)\"; // formerly #f8f8f9\nexport const base100 = \"rgba(238, 239, 241)\"; // formerly #f0f0f2\nexport const base200 = \"rgba(227, 228, 232)\"; // formerly #dfe0e5\nexport const base300 = \"rgba(200, 201, 208, 1)\"; // formerly #c2c4cc\nexport const base400 = \"rgba(142, 145, 159, 1)\"; // formerly #8f929e\nexport const base500 = \"rgba(117, 121, 138, 1)\"; // formerly #787c89\nexport const base600 = \"rgba(93, 96, 111, 1)\"; // formerly #555c6b\nexport const base700 = \"rgba(70, 72, 83, 1)\"; // formerly #4e5768\nexport const base800 = \"rgba(32, 33, 39, 1)\"; // formerly #212938\nexport const base900 = \"rgba(20, 21, 27, 1)\"; // formerly #030a19\n\n// Success Colors\nexport const green100 = \"rgba(224, 248, 239, 1)\"; // formerly #f1ffef\nexport const green500 = \"rgba(0, 194, 120, 1)\"; //formerly #42c337\nexport const green600 = \"rgba(0, 158, 99, 1)\"; // formerly #11a800\nexport const green700 = \"rgba(0, 121, 75, 1)\"; // formerly #138600\n\n// Warning Colors\nexport const yellow100 = \"rgba(255, 249, 223, 1)\"; // formerly #fff9df\nexport const yellow500 = \"rgba(239, 164, 17, 1)\"; // formerly #efa411\nexport const yellow600 = \"rgba(206, 121, 7, 1)\"; // formerly #ce7907\nexport const yellow700 = \"rgba(177, 87, 0, 1)\"; // formerly #b15700\n\n// Error Colors\nexport const red100 = \"rgba(255, 237, 235, 1)\"; // previously #ffedeb\nexport const red500 = \"rgba(23, 80, 80, 1)\"; // previously #FF6269\nexport const red600 = \"rgba(234, 56, 59, 1)\"; // previously #f13236\nexport const red700 = \"rgba(210, 0, 36, 1)\"; // previously #d20024\n\n// Light Mode /////////////////////////////////////////////////////\n// Light Mode Backgrounds\nexport const lightNeutralBackgroundAppBackground =\n  \"linear-gradient(to bottom, #f8f8f9 0%,#f0f0f2 100%)\";\nexport const lightBaseBackgroundL1 = base50; // card background\nexport const lightBaseBackgroundL2 = base100; // light mode border\n\n// Light Mode Text\nexport const lightBaseTextHighEmphasis = base900;\nexport const lightBaseTextMedEmphasis = base600;\n\n// Light Mode Icons\nexport const lightBaseIcon = base400; // this meets 3:1 color contrast on white for WCAG AA\nexport const lightBaseIconHover = base500; // increase contrast on hover\nexport const lightBaseIconPress = base400; // decrease contrast on press\n\n// Light Mode Borders\nexport const lightBaseBorderLight = base100; // default border color\n// export const lightBaseBorderMed = base200; // idk if we need this\n\n// Light Mode Buttons\nexport const lightButtonPrimaryBackground = base900;\nexport const lightButtonPrimaryText = base50;\nexport const lightButtonSecondaryBackground = baseWhite;\nexport const lightButtonSecondaryText = base900;\n\n// Light Mode Success\nexport const lightGreenText = green700;\nexport const lightGreenIcon = green600;\nexport const lightGreenBorder = color(green600).alpha(0.4);\nexport const lightGreenBackgroundSolid = green100;\nexport const lightGreenBackgroundTransparent = color(green500).alpha(0.12);\n\n// Light Mode Warning\nexport const lightYellowText = yellow700;\nexport const lightYellowIcon = yellow600;\nexport const lightYellowBorder = color(yellow700).alpha(0.5);\nexport const lightYellowBackgroundSolid = yellow100;\nexport const lightYellowBackgroundTransparent = color(yellow500).alpha(12);\n\n// Light Mode Error\nexport const lightRedText = red700;\nexport const lightRedIcon = red600;\nexport const lightRedBorder = color(red700).alpha(0.5);\nexport const lightRedBackgroundSolid = red100;\nexport const lightRedBackgroundTransparent = color(red500).alpha(0.12);\n\n// Dark Mode //////////////////////////////////////////////////////\n// Dark Mode Text\nexport const darkBaseTextHighEmphasis = base50;\nexport const darkBaseTextMedEmphasis = base400;\n\n// Dark Mode Icons\nexport const darkBaseIcon = base500; // meets 3:1 color contrast on base800 for WCAG AA\nexport const darkBaseIconHover = base400; // increase contrast on hover\nexport const darkBaseIconPress = base500; // decrease contrast on press\nexport const darkBaseIconHighContrast = base400; // icon hover if not using opacity\n\n// Dark Mode Backgrounds\nexport const darkBaseBackgroundL0 = base900; // dark container background\nexport const darkBaseBackgroundL1 = base800; // dark content background\n\n// Dark Mode Borders\nexport const darkBaseBorderLight = color(baseWhite).alpha(0.1);\n// export const darkBaseBorderMed = color(baseWhite).alpha(0.25); idk if we need this\n\n// Dark Mode Buttons\nexport const darkButtonPrimaryBackground = baseWhite;\nexport const darkButtonPrimaryText = base900;\nexport const darkButtonSecondaryBackground = base800;\nexport const darkButtonSecondaryText = base50;\n\n// Dark Mode Success\nexport const darkGreenText = green500;\nexport const darkGreenIcon = green600;\nexport const darkGreenBorder = color(green500).alpha(0.4); // green500 at 40%\nexport const darkGreenBackgroundOpacity = color(green500).alpha(0.08); // green500 at 8%\nexport const darkGreenBackgroundSolid = \"rgba(18, 35, 34, 1)\"; // derived from putting green500 at 8% opacity on base900\n\n// Dark Mode Warning\nexport const darkYellowText = yellow500;\nexport const darkYellowIcon = yellow600;\nexport const darkYellowBorder = color(yellow500).alpha(0.5);\nexport const darkYellowBackgroundTransparent = color(yellow500).alpha(0.08);\nexport const darkYellowBackgroundSolid = \"rgba(38, 32, 26, 1)\"; // derived from putting yellow500 at 8% opacity on base900\n\n// Dark Mode Error\nexport const darkRedText = red500;\nexport const darkRedIcon = red600;\nexport const darkRedBorder = color(red600).alpha(0.5);\nexport const darkRedBackgroundTransparent = color(red600).alpha(0.12);\nexport const darkRedBackgroundSolid = \"rgba(53, 26, 31, 1)\"; // derived from putting red600 at 12% opacity on base900\n\n// Misc Color Definitions ////////////////////////////////////////\nexport const overlayBackground = color(base900).alpha(0.4); // overlay background is base900 at 40% opacity\n\n// Username Colors in Messaging\nexport const lightUsernameColors = {\n  color_01: \"#E02929\",\n  color_02: \"#CC2578\",\n  color_03: \"#9930B8\",\n  color_04: \"#5E35B1\",\n  color_05: \"#3949AB\",\n  color_06: \"#0072DB\",\n  color_07: \"#0C5ADF\",\n  color_08: \"#008577\",\n  color_09: \"#1A841F\",\n  color_10: \"#6C7D26\",\n  color_11: \"#BD5B00\",\n  color_12: \"#CC4218\",\n  color_13: \"#6D4C41\",\n  color_14: \"#2D4363\",\n};\n\nexport const darkUsernameColors = {\n  color_01: \"#F88484\",\n  color_02: \"#E57AB0\",\n  color_03: \"#DA8BE7\",\n  color_04: \"#C2A6F4\",\n  color_05: \"#97A4F4\",\n  color_06: \"#57AEFF\",\n  color_07: \"#5596F6\",\n  color_08: \"#7ACCC7\",\n  color_09: \"#75DD7A\",\n  color_10: \"#BEE05A\",\n  color_11: \"#FFD080\",\n  color_12: \"#FA9476\",\n  color_13: \"#BCAAA4\",\n  color_14: \"#A3B5CF\",\n};\n","export * from \"./base\";\nexport * from \"./colors\";\nexport * from \"./colorsv2\";\nexport * from \"./mobile\";\nexport * from \"./theme\";\n","import { baseTheme } from \"./base\";\nimport {\n  DARK_COLORS,\n  LIGHT_COLORS,\n  MOBILE_DARK_OVERRIDES,\n  MOBILE_LIGHT_OVERRIDES,\n} from \"./colors\";\n\nexport const MOBILE_LIGHT_THEME = {\n  ...baseTheme,\n  custom: {\n    colors: {\n      ...LIGHT_COLORS,\n      ...MOBILE_LIGHT_OVERRIDES,\n    },\n  },\n};\n\nexport const MOBILE_DARK_THEME = {\n  ...baseTheme,\n  custom: {\n    colors: {\n      ...DARK_COLORS,\n      ...MOBILE_DARK_OVERRIDES,\n    },\n  },\n};\n\nexport type MobileCustomTheme = typeof MOBILE_LIGHT_THEME &\n  typeof MOBILE_DARK_THEME;\n","import createStyles from \"@mui/styles/createStyles\";\nimport _makeStyles from \"@mui/styles/makeStyles\";\nimport useTheme from \"@mui/styles/useTheme\";\nimport type { CreateMUIStyled, Theme } from \"@mui/system\";\nimport muiStyled from \"@mui/system/styled\";\n\nimport type { MuiCustomTheme } from \"./colors\";\nimport {\n  FONT_COLOR_1,\n  HOVER_OPACITY,\n  LIGHT_ICON_HOVER_COLOR,\n  MUI_DARK_THEME,\n  MUI_LIGHT_THEME,\n} from \"./colors\";\n\nconst baseTheme = createStyles({\n  typography: {\n    fontFamily: [\"Inter\", \"sans-serif\"].join(\",\"),\n    // TODO: do we need all of these?\n    fontWeight: 500,\n    allVariants: {\n      fontWeight: 500,\n    },\n    body: {\n      fontWeight: 500,\n    },\n    p: {\n      fontWeight: 500,\n    },\n  },\n});\n\nconst darkComponentOverrides = {\n  MuiButton: {\n    styleOverrides: {\n      root: {\n        \"&:hover\": {\n          opacity: HOVER_OPACITY,\n        },\n      },\n    },\n  },\n  MuiButtonBase: {\n    styleOverrides: {\n      root: {\n        \"&:hover\": {\n          opacity: HOVER_OPACITY,\n        },\n      },\n    },\n  },\n  MuiIconButton: {\n    styleOverrides: {\n      root: {\n        \"&:hover\": {\n          opacity: HOVER_OPACITY,\n        },\n      },\n    },\n  },\n  MuiPaper: {\n    styleOverrides: {\n      root: {\n        backgroundImage: \"none\",\n      },\n    },\n  },\n  MuiSelect: {\n    styleOverrides: {\n      icon: {\n        color: FONT_COLOR_1,\n      },\n    },\n  },\n};\n\nexport const darkTheme: Partial<Theme> & {\n  custom: { colors: MuiCustomTheme; colorsInverted: MuiCustomTheme };\n} = {\n  ...baseTheme,\n  components: darkComponentOverrides,\n  custom: {\n    colors: MUI_DARK_THEME,\n    colorsInverted: MUI_LIGHT_THEME,\n  },\n};\n\nconst lightComponentOverrides = {\n  MuiButton: {\n    styleOverrides: {\n      root: {\n        \"&:hover\": {\n          background: \"#F8F8F9 !important\",\n        },\n      },\n    },\n  },\n  MuiButtonBase: {\n    styleOverrides: {\n      root: {\n        \"&:hover\": {\n          background: \"#F8F8F9 !important\",\n        },\n      },\n    },\n  },\n  MuiListItem: {\n    styleOverrides: {\n      button: {\n        \"&:hover\": {\n          background: \"#F8F8F9 !important\",\n        },\n      },\n    },\n  },\n  MuiIconButton: {\n    styleOverrides: {\n      root: {\n        \"&:hover\": {\n          \"& svg\": {\n            color: `${LIGHT_ICON_HOVER_COLOR} !important`,\n          },\n        },\n      },\n    },\n  },\n  MuiPaper: {\n    styleOverrides: {\n      root: {\n        backgroundImage: \"none\",\n      },\n    },\n  },\n  MuiSelect: {\n    styleOverrides: {\n      icon: {\n        color: FONT_COLOR_1,\n      },\n    },\n  },\n};\n\nexport const lightTheme: Partial<Theme> & {\n  custom: { colors: MuiCustomTheme; colorsInverted: MuiCustomTheme };\n} = {\n  ...baseTheme,\n  components: lightComponentOverrides,\n  custom: {\n    colors: MUI_LIGHT_THEME,\n    colorsInverted: MUI_DARK_THEME,\n  },\n};\n\nexport type CustomTheme = typeof lightTheme & typeof darkTheme;\nexport const styles = _makeStyles<CustomTheme>;\nexport const useCustomTheme = useTheme<CustomTheme>;\n//@ts-ignore -> Weird hack that works to allow us to have \"custom\" field in Theme. We should use palettes.\nexport const styled: CreateMUIStyled<CustomTheme> = muiStyled;\n","/* (ignored) */"],"names":[],"sourceRoot":""}
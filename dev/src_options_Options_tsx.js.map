{"version":3,"file":"src_options_Options_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAOA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;AAKA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;AACA;;;;;;;AAEA;AACA;AACA;;;;;;;AAGA;;;;;;;AAGA;AACA;AACA;;;;;;;AAGA;AAGA;AAzDA;;AASA;;;AATA;AA2DA;;AAOA;AACA;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAKA;AAnDA;;AAOA;;;AAPA;AAqDA;;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;AAEA;;;;;;;;AAIA;AAzCA;;AASA;;;AATA;AA2CA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAOA;AA9EA;;AACA;AACA;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1LA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AAGA;AAVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAEA;;;;;;;AACA;;;;;;;AAAA;AAOA;;;;;;;AACA;;;;;;;AAAA;AAOA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;;;;;;;AAGA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;;;;;;;AAMA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;;;;;;;;AAKA;AA5EA;AA8EA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AACA;AAKA;AA3BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;AACA;AAEA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;AAIA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAOA;AAxCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AAMA;AAIA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;AAGA;;;;;;;AACA;AACA;AAvDA;;AAUA;AAEA;AACA;;;AAbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAGA;;AAOA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;;;;;;;AAGA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;;;;;;;AAAA;AAQA;AA7DA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AAEA;AACA;AAKA;AAEA;AAEA;;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;;;;;;;AACA;AAEA;;;;;;;AACA;;;;;;;AAAA;AAQA;;;;;;;AACA;;;;;;;AAAA;AAOA;;;;;;;AACA;;;;;;;AAAA;AAOA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;;;;;;;AAGA;AAGA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;;;;;;;AAGA;AACA;AAAA;AAAA;;;;;;;AACA;AACA;AAKA;;;;;;;AAGA;AAAA;;;;;;;AAAA;AAKA;;;;;;;AAAA;AAOA;AA1FA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;;AAEA;AAEA;AAKA;AACA;AACA;AAEA;AAEA;;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;;;;;;;;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;;;;;;;AACA;;;;;;;AACA;AAYA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;;;;;;;;AAIA;AAtFA;;AAYA;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AAMA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAIA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;AAKA;AAtDA;;AACA;;;AADA;AAwDA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;;;;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAnDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAaA;AACA;AACA;AAMA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;AAEA;AAEA;AAAA;AAAA;;;;;;;;AACA;AAAA;AAAA;;;;;;;;AACA;AAEA;AACA;;;;;;;;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAIA;AAvNA;;AAaA;AAOA;AACA;;;AArBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAWA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;;;;;;;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;AAEA;AAEA;AAAA;AAAA;;;;;;;;AACA;AAAA;AAAA;;;;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;AAEA;AAGA;AA7JA;;AAWA;AACA;AAEA;AASA;;;AAvBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAOA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;AAKA;AAnGA;;AAWA;;;AAXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAOA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AAAA;;;;;;;AAIA;;;;;;;AAAA;;;;;;;AAGA;;;;;;;AAAA;AAKA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAMA;AAAA;AAAA;;;;;;;;AAIA;AAvGA;;AASA;;;AATA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;;;;;;;AACA;AAAA;;;;;;;AACA;;;;;;;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;;;;;;;;AAIA;AA9BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAKA;AAEA;AAEA;AAEA;;AAYA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;;;;;;;;AAGA;AA5CA;;AAYA;AACA;;;AAbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAKA;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;;;;;;;AAEA;AAKA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AAAA;AAAA;;;;;;;AAEA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAKA;AAxJA;;AAKA;;;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AAMA;AAOA;AACA;AASA;AACA;AAEA;;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;;;;;;;AAEA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;;;;;;;AACA;AACA;AACA;AACA;;;;;;;AACA;AAKA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AAAA;;;;;;;AACA;AACA;AACA;AACA;;;;;;;AAGA;AACA;AAAA;;;;;;;AACA;AACA;AAAA;;AACA;AACA;;;;;;;AAGA;AAAA;AAAA;;;;;;;AACA;AACA;AAAA;;AACA;AACA;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAMA;AA3FA;;AACA;;;AADA;AA6FA;;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAMA;AAnDA;;AASA;;;AATA;AAqDA;;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;AACA;AAGA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AACA;AAKA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AACA;AAKA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;;;;;;;;AAKA;AAhFA;;AACA;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7KA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;;;;;;;AACA;;;;;;;;AAIA;AARA;AAUA;;AACA;AACA;;;;;;;AAEA;;;;;;;AACA;;;;;;;AACA;;;;;;;;AAKA;AAXA;;AACA;;;AAYA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAIA;AACA;;;;;;;;AACA;AACA;AAAA;;;;;;;;AACA;AACA;AACA;AACA;AAvCA;AAyCA","sources":["webpack://@coral-xyz/app-extension/./src/components/Onboarding/index.tsx","webpack://@coral-xyz/app-extension/./src/components/Onboarding/pages/AlreadyOnboarded.tsx","webpack://@coral-xyz/app-extension/./src/components/Onboarding/pages/BlockchainSelector.tsx","webpack://@coral-xyz/app-extension/./src/components/Onboarding/pages/CreateOrImportWallet.tsx","webpack://@coral-xyz/app-extension/./src/components/Onboarding/pages/Finish.tsx","webpack://@coral-xyz/app-extension/./src/components/Onboarding/pages/InviteCodeForm.tsx","webpack://@coral-xyz/app-extension/./src/components/Onboarding/pages/KeyringTypeSelector.tsx","webpack://@coral-xyz/app-extension/./src/components/Onboarding/pages/MnemonicSearch.tsx","webpack://@coral-xyz/app-extension/./src/components/Onboarding/pages/NotificationsPermission.tsx","webpack://@coral-xyz/app-extension/./src/components/Onboarding/pages/OnboardAccount.tsx","webpack://@coral-xyz/app-extension/./src/components/Onboarding/pages/RecoverAccount.tsx","webpack://@coral-xyz/app-extension/./src/components/Onboarding/pages/RecoverAccountUsernameForm.tsx","webpack://@coral-xyz/app-extension/./src/components/Onboarding/pages/UsernameForm.tsx","webpack://@coral-xyz/app-extension/./src/components/Unlocked/Settings/AddConnectWallet/ConnectHardware/ConnectHardwareSuccess.tsx","webpack://@coral-xyz/app-extension/./src/components/Unlocked/Settings/AddConnectWallet/ConnectHardware/index.tsx","webpack://@coral-xyz/app-extension/./src/components/common/Account/CreatePassword.tsx","webpack://@coral-xyz/app-extension/./src/components/common/Account/SetupComplete.tsx","webpack://@coral-xyz/app-extension/./src/options/Options.tsx"],"sourcesContent":["import type { Dispatch, MutableRefObject, SetStateAction } from \"react\";\nimport { useRef, useState } from \"react\";\nimport {\n  BACKPACK_LINK,\n  DISCORD_INVITE_LINK,\n  EXTENSION_HEIGHT,\n  EXTENSION_WIDTH,\n  TWITTER_LINK,\n} from \"@coral-xyz/common\";\nimport { DiscordIcon, List, ListItem } from \"@coral-xyz/react-common\";\nimport {\n  KeyringStoreStateEnum,\n  OnboardingProvider,\n  useKeyringStoreState,\n} from \"@coral-xyz/recoil\";\nimport { styles, useCustomTheme } from \"@coral-xyz/themes\";\nimport { CallMade, Lock, Menu, Twitter } from \"@mui/icons-material\";\nimport { Box, IconButton, ListItemText, Toolbar } from \"@mui/material\";\n\nimport { WithContaineredDrawer } from \"../common/Layout/Drawer\";\nimport { NAV_BAR_HEIGHT } from \"../common/Layout/Nav\";\n\nimport { OnboardAccount } from \"./pages/OnboardAccount\";\nimport { RecoverAccount } from \"./pages/RecoverAccount\";\n\nexport const Onboarding = ({\n  isAddingAccount,\n}: {\n  isAddingAccount?: boolean;\n}) => {\n  const containerRef = useRef();\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [action, setAction] = useState<\"onboard\" | \"recover\">(\"onboard\");\n\n  const _ks = useKeyringStoreState();\n  const isOnboarded =\n    !isAddingAccount && _ks !== KeyringStoreStateEnum.NeedsOnboarding;\n\n  const defaultProps = {\n    containerRef,\n    // Props for the WithNav component\n    navProps: {\n      navButtonRight: (\n        <OnboardingMenu\n          containerRef={containerRef}\n          menuOpen={menuOpen}\n          setMenuOpen={setMenuOpen}\n        />\n      ),\n      navbarStyle: {\n        borderRadius: \"12px\",\n      },\n      navContentStyle: {\n        borderRadius: \"12px\",\n        overflow: \"hidden\",\n        display: \"flex\",\n      },\n    },\n    isAddingAccount,\n    isOnboarded,\n  };\n\n  return (\n    <OptionsContainer innerRef={containerRef}>\n      {action === \"onboard\" ? (\n        <OnboardingProvider>\n          <OnboardAccount\n            onRecover={() => setAction(\"recover\")}\n            {...defaultProps}\n          />\n        </OnboardingProvider>\n      ) : null}\n      {action === \"recover\" ? (\n        <OnboardingProvider>\n          <RecoverAccount\n            onClose={() => setAction(\"onboard\")}\n            {...defaultProps}\n          />\n        </OnboardingProvider>\n      ) : null}\n    </OptionsContainer>\n  );\n};\n\nexport function OptionsContainer({\n  innerRef,\n  children,\n}: {\n  innerRef?: any;\n  children: React.ReactNode;\n}) {\n  const theme = useCustomTheme();\n  return (\n    <div\n      style={{\n        backgroundColor: \"white\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          margin: \"0 auto\",\n          overflow: \"hidden\",\n          boxShadow: \"0px 4px 20px rgba(0, 0, 0, 0.25)\",\n          width: \"100vw\",\n          height: \"100vh\",\n          background: `\n            radial-gradient(farthest-side at 0 0, #6360FF, rgba(255,255,255,0) 100%),\n            radial-gradient(farthest-side at 100% 0, #C061F7, rgba(255,255,255,0) 100%),\n            radial-gradient(farthest-side at 0 100%, #28DBD1 25%, rgba(255,255,255,0) 100%),\n            radial-gradient(farthest-side at 100% 100%, #FE6F5C 25%, rgba(255,255,255,0) 100%)`,\n        }}\n      >\n        <div\n          ref={innerRef}\n          style={{\n            width: `${EXTENSION_WIDTH}px`,\n            height: `${EXTENSION_HEIGHT}px`,\n            display: \"flex\",\n            flexDirection: \"column\",\n            margin: \"0 auto\",\n            borderRadius: \"12px\",\n            overflow: \"hidden\",\n            boxShadow: \"0px 4px 20px rgba(0, 0, 0, 0.25)\",\n            background: theme.custom.colors.backgroundBackdrop,\n            position: \"relative\",\n          }}\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function OnboardingMenu({\n  containerRef,\n  menuOpen,\n  setMenuOpen,\n}: {\n  containerRef: MutableRefObject<any>;\n  menuOpen: boolean;\n  setMenuOpen: Dispatch<SetStateAction<boolean>>;\n}) {\n  const theme = useCustomTheme();\n  return (\n    <Toolbar\n      sx={{\n        display: \"flex\",\n        flexDirection: \"row-reverse\",\n        padding: \"0 !important\",\n        minHeight: \"0 !important\",\n        height: NAV_BAR_HEIGHT,\n      }}\n    >\n      <IconButton\n        disableRipple\n        onClick={() => setMenuOpen(true)}\n        sx={{ padding: 0 }}\n      >\n        <Menu sx={{ color: theme.custom.colors.icon }} />\n      </IconButton>\n      <WithContaineredDrawer\n        containerRef={containerRef}\n        openDrawer={menuOpen}\n        setOpenDrawer={setMenuOpen}\n        paperStyles={{\n          borderRadius: \"12px\",\n          background: theme.custom.colors.backgroundBackdrop,\n        }}\n        backdropStyles={{ borderRadius: \"12px\" }}\n      >\n        <OnboardingMenuList />\n      </WithContaineredDrawer>\n    </Toolbar>\n  );\n}\n\nconst useStyles = styles(() => ({\n  listItemRoot: {\n    backgroundColor: \"transparent !important\",\n  },\n}));\n\nfunction OnboardingMenuList() {\n  const classes = useStyles();\n  const theme = useCustomTheme();\n  const options = [\n    {\n      icon: <Lock style={{ color: theme.custom.colors.secondary }} />,\n      text: \"Backpack.app\",\n      onClick: () => window.open(BACKPACK_LINK, \"_blank\"),\n    },\n    {\n      icon: <Twitter style={{ color: theme.custom.colors.secondary }} />,\n      text: \"Twitter\",\n      onClick: () => window.open(TWITTER_LINK, \"_blank\"),\n    },\n    {\n      icon: <DiscordIcon fill={theme.custom.colors.secondary} />,\n      text: \"Need help? Hop into Discord\",\n      onClick: () => window.open(DISCORD_INVITE_LINK, \"_blank\"),\n    },\n  ];\n\n  return (\n    <Box sx={{ color: theme.custom.colors.fontColor }}>\n      <List\n        style={{\n          marginLeft: \"16px\",\n          marginRight: \"16px\",\n          marginTop: \"40px\",\n          marginBottom: \"40px\",\n          background: theme.custom.colors.nav,\n          border: theme.custom.colors.borderFull,\n        }}\n      >\n        {options.map((o, idx) => (\n          <ListItem\n            onClick={o.onClick}\n            key={o.text}\n            style={{\n              height: \"44px\",\n              display: \"flex\",\n            }}\n            isLast={idx === options.length - 1}\n            borderColor={theme.custom.colors.nav}\n            classes={{\n              root: classes.listItemRoot,\n            }}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                flexDirection: \"column\",\n              }}\n            >\n              {o.icon}\n            </div>\n            <ListItemText\n              sx={{\n                marginLeft: \"8px\",\n                fontSize: \"16px\",\n                lineHeight: \"24px\",\n                fontWeight: 500,\n              }}\n              primary={o.text}\n            />\n\n            <CallMade\n              style={{\n                flexShrink: 1,\n                alignSelf: \"center\",\n                color: theme.custom.colors.secondary,\n              }}\n            />\n          </ListItem>\n        ))}\n      </List>\n    </Box>\n  );\n}\n","import { EmptyState } from \"@coral-xyz/react-common\";\nimport ErrorOutlineIcon from \"@mui/icons-material/ErrorOutline\";\n\nexport const AlreadyOnboarded = () => {\n  return (\n    <EmptyState\n      icon={(props: any) => <ErrorOutlineIcon {...props} />}\n      title=\"Already setup\"\n      subtitle=\"Your Backpack has already been setup. If you want to set it up again, reset it first.\"\n      buttonText=\"Close\"\n      onClick={window.close}\n    />\n  );\n};\n","import { Blockchain } from \"@coral-xyz/common\";\nimport { PrimaryButton } from \"@coral-xyz/react-common\";\nimport { Box, Grid, Typography } from \"@mui/material\";\n\nimport { Header, SubtextParagraph } from \"../../common\";\nimport {\n  BscIcon,\n  EthereumIconOnboarding as EthereumIcon,\n  PolygonIcon,\n  SolanaIconOnboarding as SolanaIcon,\n} from \"../../common/Icon\";\nimport { ActionCard } from \"../../common/Layout/ActionCard\";\n\nexport const BlockchainSelector = ({\n  selectedBlockchains,\n  onClick,\n  onNext,\n  isRecovery = false,\n}: {\n  selectedBlockchains: Array<Blockchain>;\n  onClick: (blockchain: Blockchain) => void;\n  onNext: () => void;\n  isRecovery?: boolean;\n}) => {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <Box>\n        <Box\n          sx={{\n            marginLeft: \"24px\",\n            marginRight: \"24px\",\n            marginTop: \"24px\",\n          }}\n        >\n          {isRecovery ? (\n            <>\n              <Header text=\"Which network would you like to use to recover your username?\" />\n              <SubtextParagraph>\n                Select one. You can add more networks after you've recovered\n                your username.\n              </SubtextParagraph>\n            </>\n          ) : (\n            <>\n              <Header text=\"Which networks would you like Backpack to use?\" />\n              <SubtextParagraph>\n                Select one or more. You can change this later in the settings\n                menu.\n              </SubtextParagraph>\n            </>\n          )}\n        </Box>\n        <Box style={{ padding: \"0 16px 16px\" }}>\n          <Grid container spacing={1.5}>\n            <Grid item xs={6}>\n              <ActionCard\n                icon={<EthereumIcon />}\n                checked={selectedBlockchains.includes(Blockchain.ETHEREUM)}\n                text=\"Ethereum\"\n                onClick={() => onClick(Blockchain.ETHEREUM)}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <ActionCard\n                icon={<SolanaIcon />}\n                checked={selectedBlockchains.includes(Blockchain.SOLANA)}\n                text=\"Eclipse\"\n                onClick={() => onClick(Blockchain.SOLANA)}\n              />\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n      <Box style={{ padding: \"16px\" }}>\n        <PrimaryButton\n          label=\"Next\"\n          onClick={onNext}\n          disabled={selectedBlockchains.length === 0}\n        />\n      </Box>\n    </Box>\n  );\n};\n\nfunction SoonBadge() {\n  return (\n    <div\n      style={{\n        paddingLeft: \"8px\",\n        paddingRight: \"8px\",\n        paddingTop: \"2px\",\n        paddingBottom: \"2px\",\n        backgroundColor: \"rgb(206, 121, 7, 0.15)\",\n        height: \"20px\",\n        borderRadius: \"10px\",\n        display: \"inline-block\",\n        marginLeft: \"4px\",\n      }}\n    >\n      <Typography\n        style={{\n          color: \"#EFA411\",\n          fontSize: \"12px\",\n          lineHeight: \"16px\",\n          fontWeight: 600,\n        }}\n      >\n        soon\n      </Typography>\n    </div>\n  );\n}\n","import { PrimaryButton } from \"@coral-xyz/react-common\";\nimport { Box } from \"@mui/material\";\n\nimport { SubtextParagraph } from \"../../common\";\nimport { BackpackHeader } from \"../../Locked\";\n\nexport const CreateOrImportWallet = ({\n  onNext,\n}: {\n  onNext: (data: any) => void;\n}) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        flexDirection: \"column\",\n        height: \"100%\",\n      }}\n    >\n      <Box style={{ flex: 1, textAlign: \"center\", padding: \"32px 16px 0px\" }}>\n        <BackpackHeader disableUsername />\n      </Box>\n      <Box\n        style={{\n          padding: \"0 16px 16px\",\n          textAlign: \"center\",\n          cursor: \"pointer\",\n        }}\n      >\n        <Box sx={{ mt: \"24px\" }}>\n          <PrimaryButton\n            label=\"Create a new wallet\"\n            onClick={() =>\n              onNext({ action: \"create\", keyringType: \"mnemonic\" })\n            }\n          />\n        </Box>\n        <Box sx={{ mt: \"16px\" }}>\n          <SubtextParagraph onClick={() => onNext({ action: \"import\" })}>\n            I already have a wallet\n          </SubtextParagraph>\n        </Box>\n      </Box>\n    </div>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { BrowserRuntimeExtension, XNFT_GG_LINK } from \"@coral-xyz/common\";\nimport { Loading } from \"@coral-xyz/react-common\";\nimport {\n  useBackgroundClient,\n  useKeyringStoreState,\n  useOnboarding,\n} from \"@coral-xyz/recoil\";\n\nimport {\n  registerNotificationServiceWorker,\n  saveSubscription,\n} from \"../../../permissions/utils\";\nimport { SetupComplete } from \"../../common/Account/SetupComplete\";\n\nexport const Finish = ({ isAddingAccount }: { isAddingAccount?: boolean }) => {\n  // This is a mitigation to ensure the keyring store doesn't lock before\n  // creating the user on the server.\n  //\n  // Would be better (though probably not a priority atm) to ensure atomicity.\n  // E.g. we could generate the UUID here on the client, create the keyring store,\n  // and only then create the user on the server. If the server fails, then\n  // rollback on the client.\n  //\n  // An improvement for the future!\n  useKeyringStoreState();\n  const [loading, setLoading] = useState(true);\n  const { onboardingData, maybeCreateUser } = useOnboarding();\n  const background = useBackgroundClient();\n\n  const registerSubscription = async () => {\n    try {\n      const sub = await registerNotificationServiceWorker();\n      if (!sub) {\n        // Set appropriate app states\n        return;\n      }\n      await saveSubscription(sub);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      const res = await maybeCreateUser({ ...onboardingData, isAddingAccount });\n      if (!res.ok) {\n        if (\n          confirm(\n            \"There was an issue setting up your account. Please try again.\"\n          )\n        ) {\n          window.location.reload();\n        }\n      }\n      registerSubscription();\n      setLoading(false);\n    })();\n  }, [background, isAddingAccount, onboardingData, maybeCreateUser]);\n\n  return !loading ? (\n    <SetupComplete\n      onClose={() => {\n        BrowserRuntimeExtension.closeActiveTab();\n        window.open(XNFT_GG_LINK, \"_blank\");\n      }}\n    />\n  ) : (\n    <Loading />\n  );\n};\n","import { type FormEvent, useCallback } from \"react\";\nimport { PrimaryButton } from \"@coral-xyz/react-common\";\nimport { Box } from \"@mui/material\";\n\nimport { SubtextParagraph } from \"../../common\";\nimport { BackpackHeader } from \"../../Locked\";\n\nconst WAITLIST_RES_ID_KEY = \"waitlist-form-res-id\";\n\nexport const setWaitlistId = (responseId: string) =>\n  window.localStorage.setItem(WAITLIST_RES_ID_KEY, responseId);\n\nexport const getWaitlistId = () =>\n  window.localStorage.getItem(WAITLIST_RES_ID_KEY) ?? undefined;\n\nexport const InviteCodeForm = ({\n  onClickRecover,\n  onSubmit,\n}: {\n  onClickRecover: () => void;\n  onSubmit: (inviteCode: string) => void;\n}) => {\n  const handleSubmit = useCallback(async (e: FormEvent) => {\n    e.preventDefault();\n    const inviteCode = \"c841a546-4898-4c63-8075-01273be0fad4\";\n    onSubmit(inviteCode);\n  }, []);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        flexDirection: \"column\",\n        height: \"100%\",\n      }}\n    >\n      <Box\n        style={{\n          flex: 1,\n          textAlign: \"center\",\n          padding: \"32px 16px 0\",\n        }}\n      >\n        <BackpackHeader disableUsername />\n      </Box>\n\n      <Box\n        style={{\n          padding: \"0 16px 36px\",\n          paddingBottom: 0,\n          marginTop: 0,\n        }}\n      >\n        <Box style={{ textAlign: \"center\", cursor: \"pointer\" }}>\n          <Box style={{ marginTop: 24 }}>\n            <PrimaryButton\n              label=\"Create account\"\n              type=\"submit\"\n              onClick={handleSubmit}\n            />\n          </Box>\n          <Box\n            style={{\n              marginTop: 24,\n              marginBottom: 36,\n            }}\n          >\n            <SubtextParagraph onClick={onClickRecover}>\n              I already have an account\n            </SubtextParagraph>\n          </Box>\n        </Box>\n      </Box>\n    </div>\n  );\n};\n","import { useState } from \"react\";\nimport type { KeyringType } from \"@coral-xyz/common\";\nimport { toTitleCase } from \"@coral-xyz/common\";\nimport {\n  HardwareWalletIcon,\n  PrimaryButton,\n  SecondaryButton,\n} from \"@coral-xyz/react-common\";\nimport { Box } from \"@mui/material\";\n\nimport { Header, HeaderIcon, SubtextParagraph } from \"../../common\";\n\nexport const KeyringTypeSelector = ({\n  action,\n  onNext,\n}: {\n  action: \"create\" | \"import\" | \"recover\" | string;\n  onNext: (keyringType: KeyringType) => void;\n}) => {\n  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        flexDirection: \"column\",\n        height: \"100%\",\n      }}\n    >\n      <Box sx={{ margin: \"56px 24px 0 24px\", textAlign: \"center\" }}>\n        <HeaderIcon icon={<HardwareWalletIcon />} />\n        {action === \"create\" ? (\n          <>\n            <Header text=\"Create a new wallet\" />\n            <SubtextParagraph>\n              Choose a wallet type. If you're not sure, using a recovery phrase\n              is the most common option.\n            </SubtextParagraph>\n          </>\n        ) : null}\n        {action === \"import\" ? (\n          <>\n            <Header text=\"Import an existing wallet\" />\n            <SubtextParagraph>\n              Choose a method to import your wallet.\n            </SubtextParagraph>\n          </>\n        ) : null}\n        {action === \"recover\" ? (\n          <>\n            <Header text=\"Recover a username\" />\n            <SubtextParagraph>\n              Choose a method to recover your username.\n            </SubtextParagraph>\n          </>\n        ) : null}\n      </Box>\n      <Box\n        style={{\n          padding: \"0 16px 16px\",\n          textAlign: \"center\",\n          cursor: \"pointer\",\n        }}\n      >\n        <Box style={{ marginBottom: \"16px\" }}>\n          <PrimaryButton\n            label={`${toTitleCase(action)} with secret phrase`}\n            onClick={() => onNext(\"mnemonic\")}\n          />\n        </Box>\n        {showAdvancedOptions ? (\n          <>\n            {action === \"import\" || action === \"recover\" ? (\n              <Box style={{ marginBottom: \"16px\" }}>\n                <SecondaryButton\n                  label={`${toTitleCase(action)} with private key`}\n                  onClick={() => onNext(\"private-key\")}\n                />\n              </Box>\n            ) : null}\n            <Box style={{ marginBottom: \"16px\" }}>\n              <SecondaryButton\n                label={\n                  action === \"recover\"\n                    ? \"Recover with hardware wallet\"\n                    : \"I have a hardware wallet\"\n                }\n                onClick={() => onNext(\"ledger\")}\n              />\n            </Box>\n            <SubtextParagraph onClick={() => setShowAdvancedOptions(false)}>\n              Hide advanced options\n            </SubtextParagraph>\n          </>\n        ) : (\n          <SubtextParagraph onClick={() => setShowAdvancedOptions(true)}>\n            Show advanced options\n          </SubtextParagraph>\n        )}\n      </Box>\n    </div>\n  );\n};\n","// This component searches a given mnemonic for a public key and displays\n// a loading indicator until it is found (or an error if it not found).\n\nimport { useEffect, useState } from \"react\";\nimport type { ServerPublicKey, WalletDescriptor } from \"@coral-xyz/common\";\nimport {\n  getRecoveryPaths,\n  UI_RPC_METHOD_PREVIEW_PUBKEYS,\n  walletAddressDisplay,\n} from \"@coral-xyz/common\";\nimport { Loading, PrimaryButton } from \"@coral-xyz/react-common\";\nimport { useBackgroundClient } from \"@coral-xyz/recoil\";\nimport { Box } from \"@mui/material\";\n\nimport { Header, SubtextParagraph } from \"../../common\";\n\nexport const MnemonicSearch = ({\n  serverPublicKeys,\n  mnemonic,\n  onNext,\n  onRetry,\n}: {\n  serverPublicKeys: Array<ServerPublicKey>;\n  mnemonic: string;\n  onNext: (walletDescriptors: Array<WalletDescriptor>) => void;\n  onRetry: () => void;\n}) => {\n  const [error, setError] = useState(false);\n  const background = useBackgroundClient();\n\n  useEffect(() => {\n    (async () => {\n      const walletDescriptors: Array<WalletDescriptor> = [];\n      const blockchains = [\n        ...new Set(serverPublicKeys.map((x) => x.blockchain)),\n      ];\n      for (const blockchain of blockchains) {\n        const recoveryPaths = getRecoveryPaths(blockchain);\n        const publicKeys = await background.request({\n          method: UI_RPC_METHOD_PREVIEW_PUBKEYS,\n          params: [blockchain, mnemonic, recoveryPaths],\n        });\n        const searchPublicKeys = serverPublicKeys\n          .filter((b) => b.blockchain === blockchain)\n          .map((p) => p.publicKey);\n        for (const publicKey of searchPublicKeys) {\n          const index = publicKeys.findIndex((p: string) => p === publicKey);\n          if (index !== -1) {\n            walletDescriptors.push({\n              blockchain,\n              derivationPath: recoveryPaths[index],\n              publicKey,\n            });\n          }\n        }\n      }\n      if (walletDescriptors.length > 0) {\n        onNext(walletDescriptors);\n      } else {\n        setError(true);\n      }\n    })();\n  }, [background, serverPublicKeys, mnemonic, onNext]);\n\n  if (!error) {\n    return <Loading />;\n  }\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <Box sx={{ margin: \"24px\" }}>\n        <Header text=\"Unable to recover wallet\" />\n        <SubtextParagraph>\n          {serverPublicKeys.length === 1 ? (\n            <>\n              We couldn't find the public key{\" \"}\n              {walletAddressDisplay(serverPublicKeys[0].publicKey)} using your\n              recovery phrase.\n            </>\n          ) : (\n            <>We couldn't find any wallets using your recovery phrase.</>\n          )}\n        </SubtextParagraph>\n      </Box>\n      <Box\n        sx={{\n          marginLeft: \"16px\",\n          marginRight: \"16px\",\n          marginBottom: \"16px\",\n        }}\n      >\n        <PrimaryButton label=\"Retry\" onClick={onRetry} />\n      </Box>\n    </Box>\n  );\n};\n","import type { CSSProperties } from \"react\";\nimport { PrimaryButton, SecondaryButton } from \"@coral-xyz/react-common\";\nimport { useCustomTheme } from \"@coral-xyz/themes\";\nimport { Box } from \"@mui/material\";\n\nimport {\n  registerNotificationServiceWorker,\n  saveSubscription,\n} from \"../../../permissions/utils\";\nimport { Header, SubtextParagraph } from \"../../common\";\n\nexport const NotificationsPermission = ({ onNext }: { onNext: () => void }) => {\n  const theme = useCustomTheme();\n\n  const requestNotificationPermission = async (): Promise<boolean> => {\n    const permission = await window.Notification.requestPermission();\n    return permission === \"granted\";\n  };\n\n  const handleAllow = async () => {\n    await requestNotificationPermission();\n\n    onNext();\n  };\n\n  const handleDisable = () => {\n    onNext();\n  };\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        justifyContent: \"space-between\",\n        color: theme.custom.colors.nav,\n      }}\n    >\n      <Box>\n        <Box sx={{ mt: \"24px\", mx: \"24px\" }}>\n          <Header text=\"Allow notifications?\" />\n          <SubtextParagraph style={{ marginBottom: \"20px\" }}>\n            These appear for messages and friend requests.\n          </SubtextParagraph>\n        </Box>\n        <Box sx={{ mx: \"20px\" }}>\n          <SkeletonNotifications style={{ width: \"100%\" }} />\n        </Box>\n      </Box>\n      <Box sx={{ mx: \"16px\", mb: \"16px\", display: \"flex\", gap: \"10px\" }}>\n        <SecondaryButton\n          label=\"Disable\"\n          style={{ background: \"transparent\" }}\n          buttonLabelStyle={{ fontWeight: 600 }}\n          onClick={handleDisable}\n        />\n        <PrimaryButton\n          label=\"Allow\"\n          buttonLabelStyle={{ fontWeight: 600 }}\n          onClick={handleAllow}\n        />\n      </Box>\n    </Box>\n  );\n};\n\nconst SkeletonNotifications = ({ style }: { style?: CSSProperties }) => (\n  <svg\n    style={{ height: \"inherit\", width: \"inherit\", ...style }}\n    width=\"343\"\n    height=\"194\"\n    viewBox=\"0 0 343 194\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g clipPath=\"url(#clip0_18596_144803)\">\n      <rect width=\"343\" height=\"64\" fill=\"white\" />\n      <circle cx=\"28\" cy=\"32\" r=\"16\" fill=\"#DFE0E6\" />\n      <rect x=\"52\" y=\"20\" width=\"72\" height=\"8\" rx=\"4\" fill=\"#DFE0E6\" />\n      <rect x=\"52\" y=\"36\" width=\"176\" height=\"8\" rx=\"4\" fill=\"#DFE0E6\" />\n      <rect x=\"291\" y=\"20\" width=\"40\" height=\"8\" rx=\"4\" fill=\"#DFE0E6\" />\n      <g opacity=\"0.5\">\n        <rect\n          width=\"343\"\n          height=\"64\"\n          transform=\"translate(0 65)\"\n          fill=\"white\"\n        />\n        <circle cx=\"28\" cy=\"97\" r=\"16\" fill=\"#DFE0E6\" />\n        <rect x=\"52\" y=\"85\" width=\"72\" height=\"8\" rx=\"4\" fill=\"#DFE0E6\" />\n        <rect x=\"52\" y=\"101\" width=\"176\" height=\"8\" rx=\"4\" fill=\"#DFE0E6\" />\n        <rect x=\"291\" y=\"85\" width=\"40\" height=\"8\" rx=\"4\" fill=\"#DFE0E6\" />\n      </g>\n      <g opacity=\"0.5\">\n        <rect\n          width=\"343\"\n          height=\"64\"\n          transform=\"translate(0 130)\"\n          fill=\"white\"\n        />\n        <circle cx=\"28\" cy=\"162\" r=\"16\" fill=\"#DFE0E6\" />\n        <rect x=\"52\" y=\"150\" width=\"72\" height=\"8\" rx=\"4\" fill=\"#DFE0E6\" />\n        <rect x=\"52\" y=\"166\" width=\"176\" height=\"8\" rx=\"4\" fill=\"#DFE0E6\" />\n        <rect x=\"291\" y=\"150\" width=\"40\" height=\"8\" rx=\"4\" fill=\"#DFE0E6\" />\n      </g>\n    </g>\n    <rect\n      x=\"1\"\n      y=\"1\"\n      width=\"341\"\n      height=\"192\"\n      rx=\"11\"\n      stroke=\"#F0F0F2\"\n      strokeWidth=\"2\"\n    />\n    <defs>\n      <clipPath id=\"clip0_18596_144803\">\n        <rect width=\"343\" height=\"194\" rx=\"12\" fill=\"white\" />\n      </clipPath>\n    </defs>\n  </svg>\n);\n","import { useEffect, useState } from \"react\";\nimport type {\n  KeyringType,\n  PrivateKeyWalletDescriptor,\n  SignedWalletDescriptor,\n  WalletDescriptor,\n} from \"@coral-xyz/common\";\nimport { getCreateMessage } from \"@coral-xyz/common\";\nimport { useOnboarding, useRpcRequests } from \"@coral-xyz/recoil\";\n\nimport { useSteps } from \"../../../hooks/useSteps\";\nimport { CreatePassword } from \"../../common/Account/CreatePassword\";\nimport { ImportWallets } from \"../../common/Account/ImportWallets\";\nimport { MnemonicInput } from \"../../common/Account/MnemonicInput\";\nimport { PrivateKeyInput } from \"../../common/Account/PrivateKeyInput\";\nimport { WithContaineredDrawer } from \"../../common/Layout/Drawer\";\nimport { NavBackButton, WithNav } from \"../../common/Layout/Nav\";\n\nimport { AlreadyOnboarded } from \"./AlreadyOnboarded\";\nimport { BlockchainSelector } from \"./BlockchainSelector\";\nimport { CreateOrImportWallet } from \"./CreateOrImportWallet\";\nimport { Finish } from \"./Finish\";\nimport { HardwareOnboard } from \"./HardwareOnboard\";\nimport { InviteCodeForm } from \"./InviteCodeForm\";\nimport { KeyringTypeSelector } from \"./KeyringTypeSelector\";\nimport { NotificationsPermission } from \"./NotificationsPermission\";\nimport { UsernameForm } from \"./UsernameForm\";\n\nexport const OnboardAccount = ({\n  onRecover,\n  containerRef,\n  navProps,\n  isAddingAccount,\n  isOnboarded,\n}: {\n  onRecover: () => void;\n  containerRef: any;\n  navProps: any;\n  isAddingAccount?: boolean;\n  isOnboarded?: boolean;\n}) => {\n  const { step, nextStep, prevStep } = useSteps();\n  const [openDrawer, setOpenDrawer] = useState(false);\n  const {\n    onboardingData,\n    setOnboardingData,\n    handleSelectBlockchain,\n    handlePrivateKeyInput,\n  } = useOnboarding();\n  const { signMessageForWallet } = useRpcRequests();\n  const {\n    inviteCode,\n    action,\n    keyringType,\n    mnemonic,\n    blockchain,\n    signedWalletDescriptors,\n    selectedBlockchains,\n  } = onboardingData;\n\n  useEffect(() => {\n    // Reset blockchain keyrings on certain changes that invalidate the addresses\n    setOnboardingData({\n      signedWalletDescriptors: [],\n    });\n  }, [action, keyringType, mnemonic, setOnboardingData]);\n\n  const steps = [\n    <InviteCodeForm\n      key=\"InviteCodeForm\"\n      onClickRecover={onRecover}\n      onSubmit={(inviteCode) => {\n        setOnboardingData({ inviteCode });\n        nextStep();\n      }}\n    />,\n    <UsernameForm\n      key=\"UsernameForm\"\n      inviteCode={inviteCode!}\n      onNext={(username) => {\n        setOnboardingData({ username });\n        nextStep();\n      }}\n    />,\n    <CreateOrImportWallet\n      key=\"CreateOrImportWallet\"\n      onNext={(data) => {\n        setOnboardingData({ ...data });\n        nextStep();\n      }}\n    />,\n    ...(action === \"import\"\n      ? [\n        <KeyringTypeSelector\n          key=\"KeyringTypeSelector\"\n          action={action}\n          onNext={(keyringType: KeyringType) => {\n              setOnboardingData({ keyringType });\n              nextStep();\n            }}\n          />,\n        ]\n      : []),\n    // Show the seed phrase if we are creating based on a mnemonic\n    ...(keyringType === \"mnemonic\"\n      ? [\n        <MnemonicInput\n          key=\"MnemonicInput\"\n          readOnly={action === \"create\"}\n          buttonLabel={action === \"create\" ? \"Next\" : \"Import\"}\n          onNext={async (mnemonic) => {\n              setOnboardingData({ mnemonic });\n              nextStep();\n            }}\n          />,\n        ]\n      : []),\n    ...(keyringType === \"private-key\"\n      ? // If keyring type is a private key we don't need to display the blockchain\n        // selector\n        [\n          <PrivateKeyInput\n            key=\"PrivateKeyInput\"\n            onNext={(result: PrivateKeyWalletDescriptor) => {\n              handlePrivateKeyInput(result);\n              nextStep();\n            }}\n            onboarding\n          />,\n        ]\n      : [\n        <BlockchainSelector\n          key=\"BlockchainSelector\"\n          selectedBlockchains={selectedBlockchains}\n          onClick={async (blockchain) => {\n              await handleSelectBlockchain({\n                blockchain,\n              });\n              // If wallet is a ledger, step through the ledger onboarding flow\n              // OR if action is an import then open the drawer with the import accounts\n              // component\n              if (keyringType === \"ledger\" || action === \"import\") {\n                setOpenDrawer(true);\n              }\n            }}\n          onNext={nextStep}\n          />,\n        ]),\n    ...(!isAddingAccount\n      ? [\n        <CreatePassword\n          key=\"CreatePassword\"\n          onNext={async (password) => {\n              setOnboardingData({ password });\n              nextStep();\n            }}\n          />,\n        ]\n      : []),\n    <NotificationsPermission key=\"NotificationsPermission\" onNext={nextStep} />,\n    <Finish key=\"Finish\" isAddingAccount={isAddingAccount} />,\n  ];\n\n  if (isOnboarded && step !== steps.length - 1) {\n    return <AlreadyOnboarded />;\n  }\n\n  return (\n    <WithNav\n      navButtonLeft={\n        step > 0 && step !== steps.length - 1 ? (\n          <NavBackButton onClick={prevStep} />\n        ) : undefined\n      }\n      {...navProps}\n      // Only display the onboarding menu on the first step\n      navButtonRight={step === 0 ? navProps.navButtonRight : undefined}\n    >\n      {steps[step]}\n\n      <WithContaineredDrawer\n        containerRef={containerRef}\n        openDrawer={openDrawer}\n        setOpenDrawer={setOpenDrawer}\n        paperStyles={{\n          height: \"calc(100% - 56px)\",\n          borderTopLeftRadius: \"12px\",\n          borderTopRightRadius: \"12px\",\n        }}\n      >\n        {keyringType === \"ledger\" ? (\n          <HardwareOnboard\n            blockchain={blockchain!}\n            // @ts-expect-error not assignable to type string ...\n            action={action}\n            signMessage={(publicKey: string) => getCreateMessage(publicKey)}\n            signText=\"Sign the message to authenticate with Backpack.\"\n            onClose={() => setOpenDrawer(false)}\n            onComplete={(signedWalletDescriptor: SignedWalletDescriptor) => {\n              setOnboardingData({\n                signedWalletDescriptors: [\n                  ...signedWalletDescriptors,\n                  signedWalletDescriptor,\n                ],\n              });\n              setOpenDrawer(false);\n            }}\n          />\n        ) : (\n          <ImportWallets\n            blockchain={blockchain!}\n            mnemonic={mnemonic!}\n            allowMultiple={false}\n            onNext={async (walletDescriptors: Array<WalletDescriptor>) => {\n              // Should only be one public key path\n              const walletDescriptor = walletDescriptors[0];\n              const signature = await signMessageForWallet(\n                walletDescriptor.blockchain,\n                walletDescriptor.publicKey,\n                getCreateMessage(walletDescriptor.publicKey),\n                {\n                  mnemonic: mnemonic!,\n                  signedWalletDescriptors: [\n                    { ...walletDescriptor, signature: \"\" },\n                  ],\n                }\n              );\n              setOnboardingData({\n                signedWalletDescriptors: [\n                  ...signedWalletDescriptors,\n                  {\n                    ...walletDescriptor,\n                    signature,\n                  },\n                ],\n              });\n              setOpenDrawer(false);\n            }}\n          />\n        )}\n      </WithContaineredDrawer>\n    </WithNav>\n  );\n};\n","import type {\n  KeyringType,\n  PrivateKeyWalletDescriptor,\n  ServerPublicKey,\n  SignedWalletDescriptor,\n  WalletDescriptor,\n} from \"@coral-xyz/common\";\nimport { Blockchain, getAuthMessage } from \"@coral-xyz/common\";\nimport { useOnboarding, useRpcRequests } from \"@coral-xyz/recoil\";\n\nimport { useSteps } from \"../../../hooks/useSteps\";\nimport { CreatePassword } from \"../../common/Account/CreatePassword\";\nimport { MnemonicInput } from \"../../common/Account/MnemonicInput\";\nimport { PrivateKeyInput } from \"../../common/Account/PrivateKeyInput\";\nimport { NavBackButton, WithNav } from \"../../common/Layout/Nav\";\nimport { useHardwareOnboardSteps } from \"../../Onboarding/pages/HardwareOnboard\";\n\nimport { AlreadyOnboarded } from \"./AlreadyOnboarded\";\nimport { Finish } from \"./Finish\";\nimport { KeyringTypeSelector } from \"./KeyringTypeSelector\";\nimport { MnemonicSearch } from \"./MnemonicSearch\";\nimport { NotificationsPermission } from \"./NotificationsPermission\";\nimport { RecoverAccountUsernameForm } from \"./RecoverAccountUsernameForm\";\nimport { TwitterConnect } from \"./TwitterConnect\";\n\nexport const RecoverAccount = ({\n  onClose,\n  navProps,\n  isAddingAccount,\n  isOnboarded,\n}: {\n  onClose: () => void;\n  navProps: any;\n  isAddingAccount?: boolean;\n  isOnboarded?: boolean;\n}) => {\n  const { step, nextStep, prevStep } = useSteps();\n  const { signMessageForWallet } = useRpcRequests();\n  const { onboardingData, setOnboardingData, handlePrivateKeyInput } =\n    useOnboarding();\n  const {\n    userId,\n    keyringType,\n    mnemonic,\n    signedWalletDescriptors,\n    serverPublicKeys,\n  } = onboardingData;\n  const authMessage = userId ? getAuthMessage(userId) : \"\";\n  const hardwareOnboardSteps = useHardwareOnboardSteps({\n    blockchain:\n      serverPublicKeys.length > 0\n        ? serverPublicKeys[0].blockchain!\n        : Blockchain.SOLANA, // TODO refactor out this default requirement\n    action: \"search\",\n    searchPublicKey:\n      serverPublicKeys.length > 0 ? serverPublicKeys[0].publicKey : undefined,\n    signMessage: authMessage,\n    signText: \"Sign the message to authenticate with Backpack\",\n    onComplete: (signedWalletDescriptor: SignedWalletDescriptor) => {\n      setOnboardingData({\n        signedWalletDescriptors: [\n          ...signedWalletDescriptors,\n          signedWalletDescriptor,\n        ],\n      });\n      nextStep();\n    },\n    nextStep,\n    prevStep,\n  });\n\n  const steps = [\n    // <TwitterConnect key=\"TwitterConnect\" />,\n    <RecoverAccountUsernameForm\n      key=\"RecoverAccountUsernameForm\"\n      onNext={(\n        userId: string,\n        username: string,\n        serverPublicKeys: ServerPublicKey[]\n      ) => {\n        setOnboardingData({ userId, username, serverPublicKeys });\n        nextStep();\n      }}\n    />,\n    <KeyringTypeSelector\n      key=\"KeyringTypeSelector\"\n      action=\"recover\"\n      onNext={(keyringType: KeyringType) => {\n        setOnboardingData({ keyringType });\n        nextStep();\n      }}\n    />,\n    ...(keyringType === \"mnemonic\"\n      ? [\n          // Using a mnemonic\n        <MnemonicInput\n          key=\"MnemonicInput\"\n          buttonLabel=\"Next\"\n          onNext={async (mnemonic: string) => {\n              setOnboardingData({ mnemonic });\n              nextStep();\n            }}\n          />,\n        <MnemonicSearch\n          key=\"MnemonicSearch\"\n          serverPublicKeys={serverPublicKeys!}\n          mnemonic={mnemonic!}\n          onRetry={prevStep}\n          onNext={async (walletDescriptors: Array<WalletDescriptor>) => {\n              const signedWalletDescriptors = await Promise.all(\n                walletDescriptors.map(async (w) => ({\n                  ...w,\n                  signature: await signMessageForWallet(\n                    w.blockchain,\n                    w.publicKey,\n                    authMessage,\n                    {\n                      mnemonic,\n                      signedWalletDescriptors: [{ ...w, signature: \"\" }],\n                    }\n                  ),\n                }))\n              );\n              setOnboardingData({ signedWalletDescriptors });\n              nextStep();\n            }}\n          />,\n        ]\n      : []),\n    ...(keyringType === \"ledger\" ? hardwareOnboardSteps : []),\n    ...(keyringType === \"private-key\"\n      ? [\n        <PrivateKeyInput\n          key=\"PrivateKeyInput\"\n          serverPublicKeys={serverPublicKeys}\n          onNext={async (result: PrivateKeyWalletDescriptor) => {\n              await handlePrivateKeyInput(result);\n              nextStep();\n            }}\n          onboarding\n          />,\n        ]\n      : []),\n    ...(!isAddingAccount\n      ? [\n        <CreatePassword\n          key=\"CreatePassword\"\n          onNext={async (password) => {\n              setOnboardingData({ password });\n              nextStep();\n            }}\n          />,\n        ]\n      : []),\n    <NotificationsPermission key=\"NotificationsPermission\" onNext={nextStep} />,\n    <Finish key=\"Finish\" isAddingAccount={isAddingAccount} />,\n  ];\n\n  // Cant go backwards from the last step as the keyring is already created\n  const isLastStep = step === steps.length - 1;\n  // Cant go backwards from the password step as can hit mnemonic search which\n  // auto progresses. This could be handled by jumping to a step.\n  const isPasswordStep = steps[step].type.name === \"CreatePassword\";\n  // Display message if already onboarded and not on last step\n  if (isOnboarded && !isLastStep) {\n    return <AlreadyOnboarded />;\n  }\n\n  return (\n    <WithNav\n      navButtonLeft={\n        !isLastStep && !isPasswordStep ? (\n          <NavBackButton onClick={step > 0 ? prevStep : onClose} />\n        ) : undefined\n      }\n      {...navProps}\n      // Only display the onboarding menu on the first step\n      navButtonRight={undefined}\n    >\n      {steps[step]}\n    </WithNav>\n  );\n};\n","import { type FormEvent, useCallback, useEffect, useState } from \"react\";\nimport type { ServerPublicKey } from \"@coral-xyz/common\";\nimport { BACKEND_API_URL } from \"@coral-xyz/common\";\nimport { PrimaryButton, TextInput } from \"@coral-xyz/react-common\";\nimport { useCustomTheme } from \"@coral-xyz/themes\";\nimport { AlternateEmail } from \"@mui/icons-material\";\nimport { Box, InputAdornment } from \"@mui/material\";\n\nimport { Header, SubtextParagraph } from \"../../common\";\n\nexport const RecoverAccountUsernameForm = ({\n  onNext,\n}: {\n  onNext: (\n    userId: string,\n    username: string,\n    serverPublicKeys: Array<ServerPublicKey>\n  ) => void;\n}) => {\n  const [username, setUsername] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const theme = useCustomTheme();\n\n  useEffect(() => {\n    // Clear error on username changes\n    setError(\"\");\n  }, [username]);\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent) => {\n      e.preventDefault();\n      try {\n        const response = await fetch(`${BACKEND_API_URL}/users/${username}`);\n        const json = await response.json();\n        if (!response.ok) throw new Error(json.msg);\n        // Use the first found public key\n        onNext(json.id, username, json.publicKeys);\n      } catch (err: any) {\n        setError(err.message || \"Something went wrong\");\n      }\n    },\n    [username]\n  );\n\n  return (\n    <form\n      noValidate\n      onSubmit={handleSubmit}\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <Box style={{ margin: \"24px\" }}>\n        <Header text=\"Username recovery\" />\n        <SubtextParagraph style={{ margin: \"16px 0\" }}>\n          Enter your username below, you will then be asked for your secret\n          recovery phrase to verify that you own the public key that was\n          initially associated with it.\n        </SubtextParagraph>\n      </Box>\n      <Box\n        style={{\n          marginLeft: \"16px\",\n          marginRight: \"16px\",\n          marginBottom: \"16px\",\n        }}\n      >\n        <TextInput\n          inputProps={{\n            name: \"username\",\n            autoComplete: \"off\",\n            spellCheck: \"false\",\n            autoFocus: true,\n          }}\n          placeholder=\"Username\"\n          type=\"text\"\n          value={username}\n          setValue={(e: any) => {\n            setUsername(\n              e.target.value.toLowerCase().replace(/[^a-z0-9_]/g, \"\")\n            );\n          }}\n          error={error ? true : false}\n          errorMessage={error}\n          startAdornment={\n            <InputAdornment position=\"start\">\n              <AlternateEmail\n                style={{\n                  color: theme.custom.colors.secondary,\n                  fontSize: 18,\n                  marginRight: -2,\n                  userSelect: \"none\",\n                }}\n              />\n            </InputAdornment>\n          }\n        />\n        <PrimaryButton\n          label=\"Continue\"\n          type=\"submit\"\n          style={{ marginTop: 8 }}\n          disabled={username.length < 3}\n        />\n      </Box>\n    </form>\n  );\n};\n","import { type FormEvent, useCallback, useEffect, useState } from \"react\";\nimport { PrimaryButton,TextInput } from \"@coral-xyz/react-common\";\nimport { useCustomTheme } from \"@coral-xyz/themes\";\nimport { AlternateEmail } from \"@mui/icons-material\";\nimport { Box, InputAdornment } from \"@mui/material\";\n\nimport { Header, SubtextParagraph } from \"../../common\";\n\nexport const UsernameForm = ({\n  inviteCode,\n  onNext,\n}: {\n  inviteCode: string;\n  onNext: (username: string) => void;\n}) => {\n  const [username, setUsername] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const theme = useCustomTheme();\n\n  useEffect(() => {\n    setError(\"\");\n  }, [username]);\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent) => {\n      e.preventDefault();\n\n      try {\n        const res = await fetch(`https://auth.xnfts.dev/users/${username}`, {\n          headers: {\n            \"x-backpack-invite-code\": String(inviteCode),\n          },\n        });\n        const json = await res.json();\n        if (!res.ok) throw new Error(json.message || \"There was an error\");\n\n        onNext(username);\n      } catch (err: any) {\n        setError(err.message);\n      }\n    },\n    [username]\n  );\n\n  return (\n    <form\n      noValidate\n      onSubmit={handleSubmit}\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <Box style={{ margin: \"24px\" }}>\n        <Header text=\"Claim your username\" />\n        <SubtextParagraph style={{ margin: \"16px 0\" }}>\n          Others can see and find you by this username, and it will be\n          associated with your primary wallet address.\n          <br />\n          <br />\n          Choose wisely if you'd like to remain anonymous.\n          <br />\n          <br />\n          Have fun!\n        </SubtextParagraph>\n      </Box>\n      <Box\n        style={{\n          marginLeft: \"16px\",\n          marginRight: \"16px\",\n          marginBottom: \"16px\",\n        }}\n      >\n        <Box style={{ marginBottom: \"16px\" }}>\n          <TextInput\n            inputProps={{\n              name: \"username\",\n              autoComplete: \"off\",\n              spellCheck: \"false\",\n              autoFocus: true,\n            }}\n            placeholder=\"Username\"\n            type=\"text\"\n            value={username}\n            setValue={(e) => {\n              setUsername(\n                e.target.value.toLowerCase().replace(/[^a-z0-9_]/g, \"\")\n              );\n            }}\n            error={error ? true : false}\n            errorMessage={error}\n            startAdornment={\n              <InputAdornment position=\"start\">\n                <AlternateEmail\n                  style={{\n                    color: theme.custom.colors.secondary,\n                    fontSize: 18,\n                    marginRight: -2,\n                    userSelect: \"none\",\n                  }}\n                />\n              </InputAdornment>\n            }\n          />\n        </Box>\n        <PrimaryButton label=\"Continue\" type=\"submit\" />\n      </Box>\n    </form>\n  );\n};\n","import { PrimaryButton,SuccessIcon } from \"@coral-xyz/react-common\";\nimport { Box } from \"@mui/material\";\n\nimport { Header, HeaderIcon, SubtextParagraph } from \"../../../../common\";\n\nexport function ConnectHardwareSuccess({ onNext }: { onNext: () => void }) {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <Box sx={{ margin: \"0 24px\" }}>\n        <HeaderIcon icon={<SuccessIcon />} />\n        <Header text=\"Hardware wallet connected\" />\n        <SubtextParagraph>\n          You can now access your hardware wallet with Backpack.\n        </SubtextParagraph>\n      </Box>\n      <Box\n        sx={{\n          marginLeft: \"16px\",\n          marginRight: \"16px\",\n          marginBottom: \"16px\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <PrimaryButton label=\"All done!\" onClick={onNext} />\n      </Box>\n    </Box>\n  );\n}\n","import type { Blockchain, SignedWalletDescriptor } from \"@coral-xyz/common\";\nimport {\n  getAddMessage,\n  UI_RPC_METHOD_BLOCKCHAIN_KEYRINGS_ADD,\n  UI_RPC_METHOD_LEDGER_IMPORT,\n} from \"@coral-xyz/common\";\nimport { useBackgroundClient, useEnabledBlockchains } from \"@coral-xyz/recoil\";\n\nimport { HardwareOnboard } from \"../../../../Onboarding/pages/HardwareOnboard\";\n\nimport { ConnectHardwareSuccess } from \"./ConnectHardwareSuccess\";\n\nexport function ConnectHardware({\n  blockchain,\n  action,\n  publicKey,\n  onComplete,\n}: {\n  blockchain: Blockchain;\n  action: \"create\" | \"import\" | \"search\";\n  createKeyring: boolean;\n  publicKey?: string;\n  onComplete: () => void;\n}) {\n  const background = useBackgroundClient();\n  const enabledBlockchains = useEnabledBlockchains();\n  const keyringExists = enabledBlockchains.includes(blockchain);\n\n  const handleHardwareOnboardComplete = async (\n    signedWalletDescriptor: SignedWalletDescriptor\n  ) => {\n    if (keyringExists) {\n      // Just import the wallet because the keyring already exists\n      await background.request({\n        method: UI_RPC_METHOD_LEDGER_IMPORT,\n        params: [signedWalletDescriptor],\n      });\n    } else {\n      await background.request({\n        method: UI_RPC_METHOD_BLOCKCHAIN_KEYRINGS_ADD,\n        params: [{ signedWalletDescriptors: [signedWalletDescriptor] }],\n      });\n    }\n  };\n\n  return (\n    <HardwareOnboard\n      blockchain={blockchain}\n      action={action}\n      signMessage={getAddMessage}\n      signText=\"Sign the message to add the wallet to your Backpack account.\"\n      successComponent={<ConnectHardwareSuccess onNext={onComplete} />}\n      searchPublicKey={publicKey}\n      onComplete={handleHardwareOnboardComplete}\n    />\n  );\n}\n","import { type FormEvent, useCallback, useEffect, useState } from \"react\";\nimport { BACKPACK_TERMS_OF_SERVICE } from \"@coral-xyz/common\";\nimport { PrimaryButton, TextInput } from \"@coral-xyz/react-common\";\nimport { useCustomTheme } from \"@coral-xyz/themes\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport { Box, IconButton, InputAdornment, Typography } from \"@mui/material\";\n\nimport { CheckboxForm, Header, SubtextParagraph } from \"../../common\";\n\nenum PasswordError {\n  TOO_SHORT,\n  NO_MATCH,\n}\n\nexport function CreatePassword({\n  onNext,\n}: {\n  onNext: (password: string) => void;\n}) {\n  const theme = useCustomTheme();\n  const [checked, setChecked] = useState(false);\n  const [password, setPassword] = useState(\"\");\n  const [passwordConfirm, setPasswordConfirm] = useState(\"\");\n  const [error, setError] = useState<PasswordError | null>(null);\n  const [showPassword, setShowPassword] = useState(false);\n\n  useEffect(() => {\n    setError(null);\n  }, [password, passwordConfirm]);\n\n  const next = useCallback(\n    async (e: FormEvent) => {\n      e.preventDefault();\n      if (password.length < 8) {\n        setError(PasswordError.TOO_SHORT);\n        return;\n      } else if (password !== passwordConfirm) {\n        setError(PasswordError.NO_MATCH);\n        return;\n      }\n      onNext(password);\n    },\n    [onNext, password, passwordConfirm]\n  );\n\n  const isNextDisabled = !checked;\n\n  return (\n    <form\n      noValidate\n      onSubmit={next}\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <Box\n        sx={{\n          marginTop: \"24px\",\n        }}\n      >\n        <Box\n          sx={{\n            marginLeft: \"24px\",\n            marginRight: \"24px\",\n          }}\n        >\n          <Header text=\"Create a password\" />\n          <SubtextParagraph style={{ marginTop: \"8px\", marginBottom: \"40px\" }}>\n            It should be at least 8 characters.\n            <br />\n            You’ll need this to unlock Backpack.\n          </SubtextParagraph>\n        </Box>\n        <Box\n          sx={{\n            marginLeft: \"16px\",\n            marginRight: \"16px\",\n          }}\n        >\n          <TextInput\n            autoFocus={!passwordConfirm}\n            inputProps={{ name: \"password\" }}\n            placeholder=\"Password\"\n            type={showPassword ? \"text\" : \"password\"}\n            value={password}\n            setValue={(e) => setPassword(e.target.value)}\n            error={error === PasswordError.TOO_SHORT}\n            endAdornment={\n              <InputAdornment position=\"end\">\n                <IconButton\n                  disableRipple\n                  sx={{ color: theme.custom.colors.icon }}\n                  onClick={() => setShowPassword(!showPassword)}\n                  onMouseDown={() => setShowPassword(!showPassword)}\n                  tabIndex={-1}\n                >\n                  {showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n          <TextInput\n            inputProps={{ name: \"password-confirmation\" }}\n            placeholder=\"Confirm Password\"\n            type={showPassword ? \"text\" : \"password\"}\n            value={passwordConfirm}\n            setValue={(e) => setPasswordConfirm(e.target.value)}\n            error={error === PasswordError.NO_MATCH}\n          />\n          {error !== null ? (\n            <Typography sx={{ color: theme.custom.colors.negative }}>\n              {\n                {\n                  [PasswordError.TOO_SHORT]:\n                    \"Your password must be at least 8 characters.\",\n                  [PasswordError.NO_MATCH]: \"Your passwords do not match.\",\n                }[error]\n              }\n            </Typography>\n          ) : null}\n        </Box>\n      </Box>\n      <Box\n        sx={{\n          marginLeft: \"16px\",\n          marginRight: \"16px\",\n          marginBottom: \"16px\",\n        }}\n      >\n        <Box\n          sx={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"30px\",\n          }}\n        >\n          <CheckboxForm\n            checked={checked}\n            setChecked={setChecked}\n            label={\n              <>\n                I agree to the{\" \"}\n                <span\n                  onClick={() => window.open(BACKPACK_TERMS_OF_SERVICE)}\n                  style={{ color: theme.custom.colors.brandColor }}\n                >\n                  terms of service\n                </span>\n              </>\n            }\n          />\n        </Box>\n        <PrimaryButton\n          disabled={isNextDisabled}\n          label=\"Next\"\n          type=\"submit\"\n          buttonLabelStyle={{\n            fontWeight: 600,\n          }}\n        />\n      </Box>\n    </form>\n  );\n}\n","import type { ReactNode } from \"react\";\nimport {\n  BACKPACK_FEATURE_XNFT,\n  DISCORD_INVITE_LINK,\n  TWITTER_LINK,\n  XNFT_GG_LINK,\n} from \"@coral-xyz/common\";\nimport {\n  DiscordIcon,\n  ExtensionIcon,\n  PinIcon,\n  PrimaryButton,\n  TwitterIcon,\n} from \"@coral-xyz/react-common\";\nimport { useCustomTheme } from \"@coral-xyz/themes\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n} from \"@mui/material\";\n\nimport { Header, SubtextParagraph } from \"../../common\";\nimport { AppStoreIcon } from \"../Icon\";\n\nexport function SetupComplete({ onClose }: { onClose: () => void }) {\n  const theme = useCustomTheme();\n\n  return (\n    <>\n      <div\n        style={{\n          position: \"fixed\",\n          top: \"16px\",\n          right: \"16px\",\n        }}\n      >\n        <PinNotification />\n      </div>\n      <Box\n        sx={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: \"100%\",\n          justifyContent: \"space-between\",\n          color: theme.custom.colors.nav,\n        }}\n      >\n        <Box>\n          <Box\n            sx={{\n              mt: \"24px\",\n              ml: \"24px\",\n              mr: \"24px\",\n            }}\n          >\n            <Header text=\"You've set up Backpack!\" />\n            <SubtextParagraph\n              style={{\n                marginBottom: \"25px\",\n              }}\n            >\n              We recommend downloading a few xNFTs to get started.\n            </SubtextParagraph>\n          </Box>\n          <Box\n            sx={{\n              ml: \"16px\",\n              mr: \"16px\",\n            }}\n          >\n            <Grid container spacing={1} columns={1}>\n              {BACKPACK_FEATURE_XNFT ? (\n                <Grid item xs={6}>\n                  <CallToAction\n                    icon={<AppStoreIcon />}\n                    title=\"Browse the xNFT library\"\n                    onClick={() => window.open(XNFT_GG_LINK, \"_blank\")}\n                  />\n                </Grid>\n              ) : null}\n              <Grid item xs={6}>\n                <CallToAction\n                  icon={<TwitterIcon fill=\"#1D9BF0\" />}\n                  title=\"Follow us on Twitter\"\n                  onClick={() => window.open(TWITTER_LINK, \"_blank\")}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <CallToAction\n                  icon={<DiscordIcon fill=\"#5865F2\" />}\n                  title=\"Join Discord\"\n                  onClick={() => window.open(DISCORD_INVITE_LINK, \"_blank\")}\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n        <Box\n          sx={{\n            ml: \"16px\",\n            mr: \"16px\",\n            mb: \"16px\",\n          }}\n        >\n          <PrimaryButton\n            label=\"Visit xnft.gg\"\n            onClick={onClose}\n            buttonLabelStyle={{\n              fontWeight: 600,\n            }}\n          />\n        </Box>\n      </Box>\n    </>\n  );\n}\n\nfunction CallToAction({\n  icon,\n  title,\n  onClick,\n}: {\n  icon: ReactNode;\n  title: string;\n  onClick: () => void;\n}) {\n  const theme = useCustomTheme();\n  return (\n    <Button\n      disableRipple\n      onClick={onClick}\n      style={{\n        padding: 0,\n        textTransform: \"none\",\n        border: `${theme.custom.colors.borderFull}`,\n        borderRadius: \"12px\",\n        background: theme.custom.colors.nav,\n        width: \"100%\",\n      }}\n    >\n      <Card\n        sx={{\n          p: 1,\n          color: theme.custom.colors.fontColor,\n          cursor: \"pointer\",\n          padding: \"16px\",\n          boxShadow: \"none\",\n          backgroundColor: \"transparent\",\n          width: \"100%\",\n        }}\n      >\n        <CardContent\n          style={{ padding: 0, display: \"flex\", alignItems: \"center\", gap: 12 }}\n        >\n          {icon}\n          <Box\n            style={{\n              fontSize: \"16px\",\n              lineHeight: \"24px\",\n              textAlign: \"left\",\n            }}\n          >\n            {title}\n          </Box>\n        </CardContent>\n      </Card>\n    </Button>\n  );\n}\n\nfunction PinNotification() {\n  const theme = useCustomTheme();\n\n  return (\n    <div\n      style={{\n        background: theme.custom.colors.brandColor,\n        paddingLeft: \"24px\",\n        paddingRight: \"24px\",\n        paddingTop: \"16px\",\n        paddingBottom: \"16px\",\n        color: theme.custom.colors.nav,\n        borderRadius: \"12px\",\n        boxShadow: \"0px 4px 20px rgba(0, 0, 0, 0.25)\",\n      }}\n    >\n      <Typography\n        style={{\n          fontWeight: 700,\n        }}\n      >\n        Pin the Backpack Extension\n      </Typography>\n      <div style={{ display: \"flex\", marginTop: \"4px\" }}>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n            marginRight: \"4px\",\n          }}\n        >\n          <Typography\n            style={{\n              fontSize: \"16px\",\n              fontWeight: 500,\n            }}\n          >\n            Click\n          </Typography>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n          }}\n        >\n          <ExtensionIcon fill={theme.custom.colors.nav} />\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n            marginLeft: \"4px\",\n            marginRight: \"4px\",\n          }}\n        >\n          <Typography\n            style={{\n              fontSize: \"16px\",\n              fontWeight: 500,\n            }}\n          >\n            and\n          </Typography>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n          }}\n        >\n          <PinIcon fill={theme.custom.colors.nav} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { MemoryRouter } from \"react-router-dom\";\nimport {\n  Blockchain,\n  QUERY_ADD_USER_ACCOUNT,\n  QUERY_CONNECT_HARDWARE,\n  QUERY_ONBOARDING,\n} from \"@coral-xyz/common\";\nimport { NotificationsProvider, useKeyringStoreState } from \"@coral-xyz/recoil\";\nimport { RecoilRoot } from \"recoil\";\n\nimport { WithSuspense } from \"../app/Router\";\nimport { WithTheme } from \"../components/common/WithTheme\";\nimport { Onboarding, OptionsContainer } from \"../components/Onboarding\";\nimport { ConnectHardware } from \"../components/Unlocked/Settings/AddConnectWallet/ConnectHardware\";\n\nimport \"../app/App.css\";\n\n//\n// Options provides the \"expanded\" extension app flows. Namely,\n//\n// - Onboarding\n// - Connect to hardware\n//\nfunction Options() {\n  return (\n    <MemoryRouter>\n      <RecoilRoot>\n        <_Options />\n      </RecoilRoot>\n    </MemoryRouter>\n  );\n}\n\nfunction _Options() {\n  useKeyringStoreState(); // starts polling to keep worker alive\n  return (\n    <WithTheme>\n      <NotificationsProvider>\n        <WithSuspense>\n          <Router />\n        </WithSuspense>\n      </NotificationsProvider>\n    </WithTheme>\n  );\n}\n\nfunction Router() {\n  //\n  // Extract the url query parameters for routing dispatch.\n  //\n  const search =\n    window.location.search.length > 0\n      ? window.location.search.substring(1)\n      : \"\";\n  const query = search.split(\"&\")[0];\n\n  const params = new URLSearchParams(window.location.search);\n  const blockchain = params.get(\"blockchain\") || Blockchain.SOLANA;\n  const action = (params.get(\"action\") || \"create\") as\n    | \"create\"\n    | \"import\"\n    | \"search\";\n  const createKeyring = params.get(\"create\") === \"true\";\n  const publicKey = params.get(\"publicKey\") || undefined;\n\n  switch (query) {\n    case QUERY_CONNECT_HARDWARE:\n      return (\n        <OptionsContainer>\n          <ConnectHardware\n            blockchain={blockchain as Blockchain}\n            action={action}\n            createKeyring={createKeyring}\n            publicKey={publicKey}\n            onComplete={window.close}\n          />\n        </OptionsContainer>\n      );\n    case QUERY_ONBOARDING:\n      return <Onboarding />;\n    case QUERY_ADD_USER_ACCOUNT:\n      return <Onboarding isAddingAccount />;\n    default:\n      throw new Error(\"invalid query param\");\n  }\n}\n\nexport default Options;\n"],"names":[],"sourceRoot":""}
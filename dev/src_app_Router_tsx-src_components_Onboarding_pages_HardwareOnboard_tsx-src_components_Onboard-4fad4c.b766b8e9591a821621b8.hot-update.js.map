{"version":3,"file":"src_app_Router_tsx-src_components_Onboarding_pages_HardwareOnboard_tsx-src_components_Onboard-4fad4c.b766b8e9591a821621b8.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAgBA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AAMA;AAEA;AAEA;;AAiBA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAMA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;;;;;;;AACA;;;;;;;AAAA;AAIA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AAAA;;;;;;;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;;;;;;;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAeA;;;;;;;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;;AAKA;AAxfA;;AAiBA;AACA;AAEA;;;AApBA","sources":["webpack://@coral-xyz/app-extension/./src/components/common/Account/ImportWallets.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport type { WalletDescriptor } from \"@coral-xyz/common\";\nimport {\n  Blockchain,\n  DEFAULT_SOLANA_CLUSTER,\n  EthereumConnectionUrl,\n  ethereumIndexed,\n  legacyBip44ChangeIndexed,\n  legacyBip44Indexed,\n  legacyEthereum,\n  legacyLedgerIndexed,\n  legacyLedgerLiveAccount,\n  legacySolletIndexed,\n  LOAD_PUBLIC_KEY_AMOUNT,\n  UI_RPC_METHOD_FIND_SERVER_PUBLIC_KEY_CONFLICTS,\n  UI_RPC_METHOD_KEYRING_STORE_READ_ALL_PUBKEYS,\n  UI_RPC_METHOD_PREVIEW_PUBKEYS,\n} from \"@coral-xyz/common\";\nimport { Loading, PrimaryButton, TextInput } from \"@coral-xyz/react-common\";\nimport { useBackgroundClient, useDehydratedWallets } from \"@coral-xyz/recoil\";\nimport { useCustomTheme } from \"@coral-xyz/themes\";\nimport Ethereum from \"@ledgerhq/hw-app-eth\";\nimport Solana from \"@ledgerhq/hw-app-solana\";\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport {\n  Box,\n  List,\n  ListItemButton,\n  ListItemText,\n  MenuItem,\n} from \"@mui/material\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { Connection as SolanaConnection, PublicKey } from \"@solana/web3.js\";\nimport { BigNumber, ethers } from \"ethers\";\n\nimport {\n  Checkbox,\n  Header,\n  SubtextParagraph,\n  walletAddressDisplay,\n} from \"../../common\";\nimport { Scrollbar } from \"../Layout/Scrollbar\";\n\nconst { base58: bs58 } = ethers.utils;\n\nexport function ImportWallets({\n  blockchain,\n  mnemonic,\n  transport,\n  onNext,\n  onError,\n  recovery,\n  allowMultiple = true,\n}: {\n  blockchain: Blockchain;\n  mnemonic?: string | true;\n  transport?: Transport;\n  onNext: (walletDescriptor: Array<WalletDescriptor>) => void;\n  onError?: (error: Error) => void;\n  recovery?: string;\n  allowMultiple?: boolean;\n}) {\n  const background = useBackgroundClient();\n  const theme = useCustomTheme();\n\n  const dehydrated = useDehydratedWallets();\n  const dehydratedPubkeys = dehydrated\n    .filter((d) => d.blockchain === blockchain)\n    .map((d) => d.publicKey);\n\n  // Loaded balances for each public key\n  const [balances, setBalances] = useState<{ [publicKey: string]: BigNumber }>(\n    {}\n  );\n  // Path to the public key\n  const [walletDescriptors, setWalletDescriptors] = useState<\n    Array<WalletDescriptor>\n  >([]);\n  const [checkedWalletDescriptors, setCheckedWalletDescriptors] = useState<\n    Array<WalletDescriptor>\n  >([]);\n  // Lock flag to prevent changing of derivation path while ledger is loading\n  const [ledgerLocked, setLedgerLocked] = useState(false);\n  // Public keys that have already been imported on this account\n  const [importedPublicKeys, setImportedPublicKeys] = useState<string[]>([]);\n  // Public keys that are in use on other Backpack accounts\n  const [conflictingPublicKeys, setConflictingPublicKeys] = useState<string[]>(\n    []\n  );\n\n  const derivationPathOptions = {\n    [Blockchain.SOLANA]: [\n      {\n        path: (i: number) => legacyBip44Indexed(Blockchain.SOLANA, i),\n        label: \"m/44/501'/x'\",\n      },\n      {\n        path: (i: number) => legacyBip44ChangeIndexed(Blockchain.SOLANA, i),\n        label: \"m/44/501'/x'/0'\",\n      },\n      {\n        path: (i: number) =>\n          legacyBip44ChangeIndexed(Blockchain.SOLANA, i) + \"/0'\",\n        label: \"m/44/501'/x'/0'/0'\",\n      },\n    ]\n      // Note: We only allow importing the deprecated sollet derivation path for\n      //       hot wallets. This UI is hidden behind a local storage flag we\n      //       expect people to manually set, since this derivation path was only\n      //       used by mostly technical early Solana users.\n      .concat(\n        mnemonic && window.localStorage.getItem(\"sollet\")\n          ? [\n              {\n                path: (i: number) => legacySolletIndexed(i),\n                label: \"501'/0'/0/0 (Deprecated)\",\n              },\n            ]\n          : []\n      ),\n    [Blockchain.ETHEREUM]: [\n      {\n        path: (i: number) => legacyEthereum(i),\n        label: \"m/44/60'/x\",\n      },\n      {\n        path: (i: number) => legacyLedgerIndexed(i),\n        label: \"m/44'/60'/0'/x' - Ledger\",\n      },\n      {\n        path: (i: number) => legacyLedgerLiveAccount(i),\n        label: \"m/44'/60'/x'/0/0 - Ledger Live\",\n      },\n      {\n        path: (i: number) => ethereumIndexed(i),\n        label: \"m/44'/60'/0'/0/x - Ethereum Standard\",\n      },\n    ],\n  }[blockchain];\n\n  const [derivationPathLabel, setDerivationPathLabel] = useState<string>(\n    derivationPathOptions[0].label\n  );\n  const [derivationPaths, setDerivationPaths] = useState<Array<string>>([]);\n\n  const disabledPublicKeys = [...importedPublicKeys, ...conflictingPublicKeys];\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const blockchainKeyrings = await background.request({\n          method: UI_RPC_METHOD_KEYRING_STORE_READ_ALL_PUBKEYS,\n          params: [],\n        });\n        const keyring = blockchainKeyrings[blockchain];\n        setImportedPublicKeys(\n          Object.values(keyring)\n            .flat()\n            .map((a: any) => a.publicKey)\n        );\n      } catch (error) {\n        // Keyring store locked, either onboarding or left open\n      }\n    })();\n  }, [background, blockchain]);\n\n  //\n  // Query the server for a list of public keys that are already in use\n  //\n  useEffect(() => {\n    (async () => {\n      if (walletDescriptors.length === 0) return;\n      try {\n        const response = await background.request({\n          method: UI_RPC_METHOD_FIND_SERVER_PUBLIC_KEY_CONFLICTS,\n          params: [\n            walletDescriptors.map((w) => ({\n              publicKey: w.publicKey,\n              blockchain,\n            })),\n          ],\n        });\n        setConflictingPublicKeys(\n          response.map(\n            (r: { user_id: string; public_key: string; blockchain: string }) =>\n              r.public_key\n          )\n        );\n      } catch {\n        // If the query failed assume all are valid\n      }\n    })();\n  }, [background, blockchain, walletDescriptors]);\n\n  //\n  // Load a list of accounts and their associated balances\n  //\n  useEffect(() => {\n    if (!derivationPaths) return;\n\n    setCheckedWalletDescriptors([]);\n\n    let loaderFn;\n    // `mnemonic` can be true here if we aren't passing the mnemonic then it\n    // can be taken from the unlocked keyring on the backend\n    if (mnemonic) {\n      // Loading accounts from a mnemonic\n      loaderFn = (derivationPaths: Array<string>) =>\n        loadMnemonicPublicKeys(mnemonic, derivationPaths);\n    } else if (transport) {\n      // Loading accounts from a Ledger\n      loaderFn = (derivationPaths: Array<string>) =>\n        loadLedgerPublicKeys(transport, derivationPaths);\n    } else {\n      throw new Error(\"no public key loader found\");\n    }\n\n    loaderFn(derivationPaths)\n      .then(async (publicKeys: string[]) => {\n        setWalletDescriptors(\n          derivationPaths.map((derivationPath, i) => ({\n            blockchain,\n            publicKey: publicKeys[i],\n            derivationPath,\n          }))\n        );\n        const balances = await loadBalances(publicKeys);\n        setBalances(\n          Object.fromEntries(\n            balances\n              .sort((a, b) =>\n                b.balance.lt(a.balance) ? -1 : b.balance.eq(a.balance) ? 0 : 1\n              )\n              .map((a) => [a.publicKey, a.balance])\n          )\n        );\n      })\n      .catch((error) => {\n        // Probably Ledger error, i.e. app is not opened\n        console.error(error);\n        if (onError) {\n          // Call custom error handler if one was passed\n          onError(error);\n        } else {\n          throw error;\n        }\n      });\n  }, [mnemonic, transport, derivationPaths]);\n\n  //\n  // Clear accounts and selected acounts on change of derivation path.\n  //\n  useEffect(() => {\n    setBalances({});\n    setWalletDescriptors([]);\n    if (derivationPathLabel !== null) {\n      const derivationPath = derivationPathOptions.find(\n        (d) => d.label === derivationPathLabel\n      );\n      if (!derivationPath) throw new Error(\"Invalid derivation path label\");\n      setDerivationPaths(\n        [...Array(LOAD_PUBLIC_KEY_AMOUNT).keys()].map((i) =>\n          derivationPath.path(i)\n        )\n      );\n    }\n  }, [derivationPathLabel]);\n\n  //\n  // Load balances for accounts that have been loaded\n  //\n  const loadBalances = async (publicKeys: string[]) => {\n    if (blockchain === Blockchain.SOLANA) {\n      // TODO use Backpack configured value\n      const solanaMainnetRpc =\n        process.env.DEFAULT_SOLANA_CONNECTION_URL || DEFAULT_SOLANA_CLUSTER;\n      const solanaConnection = new SolanaConnection(\n        solanaMainnetRpc,\n        \"confirmed\"\n      );\n      const accounts = (\n        await anchor.utils.rpc.getMultipleAccounts(\n          solanaConnection,\n          publicKeys.map((p) => new PublicKey(p))\n        )\n      ).map((result, index) => {\n        return {\n          publicKey: publicKeys[index],\n          balance: result\n            ? BigNumber.from(result.account.lamports)\n            : BigNumber.from(0),\n          index,\n        };\n      });\n      return accounts;\n    } else if (blockchain === Blockchain.ETHEREUM) {\n      // TODO use Backpack configured value\n      const ethereumMainnetRpc =\n        process.env.DEFAULT_ETHEREUM_CONNECTION_URL ||\n        EthereumConnectionUrl.MAINNET;\n      const ethereumProvider = new ethers.providers.JsonRpcProvider(\n        ethereumMainnetRpc\n      );\n      const balances = await Promise.all(\n        publicKeys.map((p) => ethereumProvider.getBalance(p))\n      );\n      return publicKeys.map((p, index) => {\n        return { publicKey: p, balance: balances[index], index };\n      });\n    } else {\n      throw new Error(\"invalid blockchain\");\n    }\n  };\n\n  //\n  // Load accounts for the given mnemonic. This is passed to the ImportWallets\n  // component and called whenever the derivation path is changed with the selector.\n  //\n  const loadMnemonicPublicKeys = async (\n    mnemonic: string | true,\n    derivationPaths: Array<string>\n  ) => {\n    return await background.request({\n      method: UI_RPC_METHOD_PREVIEW_PUBKEYS,\n      params: [blockchain, mnemonic, derivationPaths],\n    });\n  };\n\n  //\n  // Load accounts for a ledger.\n  //\n  const loadLedgerPublicKeys = async (\n    transport: Transport,\n    derivationPaths: Array<string>\n  ): Promise<string[]> => {\n    const publicKeys = [];\n    setLedgerLocked(true);\n    const ledger = {\n      [Blockchain.SOLANA]: new Solana(transport),\n      [Blockchain.ETHEREUM]: new Ethereum(transport),\n    }[blockchain];\n    // Add remaining accounts\n    for (const derivationPath of derivationPaths) {\n      publicKeys.push(\n        (await ledger.getAddress(derivationPath.replace(\"m/\", \"\"))).address\n      );\n    }\n    setLedgerLocked(false);\n    return publicKeys.map((p) =>\n      blockchain === Blockchain.SOLANA ? bs58.encode(p) : p.toString()\n    );\n  };\n\n  const isDisabledPublicKey = (pk: string): boolean => {\n    if (recovery === undefined) {\n      return disabledPublicKeys.includes(pk);\n    }\n    return pk !== recovery || !dehydratedPubkeys.includes(pk);\n  };\n\n  //\n  // Handles checkbox clicks to select accounts to import.\n  //\n  const handleSelect = (publicKey: string, derivationPath: string) => () => {\n    const currentIndex = checkedWalletDescriptors.findIndex(\n      (a) => a.publicKey === publicKey\n    );\n    let newCheckedWalletDescriptors = [...checkedWalletDescriptors];\n    if (currentIndex === -1) {\n      // Not selected, add it\n      const walletDescriptor = {\n        blockchain,\n        derivationPath,\n        publicKey,\n      };\n      // Adding the account\n      if (allowMultiple) {\n        newCheckedWalletDescriptors.push(walletDescriptor);\n      } else {\n        newCheckedWalletDescriptors = [walletDescriptor];\n      }\n    } else {\n      // Removing the account\n      newCheckedWalletDescriptors.splice(currentIndex, 1);\n    }\n    // TODO Sort by account indices\n    // newCheckedWalletDescriptors.sort((a, b) => a.index - b.index);\n    setCheckedWalletDescriptors(newCheckedWalletDescriptors);\n  };\n\n  // Symbol for balance displays\n  const symbol = {\n    [Blockchain.SOLANA]: \"SOL\",\n    [Blockchain.ETHEREUM]: \"ETH\",\n  }[blockchain];\n\n  // Decimals for balance displays\n  const decimals = {\n    [Blockchain.SOLANA]: 9,\n    [Blockchain.ETHEREUM]: 18,\n  }[blockchain];\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <Box>\n        <Box\n          sx={{\n            marginLeft: \"24px\",\n            marginRight: \"24px\",\n            marginTop: \"24px\",\n          }}\n        >\n          <Header text={`Import wallet${allowMultiple ? \"s\" : \"\"}`} />\n          <SubtextParagraph>\n            Select which wallet{allowMultiple ? \"s\" : \"\"} you'd like to import.\n          </SubtextParagraph>\n        </Box>\n        <div style={{ margin: \"16px\" }}>\n          <TextInput\n            placeholder=\"Derivation Path\"\n            value={derivationPathLabel}\n            setValue={(e) => setDerivationPathLabel(e.target.value)}\n            select\n            disabled={ledgerLocked}\n          >\n            {derivationPathOptions.map((o) => (\n              <MenuItem value={o.label} key={o.label}>\n                {o.label}\n              </MenuItem>\n            ))}\n          </TextInput>\n        </div>\n        {Object.keys(balances).length > 0 ? (\n          <List\n            sx={{\n              color: theme.custom.colors.fontColor,\n              background: theme.custom.colors.background,\n              borderRadius: \"12px\",\n              marginLeft: \"16px\",\n              marginRight: \"16px\",\n              paddingTop: \"8px\",\n              paddingBottom: \"8px\",\n              height: \"225px\",\n            }}\n          >\n            <Scrollbar>\n              {[...walletDescriptors]\n                .sort((a, b) => {\n                  // Sort so that any public keys with balances are displayed first\n                  if (balances[a.publicKey] < balances[b.publicKey]) {\n                    return 1;\n                  } else if (balances[a.publicKey] > balances[b.publicKey]) {\n                    return -1;\n                  } else {\n                    return 0;\n                  }\n                })\n                .map(({ publicKey, derivationPath }) => (\n                  <ListItemButton\n                    disableRipple\n                    key={publicKey.toString()}\n                    onClick={handleSelect(publicKey, derivationPath)}\n                    sx={{\n                      display: \"flex\",\n                      paddinLeft: \"16px\",\n                      paddingRight: \"16px\",\n                      paddingTop: \"5px\",\n                      paddingBottom: \"5px\",\n                    }}\n                    disabled={isDisabledPublicKey(publicKey.toString())}\n                  >\n                    <Box style={{ display: \"flex\", width: \"100%\" }}>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          justifyContent: \"center\",\n                          flexDirection: \"column\",\n                        }}\n                      >\n                        <Checkbox\n                          edge=\"start\"\n                          checked={\n                            checkedWalletDescriptors.some(\n                              (a) => a.derivationPath === derivationPath\n                            ) ||\n                            importedPublicKeys.includes(publicKey.toString())\n                          }\n                          tabIndex={-1}\n                          disabled={isDisabledPublicKey(publicKey.toString())}\n                          disableRipple\n                          style={{ marginLeft: 0 }}\n                        />\n                      </div>\n                      <ListItemText\n                        id={publicKey.toString()}\n                        primary={walletAddressDisplay(publicKey)}\n                        sx={{\n                          marginLeft: \"8px\",\n                          fontSize: \"14px\",\n                          lineHeight: \"32px\",\n                          fontWeight: 500,\n                        }}\n                      />\n                      <ListItemText\n                        sx={{\n                          color: theme.custom.colors.secondary,\n                          textAlign: \"right\",\n                        }}\n                        primary={`${\n                          balances[publicKey]\n                            ? (+ethers.utils.formatUnits(\n                                balances[publicKey],\n                                decimals\n                              )).toFixed(4)\n                            : \"-\"\n                        } ${symbol}`}\n                      />\n                    </Box>\n                  </ListItemButton>\n                ))}\n            </Scrollbar>\n          </List>\n        ) : (\n          <Loading />\n        )}\n      </Box>\n      <Box\n        sx={{\n          mt: \"12px\",\n          ml: \"16px\",\n          mr: \"16px\",\n          mb: \"16px\",\n        }}\n      >\n        <PrimaryButton\n          label={`Import Wallet${allowMultiple ? \"s\" : \"\"}`}\n          onClick={() => onNext(checkedWalletDescriptors)}\n          disabled={checkedWalletDescriptors.length === 0}\n        />\n      </Box>\n    </Box>\n  );\n}\n"],"names":[],"sourceRoot":""}
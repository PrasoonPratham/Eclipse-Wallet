{"version":3,"file":"src_components_LedgerIframe_tsx-_96271.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAOA;AAEA;;AAEA;;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;AAGA;AA/DA;AAAA;AAiEA","sources":["webpack://@coral-xyz/app-extension/./src/components/LedgerIframe.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nimport {\n  getLogger,\n  isValidEventOrigin,\n  LEDGER_IFRAME_URL,\n  LEDGER_INJECTED_CHANNEL_RESPONSE,\n} from \"@coral-xyz/common\";\n\nconst logger = getLogger(\"app-extension/ledger-iframe\");\n\n/**\n * A hidden iframe that's used to communicate (as a proxy) with a Ledger\n */\nconst LedgerIframe = () => {\n  const iframe = useRef<HTMLIFrameElement>(null);\n\n  useEffect(() => {\n    let handleMessage: (event: MessageEvent) => void;\n\n    navigator.serviceWorker.ready\n      .then(() => {\n        logger.debug(\"ledger iframe ready\");\n        //\n        // Response: relays message from the injected ledger iframe to the\n        //           background script.\n        //\n        handleMessage = (event) => {\n          if (!isValidEventOrigin(event)) {\n            logger.error(\"invalid event origin\");\n            return;\n          }\n          const data = event.data;\n          if (data.type !== LEDGER_INJECTED_CHANNEL_RESPONSE) {\n            return;\n          }\n          logger.debug(\"handleMessage\", data);\n          navigator.serviceWorker.controller?.postMessage(data);\n        };\n\n        window.addEventListener(\"message\", handleMessage);\n\n        //\n        // Request: relays the message from the background script to the\n        //          iframe so that it has permissions to communicate with\n        //          the ledger.\n        navigator.serviceWorker.onmessage = (msg) => {\n          if (!isValidEventOrigin(msg)) {\n            return;\n          }\n          const data = msg.data;\n          logger.debug(\"onmessage\", data);\n          iframe.current?.contentWindow?.postMessage(data, \"*\");\n        };\n      })\n      .catch((err) => logger.error(\"service worker not ready\", err));\n\n    return () => {\n      // TODO: check if this cleanup is adequate\n      navigator.serviceWorker.onmessage = null;\n      window.removeEventListener(\"message\", handleMessage);\n    };\n  }, []);\n\n  logger.debug(\"rendering hidden iframe for ledger\", LEDGER_IFRAME_URL);\n\n  // allow=\"hid 'src'\" is why this component is necessary, because it allows\n  // us to communicate with a ledger using the Human Interface Device API.\n  return (\n    <iframe\n      ref={iframe}\n      src={LEDGER_IFRAME_URL}\n      allow=\"hid 'src'\"\n      tabIndex={-1}\n      style={{ display: \"none\" }}\n    />\n  );\n};\n\nexport default LedgerIframe;\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"popup.68027d0b1d63919c344c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAMA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AACA;;;;;;;AAEA;AAAA;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3DA","sources":["webpack://@coral-xyz/app-extension/./src/index.tsx","webpack://@coral-xyz/app-extension/webpack/runtime/getFullHash"],"sourcesContent":["import { lazy, Suspense } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport {\n  BACKPACK_FEATURE_POP_MODE,\n  isValidEventOrigin,\n  openPopupWindow,\n} from \"@coral-xyz/common\";\n\nimport \"./index.css\";\n\nconst App = lazy(() => import(\"./app/App\"));\nconst LedgerIframe = lazy(() => import(\"./components/LedgerIframe\"));\n\n// Tell all existing extension instances that this instance now exists.\n// This block ensures a single extension window is open at any given time.\nchrome.runtime\n  .sendMessage(\"new-instance-was-opened\")\n  .then(() => {\n    // Close all existing extension instances so only the newest is running\n    chrome.runtime.onMessage.addListener((msg, sender) => {\n      if (isValidEventOrigin(sender) && msg === \"new-instance-was-opened\") {\n        window.close();\n      }\n    });\n  })\n  .catch(console.error);\n\n// Connect to the background script so it can detect if the popup is closed\nchrome.runtime.connect();\n\n//\n// Configure event listeners.\n//\ndocument.addEventListener(\"keydown\", async function onKeyDown(event) {\n  //\n  // Pop open the window.\n  //\n  if (BACKPACK_FEATURE_POP_MODE) {\n    if (event.key === \"g\" && event.ctrlKey) {\n      event.preventDefault();\n      const currentWindow = await chrome.windows.getCurrent();\n      const popupWindow = await openPopupWindow(\"popup.html\");\n      if (currentWindow.id !== popupWindow.id) {\n        window.close();\n      }\n    }\n  }\n});\n\n// Render the UI.\n// TOOD(react) createRoot is required: https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html#updates-to-client-rendering-apis\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container!);\nroot.render(\n  <>\n    <Suspense fallback={null}>\n      <App />\n    </Suspense>\n    <Suspense fallback={null}>\n      <LedgerIframe />\n    </Suspense>\n  </>\n);\n","__webpack_require__.h = () => (\"ec8f12ea66e0219072e1\")"],"names":[],"sourceRoot":""}